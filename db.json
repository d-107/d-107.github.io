{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/about/index/wx.jpg","path":"about/index/wx.jpg","modified":0,"renderable":0},{"_id":"source/about/index/happy-codding.jpg","path":"about/index/happy-codding.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-sense/source/css/content.css.map","path":"css/content.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/content.css","path":"css/content.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/content.scss","path":"css/content.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/footer.css.map","path":"css/footer.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/footer.css","path":"css/footer.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/footer.scss","path":"css/footer.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/go-top.css","path":"css/go-top.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/go-top.css.map","path":"css/go-top.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/go-top.scss","path":"css/go-top.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/fonts.css","path":"css/fonts.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/fonts.css.map","path":"css/fonts.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/header.css.map","path":"css/header.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/fonts.scss","path":"css/fonts.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/header.css","path":"css/header.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/highlight.css.map","path":"css/highlight.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/image-view.css.map","path":"css/image-view.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/header.scss","path":"css/header.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/highlight.scss","path":"css/highlight.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/page.css","path":"css/page.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/page.css.map","path":"css/page.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.css","path":"css/scrollbar.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.css.map","path":"css/scrollbar.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.scss","path":"css/scrollbar.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/search.css.map","path":"css/search.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/page.scss","path":"css/page.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/search.scss","path":"css/search.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/sense.css","path":"css/sense.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/image-view.css","path":"css/image-view.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/image-view.scss","path":"css/image-view.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/video.css.map","path":"css/video.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/video.scss","path":"css/video.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/sense.scss","path":"css/sense.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/cursor/No_Disponible.cur","path":"cursor/No_Disponible.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/cursor/ayuda.cur","path":"cursor/ayuda.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/cursor/texto.cur","path":"cursor/texto.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/cursor/normal.cur","path":"cursor/normal.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/cursor/work.cur","path":"cursor/work.cur","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/font/iconfont.eot","path":"font/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/font/iconfont.svg","path":"font/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/font/iconfont.ttf","path":"font/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/sense.css.map","path":"css/sense.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/css/video.css","path":"css/video.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/photoTheater.png","path":"images/photoTheater.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/d-107.png","path":"images/d-107.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/rotate.png","path":"images/rotate.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/image-view.js","path":"js/image-view.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/sakura.js","path":"js/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/firework.js","path":"js/firework.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/overlay-hero.png","path":"images/overlay-hero.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/font/iconfont.woff","path":"font/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/sense.js","path":"js/sense.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/js/snow.js","path":"js/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/video/sense.ogv","path":"video/sense.ogv","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/video/sense.webm","path":"video/sense.webm","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/images/sense.png","path":"images/sense.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-sense/source/video/sense.mp4","path":"video/sense.mp4","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-sense/.gitignore","hash":"d49f1bb616546a62989c76f742471e51151bd12c","modified":1567559514923},{"_id":"themes/hexo-theme-sense/README.md","hash":"81e52b5ad941d37c096e2e58c10059bbe50db3a8","modified":1569743499882},{"_id":"themes/hexo-theme-sense/package.json","hash":"ad737acf3e7ff243870a22f294b5a9d986b59ed2","modified":1567559514933},{"_id":"themes/hexo-theme-sense/_config.yml","hash":"5dce9e482bcb06d6e7235d0e7972075fe74ba8ad","modified":1572327272173},{"_id":"source/_posts/hello-dotnet.md","hash":"4d9f18a4fa9325b28daa0292e1204420f317ffcc","modified":1572596979292},{"_id":"source/_posts/hello-php.md","hash":"049de9f86fb76abc885351cdfac9d799055e8c35","modified":1567588102631},{"_id":"source/_posts/another-year-1024.md","hash":"02a7aad380c8f90c7d518bf58429a6648eb53dae","modified":1572316360043},{"_id":"source/_posts/laravel-broadcasting.md","hash":"b6a96b34fb44d866c7a23405bf8e2f01ea827d2e","modified":1569822602230},{"_id":"source/_data/temp.yml","hash":"2b48d23caa9be6fd242baaf21a4630f7874630bb","modified":1572328182140},{"_id":"themes/hexo-theme-sense/package-lock.json","hash":"6f88399c8a5db9a916a39456ee9db8250c9b1e67","modified":1567559514933},{"_id":"source/_posts/laravel-events.md","hash":"db18b63f15916aaba6130c146245bb337ef82570","modified":1569822646249},{"_id":"source/_posts/laravel-swoole-in-laradock.md","hash":"ace18985fabfa85e39e16634b9a290f05921ced5","modified":1569822653805},{"_id":"source/_posts/hello-world.md","hash":"5bf71067859cba9b13543ed08b7ec921286c8927","modified":1567146762442},{"_id":"source/_posts/laravel-mix.md","hash":"a37f9638cce6068974f0d2fc69be958f78011fa8","modified":1569822648652},{"_id":"source/_posts/laravel-vue-svg.md","hash":"dbefa3c63f214e6a190c4a6b7ad624b225320cd6","modified":1572315958673},{"_id":"source/_posts/laravel-swoole-socket-in-laradock.md","hash":"457a4ccafa1860b8cc6c7b27100a89aaca8d7402","modified":1572593322215},{"_id":"source/_posts/net-core-april-util-update-1.md","hash":"112581d8878586b703e2cf4d30d86eb18ec8dfb6","modified":1574391578663},{"_id":"source/_posts/net-core-april-util.md","hash":"b01fa8ea7e618d066b6a96665f41d9b07eb0a8b4","modified":1574391419686},{"_id":"source/_posts/net-core-aop-2.md","hash":"6636c073fde5646b8724e412f9f8eaa6ac3e52cb","modified":1569822360986},{"_id":"source/_posts/net-core-aop-1.md","hash":"56274af4ff4eb4cc6a250e6084e739b967c2bfda","modified":1569822357927},{"_id":"source/_posts/net-core-createprogram.md","hash":"4e3b213e5b48efcdd9a8ac9de679d7323d99e4b6","modified":1569822366972},{"_id":"source/_posts/net-core-filedownload.md","hash":"926ad935733f8bd61510b04807f9e27c78bb0b0a","modified":1569822371076},{"_id":"source/_posts/net-core-fileuploader-and-cors.md","hash":"1644934af37fabaefd913bf580cd89be317bd714","modified":1569822377961},{"_id":"source/_posts/laravel-queues.md","hash":"ddf9ab9e4f533c4817f78b4ef128a136c79cb96a","modified":1569822650872},{"_id":"source/_posts/net-core-cache.md","hash":"a3fcf3bac88b7277d76a1dc01cf5c183361e28f4","modified":1569822363903},{"_id":"source/_posts/net-core-quartz.md","hash":"36de6d89cf13d541c319f8ebc5141d480e938cda","modified":1569822383853},{"_id":"source/_posts/net-core-qywx-application.md","hash":"74f1c162593be8262002e1b6eb2141136e88b738","modified":1569822386760},{"_id":"source/_posts/net-core-redis.md","hash":"64d6719581c9640862e40f157736f65ef678de21","modified":1569822427993},{"_id":"source/_posts/net-core-swagger.md","hash":"effd9d775ea9cb47623f93064b1d1d19e4849ab7","modified":1569822440933},{"_id":"source/_posts/net-core-log4net.md","hash":"60c4bd75d5dbcc4e45c7d9d604c89a2e2d15616e","modified":1569822381165},{"_id":"source/_posts/net-core-unittest.md","hash":"9430a63b9db38faa039d7bce4947bc0a736fb85f","modified":1574391369685},{"_id":"source/_posts/net-core-tools-and-environment.md","hash":"15cf98e096e5b87a8d0052f88fdcf9717ff51fd8","modified":1569822444237},{"_id":"source/_posts/net-core-sqlsugar-1.md","hash":"faadc87330935ab98f81da809ae5aefed67155e6","modified":1569822431049},{"_id":"source/_posts/net-core-sqlsugar-2.md","hash":"3dc3dcaaf79313708d2bcc886a40272eb75a0fda","modified":1569822437978},{"_id":"source/_posts/net-core-v3-april-webapi.md","hash":"4e27c3c3e77f166b35bf93a99588fdfffdda1391","modified":1570689198348},{"_id":"source/_posts/net-core-v3-swagger.md","hash":"730d19c92d0ecbd7450f028acc9a2d37de2c2795","modified":1570688201489},{"_id":"source/_posts/net-core-v3-npoi.md","hash":"92c0cf62868a748c2a043435e46e409cf2cd3d81","modified":1572316092302},{"_id":"source/_posts/net-core-webapi-main.md","hash":"f62aa4d3c4843b1fecc8233826cf5ae4797dffbb","modified":1569822447733},{"_id":"source/_posts/use-laravel-permission-can-tag-in-vue.md","hash":"137bcc409c2faa2a4fe64dfaae87dd8965e5dc15","modified":1569822656797},{"_id":"source/_posts/vmare-docker.md","hash":"b2e842f78da840ece254fa99e5dc7973207b837e","modified":1572316841957},{"_id":"source/_posts/tp5-fileupload-requestfile-is-null.md","hash":"bd7e4eb6e496832bddb2cf8af5f8535ef9ba2299","modified":1569822334549},{"_id":"source/_posts/net-core-v3-publish.md","hash":"5805b281a92b4648f898bfd1dc4ea6c1bf60c3ee","modified":1572316868710},{"_id":"source/_posts/vmware-redis.md","hash":"5a699adc8290476228e3f11a6a4d3bd775cbb3fe","modified":1569822472646},{"_id":"source/about/index.md","hash":"1947402f5e9a290a11df0d431532cbb354c30cef","modified":1567587088399},{"_id":"themes/hexo-theme-sense/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1567559514924},{"_id":"themes/hexo-theme-sense/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1567559514924},{"_id":"themes/hexo-theme-sense/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1567559514924},{"_id":"themes/hexo-theme-sense/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1567559514924},{"_id":"themes/hexo-theme-sense/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1567559514925},{"_id":"themes/hexo-theme-sense/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1567559514925},{"_id":"themes/hexo-theme-sense/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1567559514925},{"_id":"themes/hexo-theme-sense/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1567559514926},{"_id":"themes/hexo-theme-sense/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1567559514926},{"_id":"themes/hexo-theme-sense/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1567559514926},{"_id":"themes/hexo-theme-sense/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1567559514927},{"_id":"source/_posts/vmware-use-centos.md","hash":"a527ca4202de8a3f5bfa049ab4fe89d2e16ba682","modified":1569822477694},{"_id":"themes/hexo-theme-sense/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1567559514927},{"_id":"source/_posts/vmware-nginx.md","hash":"0f9ec28a2cab2e2c9bb9bac184eae1978e62d4df","modified":1569822469277},{"_id":"themes/hexo-theme-sense/layout/index.ejs","hash":"f937fcb3d7da3b3650f80c253150c206b5dbaef7","modified":1567559514928},{"_id":"themes/hexo-theme-sense/layout/layout.ejs","hash":"56ddbd02f545ec7770709fcba8c0c8345be45176","modified":1567559514930},{"_id":"themes/hexo-theme-sense/layout/page.ejs","hash":"f21852dfc6cedbb4a3c5fa8ba3cb011f30076ab8","modified":1569735776450},{"_id":"themes/hexo-theme-sense/layout/category.ejs","hash":"a25191ef4250c5dcf07c1b5eb7804753386c7e10","modified":1567587088401},{"_id":"themes/hexo-theme-sense/layout/tag.ejs","hash":"89487a6b87eff85ca16f44717eb03696641511d3","modified":1567587088404},{"_id":"themes/hexo-theme-sense/scripts/scripts.js","hash":"14bbc924253d6572cbefa752b910eba524c2424f","modified":1567559514934},{"_id":"themes/hexo-theme-sense/layout/archive.ejs","hash":"7b865c4a55eebed683513155320892dfc34266c3","modified":1567587088400},{"_id":"themes/hexo-theme-sense/layout/post.ejs","hash":"0a8046eab866835b1cb5d4a4dd88ae89ce2d0c32","modified":1572327761692},{"_id":"source/_posts/vmware-mysql.md","hash":"d5b0daaf0f98e22240f2d79c265a549a8837d22a","modified":1569822465453},{"_id":"source/_posts/laravel-broadcasting/new.png","hash":"be082f8430fe87420a8a2d0b80c5ec7174dd3509","modified":1569735776419},{"_id":"source/_posts/laravel-events/new-event.png","hash":"ebbfcf9dea64da8f3a1e27ea6a87e76a56e68eab","modified":1569735776428},{"_id":"source/_posts/laravel-broadcasting/mes.png","hash":"eb6c38d51e7d0a24485473216abc88855dc3de01","modified":1569735776342},{"_id":"source/_posts/laravel-mix/laravel-mix.png","hash":"8d39264428735ea937bf1ded9d095e430b289a17","modified":1569735776433},{"_id":"source/_posts/laravel-events/out.png","hash":"d13d91bff2c56ce2d01eb03564ebf3cf7e8abc33","modified":1569735776430},{"_id":"source/_posts/laravel-queues/email.png","hash":"bfdca4ff3f9c2fdc46e6775c37961022683f0cce","modified":1569735776437},{"_id":"source/_posts/laravel-swoole-in-laradock/laradock.png","hash":"fb249a240bae786470099b0cf554d89b446c3623","modified":1569735776446},{"_id":"source/_posts/net-core-aop-1/1.png","hash":"780ee9b44c3d6533493db6ec477bd18d1b4bb8c3","modified":1569303506569},{"_id":"source/_posts/laravel-swoole-socket-in-laradock/laradock.png","hash":"fb249a240bae786470099b0cf554d89b446c3623","modified":1571638132162},{"_id":"source/_posts/net-core-aop-1/4.png","hash":"26f9cd36f1b1c24bd1bb5d86501ea3f0f782b41f","modified":1569303518688},{"_id":"source/_posts/net-core-aop-1/2.png","hash":"607142672012cedc5b9f9450deb41b2641f5b318","modified":1569303512321},{"_id":"source/_posts/net-core-aop-1/3.png","hash":"c556fcdcbb2d5750441ed6be369d56ffb67bfd0f","modified":1569303514602},{"_id":"source/_posts/net-core-aop-1/6.png","hash":"27485076145c47bc7ac144314283eb64f1fae528","modified":1569303525000},{"_id":"source/_posts/net-core-aop-1/5.png","hash":"79cbd9e4133871bacce3f6ec00cd78466fbc844b","modified":1569303520640},{"_id":"source/_posts/net-core-aop-2/3.png","hash":"60bd9e5674c9bbb875e24cca4fec4e2803942dda","modified":1569303717272},{"_id":"source/_posts/net-core-aop-2/4.png","hash":"16c11cee5fdac52efea7daff78fc1f5d6c33752b","modified":1569303719820},{"_id":"source/_posts/net-core-april-util/1.png","hash":"1d0ebc979af27ad3373eaba012ffac1ee974cab7","modified":1574391296638},{"_id":"source/_posts/net-core-april-util/2.png","hash":"051932c78473a6dbaa5241c6b4e62d46f5119b42","modified":1574391317685},{"_id":"source/_posts/net-core-april-util/3.png","hash":"e913f70abf0e10f71deb3bf69173a2a7b24eaa45","modified":1574391321152},{"_id":"source/_posts/net-core-april-util/4.png","hash":"7571d00feebf631f7de20f908dfd7fc216bbe826","modified":1574391325444},{"_id":"source/_posts/net-core-april-util/5.png","hash":"aa2841aba09d3d87cb67d957d7c110fc29414b45","modified":1574391327816},{"_id":"source/_posts/net-core-april-util/7.png","hash":"9724996f89b8b5bcb3ee2b86ee22c3a620ecc60b","modified":1574391333646},{"_id":"source/_posts/net-core-april-util-update-1/1.png","hash":"78a5c54ab470f86efa9a2a5280b6f4be961b3787","modified":1574391490335},{"_id":"source/_posts/net-core-april-util-update-1/2.png","hash":"99e3cbf4912b681ce83dce60c3c092e7326c1932","modified":1574391497151},{"_id":"source/_posts/net-core-april-util-update-1/3.png","hash":"2197a2a6d56fd5c78724a45e9ff0931021ec8aa4","modified":1574391500158},{"_id":"source/_posts/net-core-april-util-update-1/4.png","hash":"090c35650ba92e31b1c29bef38200ecd392a923a","modified":1574391503265},{"_id":"source/_posts/net-core-april-util-update-1/5.png","hash":"23cd7418044e9c85429e265f8dd34af5366ad243","modified":1574391506502},{"_id":"source/_posts/net-core-april-util-update-1/6.png","hash":"9388b2e7d4008675bdc2f1c67f0d3b40987a5531","modified":1574391509286},{"_id":"source/_posts/net-core-april-util-update-1/7.png","hash":"30d14f4054e57d8e0d549f7fa88959b120e202a9","modified":1574391511702},{"_id":"source/_posts/net-core-april-util-update-1/8.png","hash":"b76f9d6f0a3349e5d84870086ff43fc4a916d8b1","modified":1574391514527},{"_id":"source/_posts/net-core-aop-1/8.png","hash":"dc7c175d3adce6952a30cac8b09e7c980a19bf28","modified":1569303530032},{"_id":"source/_posts/net-core-aop-2/2.png","hash":"e824a22aa3daabfdfd82597ffc32fc2faf657897","modified":1569303714225},{"_id":"source/_posts/net-core-aop-2/1.png","hash":"610d9aaf433b99426ce2c1ac797de152c3677458","modified":1569303703969},{"_id":"source/_posts/net-core-cache/10.png","hash":"f5fb591e06416155bdd21eb8305fc712a4fa9e40","modified":1569296430470},{"_id":"source/_posts/net-core-cache/3.png","hash":"3b5ae85764678cdb4b30d2089ec572ee471d0dd1","modified":1569296406209},{"_id":"source/_posts/net-core-cache/6.png","hash":"d16a90da59ce4495d05b7c0bb890894cfd84ae3e","modified":1569296417766},{"_id":"source/_posts/net-core-cache/2.png","hash":"9c319a60c2132a6147fe3301dbf838d7dc7783d0","modified":1569296403383},{"_id":"source/_posts/net-core-cache/8.png","hash":"bd8212b2da92788304d4ee2614080799f7d639cc","modified":1569296423554},{"_id":"source/_posts/net-core-cache/9.png","hash":"c67d5edd0413b96a45f080335a7c60190bcaa3ce","modified":1569296426206},{"_id":"source/_posts/net-core-cache/7.png","hash":"cd2263013bb301a04fb042eec76decf6755625ab","modified":1569296420902},{"_id":"source/_posts/net-core-cache/4.png","hash":"cb5eb9561be2b3a00c0c68197a77bfde73a8dfb7","modified":1569296408783},{"_id":"source/_posts/net-core-createprogram/2.png","hash":"b25635ba96c0ce5aed1eee36e97322a7df9ed869","modified":1569294365103},{"_id":"source/_posts/net-core-createprogram/4.png","hash":"07a4bf94522f46145a4b4f2b121963ba52def540","modified":1569294373007},{"_id":"source/_posts/net-core-createprogram/5.png","hash":"764930797950d619723fa5b511f722f61048d63b","modified":1569294376775},{"_id":"source/_posts/net-core-fileuploader-and-cors/3.png","hash":"ec2442681b8acef0b506cb2940e229b0ef4dcd8b","modified":1569740804646},{"_id":"source/_posts/net-core-fileuploader-and-cors/5.png","hash":"0b0985b2605936e0d5eea3a903ed4761105e309c","modified":1569740813331},{"_id":"source/_posts/net-core-log4net/6.png","hash":"03ac034d208930dc33e87dad46bf0b579fd8146a","modified":1569295374728},{"_id":"source/_posts/net-core-log4net/7.png","hash":"5c773c349de4f13989b45b812825a8b78ee8ec68","modified":1569295377287},{"_id":"source/_posts/net-core-log4net/3.png","hash":"adecebc640cb2f6cd1521d055be4d38ad0443028","modified":1569295364711},{"_id":"source/_posts/net-core-log4net/8.png","hash":"81f7653f0230b215a879105617c5e89e4713c878","modified":1569295383390},{"_id":"source/_posts/net-core-log4net/9.png","hash":"08b8960af698827b185afb2349852afe9e94ed95","modified":1569295386096},{"_id":"source/_posts/net-core-quartz/2.png","hash":"50ff5d7f73baff0a8be28dce8583348ffb7ec429","modified":1569741810226},{"_id":"source/_posts/net-core-fileuploader-and-cors/6.png","hash":"613681b41bb8fdda37d5ca5f098c7f8fb4527562","modified":1569740816158},{"_id":"source/_posts/net-core-quartz/3.png","hash":"91d084c223092b41a2f2290c3b2021cc26c10e9d","modified":1569741813266},{"_id":"source/_posts/net-core-qywx-application/4.png","hash":"9648d286d27cda5574f7dc5e061fcb0a4509cac3","modified":1569741166492},{"_id":"source/_posts/net-core-redis/1.png","hash":"209e482551cef09a8c27567e2e9f129cc446e986","modified":1569741598219},{"_id":"source/_posts/net-core-redis/10.png","hash":"e7988db5c32cc2cf4273496e95fa2513a1b6b57d","modified":1569741629626},{"_id":"source/_posts/net-core-qywx-application/3.png","hash":"d890289b77284becf2f7df75b3f314bc208a1031","modified":1569741157880},{"_id":"source/_posts/net-core-redis/2.png","hash":"4037276da508ec51c10306d6bb95bf545d8e0891","modified":1569741607587},{"_id":"source/_posts/net-core-redis/3.png","hash":"8790491f1234cf77e6d763f145e2bd366f3c07e6","modified":1569741610044},{"_id":"source/_posts/net-core-redis/4.png","hash":"e612f7c27802dd49b658ab1c908e47731b712f24","modified":1569741614779},{"_id":"source/_posts/net-core-redis/11.png","hash":"aa36d1931ca167a1c0cdc77e69893a78a0c46453","modified":1569741632072},{"_id":"source/_posts/net-core-redis/6.png","hash":"0992e1076913f055bc6de00ab0de29fb45a4ba38","modified":1569741619315},{"_id":"source/_posts/net-core-redis/7.png","hash":"eb87146fdf60ebc5602c741ed676e34263574dde","modified":1569741621755},{"_id":"source/_posts/net-core-redis/8.png","hash":"b207a19bbcd1518f08b5d67b45318c93a84aaec0","modified":1569741624469},{"_id":"source/_posts/net-core-qywx-application/5.png","hash":"49da1cc17350531ced6271845f474ba18e67fba5","modified":1569741169499},{"_id":"source/_posts/net-core-redis/9.png","hash":"dd70bcc095a85e653031d4f725f733205849efc9","modified":1569741627012},{"_id":"source/_posts/net-core-sqlsugar-2/1.png","hash":"630441202ba307ce76d84294fadd4a6c1e1765b4","modified":1569303171289},{"_id":"source/_posts/net-core-quartz/1.png","hash":"502387fb7e13509cdd91d18cc553630d8655a2fb","modified":1569741801915},{"_id":"source/_posts/net-core-sqlsugar-2/3.png","hash":"e46d3a11a79a1c7d1ea14b6130236572604b2372","modified":1569303188825},{"_id":"source/_posts/net-core-redis/5.png","hash":"50250d27abd71b62090637f312e14be015a70391","modified":1569741617142},{"_id":"source/_posts/net-core-sqlsugar-2/5.png","hash":"736e78dbe1772106261da7485a33625ad2e7681b","modified":1569303195537},{"_id":"source/_posts/net-core-sqlsugar-2/6.png","hash":"d52bbf5fe75da6ba89b5f252ce53fe7caff58c44","modified":1569303199729},{"_id":"source/_posts/net-core-sqlsugar-1/1.png","hash":"0325e5226b78756888892a943746e0b3e7a90dc6","modified":1569302969384},{"_id":"source/_posts/net-core-sqlsugar-2/2.png","hash":"79089c07c66273eb5bc29618f908696a9424c5a6","modified":1569303186241},{"_id":"source/_posts/net-core-sqlsugar-2/7.png","hash":"e300f42ea58e301fe874787a4e4f59177d309ce5","modified":1569303202241},{"_id":"source/_posts/net-core-swagger/2.png","hash":"2b046851b1f7d0597d88a40505f34d77b41f0f9c","modified":1569294986327},{"_id":"source/_posts/net-core-swagger/4.png","hash":"4ae10e844646e674e7720292c1f87587e4f496ed","modified":1569295110303},{"_id":"source/_posts/net-core-swagger/5.png","hash":"c786e273da05b663def626c29ca2f10d6875cd51","modified":1569294994161},{"_id":"source/_posts/net-core-swagger/6.png","hash":"7e0e29516e770a9f58ef582c8adeae8de903f242","modified":1569294996809},{"_id":"source/_posts/net-core-unittest/2.png","hash":"3f126c7a1478e824343f7d558bebc5db6dd0d3c4","modified":1574391191231},{"_id":"source/_posts/net-core-sqlsugar-2/8.png","hash":"4433496696f19adc838f5b53ba4879a1d561a3ba","modified":1569303205000},{"_id":"source/_posts/net-core-v3-april-webapi/1.png","hash":"288fdcf52de6001f0a9416a785b4e3b53a32143b","modified":1570688214067},{"_id":"source/_posts/net-core-sqlsugar-2/4.png","hash":"621c9ad39819aaa926067b7e6952b565798c9712","modified":1569303191232},{"_id":"source/_posts/net-core-v3-april-webapi/14.png","hash":"a8fb68acb992ebf79093ca5a7c5a8b4a90e9f8b0","modified":1570688259067},{"_id":"source/_posts/net-core-v3-april-webapi/4.png","hash":"8acc62b0a6e2de78f87d23fad4b24baa7b4a28ef","modified":1570688227291},{"_id":"source/_posts/net-core-v3-april-webapi/5.png","hash":"31fb36021993347cccab289ceb4068d31fe71658","modified":1570688229539},{"_id":"source/_posts/net-core-v3-april-webapi/6.png","hash":"d0f7bf6e9cbfe150d5d37dc78fb38d95d6814f53","modified":1570688231724},{"_id":"source/_posts/net-core-v3-april-webapi/2.png","hash":"09b26f046720cb296e313698de7c90820ef05607","modified":1570688222099},{"_id":"source/_posts/net-core-v3-april-webapi/8.png","hash":"784947e4f69237b243e8236632fa47750be00ef0","modified":1570688236542},{"_id":"source/_posts/net-core-v3-april-webapi/3.png","hash":"9351f2b9509b2d92e062dd4677e79dc40a04621e","modified":1570688224605},{"_id":"source/_posts/net-core-v3-npoi/1.png","hash":"7d1610c413b9711c951790e69ae4e2184cfbfc65","modified":1572315840695},{"_id":"source/_posts/net-core-v3-npoi/4.png","hash":"da02a80495673a50f976ce6beecbc53e26c6d7e9","modified":1572315855274},{"_id":"source/_posts/net-core-v3-npoi/3.png","hash":"95aa031cc436a110ab1be1ebdd39c9e229018590","modified":1572315852388},{"_id":"source/_posts/net-core-v3-publish/1.png","hash":"b2b9467900dadc0ccff0240fe92535e87d26619a","modified":1572316542336},{"_id":"source/_posts/net-core-v3-npoi/5.png","hash":"e49c5277d73a9a31fae212cc9b0077e4f704f6d9","modified":1572315857777},{"_id":"source/_posts/net-core-v3-npoi/6.png","hash":"d4500b2be47d2695c10c0e169f09c186247b50a7","modified":1572315860586},{"_id":"source/_posts/net-core-v3-publish/10.png","hash":"b305ca9e7901cfe9f22fbdb3faa55e62dbccd6e0","modified":1572316569615},{"_id":"source/_posts/net-core-v3-publish/13.png","hash":"bed93329822f73d1408ceacaec406a124dec6d10","modified":1572316579311},{"_id":"source/_posts/net-core-v3-publish/14.png","hash":"27940498d049fc563ee43cace6fb647652c0ed1b","modified":1572316582064},{"_id":"source/_posts/net-core-v3-publish/16.png","hash":"f05606fffce3c0190398cb27f2ac877f48ba7f7b","modified":1572316587679},{"_id":"source/_posts/net-core-v3-publish/5.png","hash":"cefc281247099c073bcf88191eefc82cc718ec22","modified":1572316554261},{"_id":"source/_posts/net-core-v3-publish/2.png","hash":"9f07f5eebe7c90ff448d24d62c3d07e00df5e0c7","modified":1572316545347},{"_id":"source/_posts/net-core-v3-publish/3.png","hash":"8e753b8a3369912fd562a2ef39aa0add7aedcbbc","modified":1572316547848},{"_id":"source/_posts/net-core-v3-publish/6.png","hash":"460d303f305c4e0d0dca16ef806aef79573a3d92","modified":1572316556727},{"_id":"source/_posts/net-core-v3-swagger/3.png","hash":"666f1c4124227c59dd7f32d98a8362c25bd65b59","modified":1570688041756},{"_id":"source/_posts/net-core-v3-swagger/2.png","hash":"a443eaa200178d2fbaf6ee7293c46f8fc1fb31ce","modified":1570688035284},{"_id":"source/_posts/net-core-v3-swagger/1.png","hash":"e1a2763d0f234104fd17c973101fc18c851d9da8","modified":1570688026161},{"_id":"source/_posts/net-core-v3-swagger/4.png","hash":"4247acd36126ca96a977cad4da951685064e878d","modified":1570688046244},{"_id":"source/_posts/net-core-v3-swagger/6.png","hash":"4b395c7a99002c5839938641b164831ca4fb5414","modified":1570688052091},{"_id":"source/_posts/net-core-v3-swagger/7.png","hash":"c810f821e1005a4760fee352f12cbc2285a7f6a3","modified":1570688054876},{"_id":"source/_posts/net-core-v3-swagger/8.png","hash":"baf11ea180a26400032a13624f6121b580b55a2b","modified":1570688057876},{"_id":"source/_posts/net-core-v3-swagger/5.png","hash":"c5b745437efa0b117e4ea78ea22651a8ee25e12e","modified":1570688048884},{"_id":"source/_posts/vmware-nginx/1.png","hash":"0857666689c2b57c1407b70f4799247304d65c09","modified":1569740538269},{"_id":"source/_posts/vmware-mysql/1.png","hash":"6682860a646fa767e334b0bf0fdfb448e09caf13","modified":1569741286515},{"_id":"source/_posts/vmware-redis/3.png","hash":"e35188a3a1f4d1bfbff1a80d31c2d77cf2d37aa7","modified":1569741453411},{"_id":"source/_posts/tp5-fileupload-requestfile-is-null/1.png","hash":"cfcbee0dab551f4fa0afaf1c3d66b6177be69aa3","modified":1569302789953},{"_id":"source/_posts/vmware-redis/1.png","hash":"ed1c1ce3f2f3d6b6a660417e9926fc1f8b3192a8","modified":1569741443539},{"_id":"source/_posts/vmware-redis/2.png","hash":"a42414a12bce7a4b00b0a662ae25699902933d58","modified":1569741451278},{"_id":"source/_posts/vmware-use-centos/1.png","hash":"1f00c1d62ac91ec292c9f5957e60df5edbc2e7f0","modified":1569739652604},{"_id":"source/_posts/vmware-use-centos/10.png","hash":"7552c75d907ec841b61591ee049090bba058b58e","modified":1569739702779},{"_id":"source/_posts/vmware-use-centos/11.png","hash":"aa7ea5b2c097632116ea63a16f4c3ca746fdcde2","modified":1569739706660},{"_id":"source/_posts/vmware-use-centos/12.png","hash":"7c2f414b6d04209621a8838350146468489ca48f","modified":1569739709903},{"_id":"source/_posts/vmware-use-centos/13.png","hash":"1dcd76e6dd51de390d571216e5bdf973927c40c8","modified":1569739712827},{"_id":"source/_posts/vmware-use-centos/14.png","hash":"4d656461046ae0f08cc94c7f0abf6fa4a1d5cc1b","modified":1569739716012},{"_id":"source/_posts/vmware-use-centos/15.png","hash":"939f47ad58a4306bec48e38ada0d493986065102","modified":1569739719115},{"_id":"source/_posts/vmware-use-centos/16.png","hash":"7e7684ef893cdc80d725be893a394fd565e10a9c","modified":1569739722091},{"_id":"source/_posts/vmware-use-centos/18.png","hash":"db41a8512339613cd81ce54822701bf083b72802","modified":1569739728764},{"_id":"source/_posts/vmware-use-centos/19.png","hash":"3a3be9dcf9212f997c1890ca285cb76dca5e241f","modified":1569739732094},{"_id":"source/_posts/vmware-use-centos/20.png","hash":"947c2709978510bf9fda9ce8edbed7b636335901","modified":1569739735331},{"_id":"source/_posts/vmware-use-centos/2.png","hash":"320676acabe88c6242bfd4a8db777a5551f07c11","modified":1569739678495},{"_id":"source/_posts/vmware-use-centos/3.png","hash":"66a9ec58048436c11403e67bf05ac4568089a69d","modified":1569739681837},{"_id":"source/_posts/vmware-use-centos/5.png","hash":"4bb9b7a7c0313788910476c97de92f4dfc60fbea","modified":1569739688043},{"_id":"source/_posts/vmware-use-centos/6.png","hash":"9a23ae855e996f477c04526d8f09bfb026c6fcf6","modified":1569739690900},{"_id":"source/_posts/vmware-use-centos/7.png","hash":"045e8afeb219a0299c93e436863f95774c83851b","modified":1569739693980},{"_id":"source/_posts/vmware-use-centos/8.png","hash":"ce118940cf8a0291e02baac825fdf2428fda6bcf","modified":1569739696492},{"_id":"source/_posts/vmware-use-centos/9.png","hash":"f64b9f4e9957550ac7abfcbea0e69d3a011170ae","modified":1569739699306},{"_id":"source/_posts/vmware-use-centos/4.png","hash":"b50d669e5024a4826da426a200077421b6adbef7","modified":1569739685102},{"_id":"source/about/index/wx.jpg","hash":"e47f93f7ba8106dacb51826e297d3a6f15b9fd92","modified":1567559514922},{"_id":"themes/hexo-theme-sense/layout/partials/head.ejs","hash":"d2ae018a96006341184fddc3aa5dcecdf0899670","modified":1567591398998},{"_id":"source/about/index/happy-codding.jpg","hash":"11d988eddee95f9f03c186f303560d5c6f8c6415","modified":1567559514922},{"_id":"themes/hexo-theme-sense/layout/partials/header.ejs","hash":"01f1edaa8230b51522540ee309c5d5fb87275309","modified":1567587088402},{"_id":"themes/hexo-theme-sense/layout/partials/search.ejs","hash":"54a7d801aaf0d5010a92b6d60f86470c14bfe8f1","modified":1567559514932},{"_id":"themes/hexo-theme-sense/layout/partials/toc.ejs","hash":"1487a67ad468fbbbd4f56cd8c81523ef023cdc6c","modified":1567590684320},{"_id":"themes/hexo-theme-sense/layout/partials/recent-posts.ejs","hash":"1b4650d3d32568cd567a753ba5039f95b7807cb5","modified":1567587088403},{"_id":"themes/hexo-theme-sense/source/css/content.css.map","hash":"5ce694e0e32dffdd39b1f3813da7db0a1322ba3e","modified":1567559514935},{"_id":"themes/hexo-theme-sense/layout/partials/comment.ejs","hash":"7e3e9de45ec12781af337dfefb351930bb942bc1","modified":1567587088401},{"_id":"themes/hexo-theme-sense/source/css/content.css","hash":"60578e84d12da2b5c9898ac153176ea8cd69a765","modified":1569747897409},{"_id":"themes/hexo-theme-sense/layout/partials/footer.ejs","hash":"6cf63f68a2c9aac0fcc00f1ea9eab14dd783838e","modified":1572327285023},{"_id":"themes/hexo-theme-sense/source/css/content.scss","hash":"6c05f008be83645dd4e1efa306936434d58924b2","modified":1569747897344},{"_id":"themes/hexo-theme-sense/source/css/footer.css.map","hash":"9b3d2ae535903d7db247c7f28ce6665ffd43ccd4","modified":1567559514937},{"_id":"themes/hexo-theme-sense/source/css/footer.css","hash":"dfdb090da7e7cfe218e4a0c8690b83551bcdc2a5","modified":1567559514937},{"_id":"themes/hexo-theme-sense/source/css/footer.scss","hash":"aaa31206291e7f0c98c7664b9263602b69b5842b","modified":1567587088405},{"_id":"themes/hexo-theme-sense/source/css/go-top.css","hash":"9a0ba2ae0638db983c59116aa48de6322f829ae7","modified":1567559514938},{"_id":"themes/hexo-theme-sense/source/css/go-top.css.map","hash":"9547bfdbbcc05d5def3d86888cc7ba67e4cbab19","modified":1567559514938},{"_id":"themes/hexo-theme-sense/source/css/go-top.scss","hash":"addc9afc8f2fb7c52e4860b34a12222ee52d642e","modified":1569743499884},{"_id":"themes/hexo-theme-sense/source/css/fonts.css","hash":"e084a05fbeccddc27171e91c9694af3e52253e86","modified":1567559514936},{"_id":"themes/hexo-theme-sense/source/css/fonts.css.map","hash":"edbd3d240685ba52f8c89efc3e9c65f9ebf60686","modified":1567559514936},{"_id":"themes/hexo-theme-sense/source/css/header.css.map","hash":"7e402242a5038043557928eca7081bdef4be63ea","modified":1567559514939},{"_id":"themes/hexo-theme-sense/source/css/fonts.scss","hash":"3936a09c983e6f8aba87ea7c23ef9f96fe9bcfe1","modified":1567559514936},{"_id":"themes/hexo-theme-sense/source/css/highlight.css","hash":"139b2196453477649eaf70d07a448f6e4bcc61cf","modified":1567559514939},{"_id":"themes/hexo-theme-sense/source/css/header.css","hash":"a7142c64ed8f67c140989d9d4518eae9e4adcb6d","modified":1567559514938},{"_id":"themes/hexo-theme-sense/source/css/highlight.css.map","hash":"40ac1e0dd065c115bd064aa7e75786501b03ee74","modified":1567559514940},{"_id":"themes/hexo-theme-sense/source/css/image-view.css.map","hash":"b30aaeb395a49b42beab32f17dc6de09d798bbf8","modified":1567559514940},{"_id":"themes/hexo-theme-sense/source/css/header.scss","hash":"4f0bf6295a75a4496e775a5a4eefc6b826adf2fc","modified":1569735776629},{"_id":"themes/hexo-theme-sense/source/css/highlight.scss","hash":"dabe04ee69f4f98e42fd214bb0fe35e03be96309","modified":1569735776631},{"_id":"themes/hexo-theme-sense/source/css/page.css","hash":"a7b3879dee5373e1e470f2227a04fab6780a9e4e","modified":1572330841744},{"_id":"themes/hexo-theme-sense/source/css/page.css.map","hash":"29075c3b780bfe2698161d6d7e2a86a05acf8d14","modified":1567559514941},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.css","hash":"a4ae873b8411389516259fc82d84df9f02c29a72","modified":1567559514942},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.css.map","hash":"49bcd83b0babc06af761f7c0ff132f3df18bfe3b","modified":1567559514942},{"_id":"themes/hexo-theme-sense/source/css/scrollbar.scss","hash":"1c22f37d62221f6119765da954cc9d704461d4bf","modified":1569735776634},{"_id":"themes/hexo-theme-sense/source/css/search.css","hash":"3a34e9468c0a627d3b2981b24ea6f6e7346d4cf3","modified":1569735776636},{"_id":"themes/hexo-theme-sense/source/css/search.css.map","hash":"330c71b92978d83e8b188a4bc00fe65f86558b14","modified":1567559514943},{"_id":"themes/hexo-theme-sense/source/css/page.scss","hash":"c480aabd2877ecfd3baec6674c5d52f350d7fe27","modified":1572330841710},{"_id":"themes/hexo-theme-sense/source/css/search.scss","hash":"eb44955a8f70a36db93687594933bc24261b383a","modified":1567588600611},{"_id":"themes/hexo-theme-sense/source/css/sense.css","hash":"0d79fd29a7358073bb270da9b07f0078b87e6af6","modified":1572330853578},{"_id":"themes/hexo-theme-sense/source/css/image-view.css","hash":"759c5add3037a51f142e2d619e26cc8b711897a2","modified":1567559514940},{"_id":"themes/hexo-theme-sense/source/css/image-view.scss","hash":"375977ba6690d8a859f145b67d5e97214fcfcd67","modified":1567559514941},{"_id":"themes/hexo-theme-sense/source/css/video.css.map","hash":"2b2e67a9580cf378d3782158791abec89072847d","modified":1567559514945},{"_id":"themes/hexo-theme-sense/source/css/video.scss","hash":"e045a57dc0f711cd2411bc58828385e761cb995b","modified":1569735776753},{"_id":"themes/hexo-theme-sense/source/css/sense.scss","hash":"f295cf27cbcd710dc3d6dfbe01fbb13626b9977b","modified":1572330853316},{"_id":"themes/hexo-theme-sense/source/cursor/No_Disponible.cur","hash":"52685e4ee4ec0aa172d99c9f1fa002f9662f47d6","modified":1567559514946},{"_id":"themes/hexo-theme-sense/source/cursor/ayuda.cur","hash":"3b2f2cc7a36b8f958a7c3672a0407a59e187f314","modified":1567559514946},{"_id":"themes/hexo-theme-sense/source/cursor/texto.cur","hash":"514f4d81a9d7149912d6f217e5392a0e2606de45","modified":1567559514947},{"_id":"themes/hexo-theme-sense/source/cursor/normal.cur","hash":"4e784fa1e9630f782a379667423c4886b02c5545","modified":1567559514947},{"_id":"themes/hexo-theme-sense/source/cursor/work.cur","hash":"d98137bb1c2a8d844678ef660ff46fad2f66e982","modified":1567559514947},{"_id":"themes/hexo-theme-sense/source/font/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1567559514948},{"_id":"themes/hexo-theme-sense/source/font/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1567559514972},{"_id":"themes/hexo-theme-sense/source/font/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1567559514973},{"_id":"themes/hexo-theme-sense/source/css/sense.css.map","hash":"6cc526da51f9321415842d9cf0e6e363d438baaf","modified":1569743499886},{"_id":"themes/hexo-theme-sense/source/css/video.css","hash":"5ece82e457135212d6ab107ad61beeadb152a12c","modified":1567559514945},{"_id":"themes/hexo-theme-sense/source/images/loading.gif","hash":"a6621b4c1ea148c727cc2b1a360261b9e1317c8b","modified":1567559514974},{"_id":"themes/hexo-theme-sense/source/images/photoTheater.png","hash":"628f6893e72a527c2848bad5a692d1a6028792a4","modified":1567559514975},{"_id":"themes/hexo-theme-sense/source/images/d-107.png","hash":"caf7a2c65d9c14a72b9bb918396e5b9f431eae45","modified":1567559514974},{"_id":"themes/hexo-theme-sense/source/images/rotate.png","hash":"b1dad4b8a32e3b75dcda803bceee345c623cd1e1","modified":1567559514976},{"_id":"themes/hexo-theme-sense/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1567559514976},{"_id":"themes/hexo-theme-sense/source/js/image-view.js","hash":"360903330219d62fee011666b16331488e347451","modified":1567559514986},{"_id":"themes/hexo-theme-sense/source/js/sakura.js","hash":"5d1d89b159902af57c378e76ab917a07f9b28319","modified":1567559514988},{"_id":"themes/hexo-theme-sense/source/js/firework.js","hash":"177da6d8e35d393b4eee8fcd2613db24fae24b8d","modified":1567559514986},{"_id":"themes/hexo-theme-sense/source/images/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1567559514975},{"_id":"themes/hexo-theme-sense/source/font/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1567559514973},{"_id":"themes/hexo-theme-sense/source/js/sense.js","hash":"a0eb917ad1f92fa6a83640419390612d51e9eab8","modified":1569735776757},{"_id":"source/_posts/laravel-swoole-socket-in-laradock/demo.png","hash":"9a688590704b071f85991b730048c186778491b5","modified":1571638132153},{"_id":"source/_posts/net-core-aop-1/7.png","hash":"4f0e79859e777044cfb88d030f96bb602a333643","modified":1569303527595},{"_id":"source/_posts/net-core-april-util/6.png","hash":"f6a8a78f321386ee7c24ce97b80823541fe21a53","modified":1574391330736},{"_id":"source/_posts/net-core-april-util/8.png","hash":"3b9e69f5f3ac2488e721521b9cd5a5126e97de99","modified":1574391336640},{"_id":"source/_posts/net-core-april-util/9.png","hash":"84815d18570f47ad2b35bd3932a8770b23deb11c","modified":1574391341191},{"_id":"source/_posts/net-core-cache/5.png","hash":"3ce1c4c6abd19d1ce24036a3b0c14bf9fe72497a","modified":1569296412270},{"_id":"source/_posts/net-core-createprogram/3.png","hash":"cd920812998ab69e2e6ee1396b6fed47a8f68eab","modified":1569294369375},{"_id":"source/_posts/net-core-createprogram/1.png","hash":"707e456cc8a0dbdd4fc65920bb95c365eabf7584","modified":1569294351941},{"_id":"source/_posts/net-core-filedownload/1.png","hash":"1b43cc018b69827766b7f80985a2e27b1191628e","modified":1569740998139},{"_id":"source/_posts/net-core-fileuploader-and-cors/1.png","hash":"499abae2479a65094fac19ad9e3851d7c182b0a9","modified":1569740793675},{"_id":"source/_posts/net-core-fileuploader-and-cors/2.png","hash":"a7f0038ef8a87e11609a323aaf3c729bcefd6fe0","modified":1569740801363},{"_id":"source/_posts/net-core-fileuploader-and-cors/4.png","hash":"f5c704318be389f66f1174685548a71f40eec9f4","modified":1569740808285},{"_id":"source/_posts/net-core-fileuploader-and-cors/7.png","hash":"7f7c53c79ec6496b1c005b484c6ab6ee3b92238c","modified":1569740818771},{"_id":"source/_posts/net-core-log4net/2.png","hash":"1a66e0ccb372fc8478e075ba0510685881c241d9","modified":1569295360095},{"_id":"source/_posts/net-core-log4net/4.png","hash":"cac15d9f1c2f2700f852a8025f7aa2999c55b113","modified":1569295369095},{"_id":"source/_posts/net-core-qywx-application/1.png","hash":"8fea9ce99c9fd470da2aac30c72440f57ac62f2a","modified":1569741148940},{"_id":"source/_posts/net-core-qywx-application/2.png","hash":"95be0070c47e158a55bc4c09f929e3cd347c1e3e","modified":1569741154979},{"_id":"source/_posts/net-core-swagger/3.png","hash":"a28e37ab042ce9f184e6815c3c714044d9283604","modified":1569294990383},{"_id":"source/_posts/net-core-unittest/1.png","hash":"eb83902f70d92e068d767d90e569344a3cc07300","modified":1574391170879},{"_id":"source/_posts/net-core-v3-april-webapi/10.png","hash":"3f910a19757c05db95fb217f1498544ca66cb52a","modified":1570688241092},{"_id":"source/_posts/net-core-v3-april-webapi/11.png","hash":"06ca681028c4b3393e8afce06762295ca1d32233","modified":1570688249894},{"_id":"source/_posts/net-core-v3-april-webapi/15.png","hash":"125220d5c1baa51fbbcbf4e8cf1f265d1265ab6f","modified":1570688261947},{"_id":"source/_posts/net-core-v3-npoi/2.png","hash":"f4b348da37be2e9e1958f27d5e46244606becb74","modified":1572315849936},{"_id":"source/_posts/net-core-v3-publish/11.png","hash":"6bf210851fb3a63f1743a7b8a738df93274ac99b","modified":1572316572294},{"_id":"source/_posts/net-core-v3-publish/12.png","hash":"56d1aafb8e47874ff199f3696e76b08af7b145f1","modified":1572316576312},{"_id":"source/_posts/net-core-v3-publish/15.png","hash":"0701edd7b46514ba88e3cc68871be5f5af8ffc47","modified":1572316584912},{"_id":"source/_posts/net-core-v3-publish/4.png","hash":"66d9728a56307e97e40c799d8ea9407be03148e6","modified":1572316551541},{"_id":"source/_posts/net-core-v3-publish/7.png","hash":"690ae612d8cc801598882bff1da12a2c59b833b1","modified":1572316559346},{"_id":"source/_posts/net-core-v3-publish/8.png","hash":"eb79f423d8f6afd5928a7a7553702c4dde571dae","modified":1572316561864},{"_id":"source/_posts/net-core-v3-publish/9.png","hash":"3a875cd264a52c1e95ecd81d27fa0a4defb6701f","modified":1572316564479},{"_id":"source/_posts/vmware-nginx/2.png","hash":"84cb75bd62291252c6b853fca4b0c14498cc4252","modified":1569740547915},{"_id":"source/_posts/vmware-use-centos/17.png","hash":"7b611096d2c76a466df6754f465a83f1f4b918b4","modified":1569739725564},{"_id":"source/_posts/vmware-use-centos/27.png","hash":"be132ffc76d09cea3de4a50cc10b39b4e937ae89","modified":1569739756475},{"_id":"source/_posts/vmware-use-centos/29.png","hash":"3bee8b57281134b935ad187e52573bb56765af32","modified":1569739762606},{"_id":"source/_posts/vmware-use-centos/30.png","hash":"3f7663b620adfb84696333ff3c69983807f2eb5a","modified":1569739765758},{"_id":"source/_posts/vmware-use-centos/33.png","hash":"eb229f69972840b72b68402f53ef95b920a95c57","modified":1569739774387},{"_id":"source/_posts/vmware-use-centos/32.png","hash":"e79f05fb41debe05f4b2e82401785f08d44dda57","modified":1569739771607},{"_id":"source/_posts/vmware-use-centos/34.png","hash":"c9b260d9ef358b4e878e30b731c75c7a1e28588b","modified":1569739777116},{"_id":"source/_posts/vmware-use-centos/35.png","hash":"5c1ead565ac1af94cf00142fe07ecace95e88f12","modified":1569739780547},{"_id":"themes/hexo-theme-sense/source/images/favicon.ico","hash":"518569cc5ab05fd566fa75e2ff4ec3848e0db86c","modified":1567559514974},{"_id":"themes/hexo-theme-sense/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1567559514987},{"_id":"themes/hexo-theme-sense/source/js/snow.js","hash":"38f8daf47ad2142767f308d0afe2d59a64d214e3","modified":1567559514988},{"_id":"source/_posts/net-core-sqlsugar-2/9.png","hash":"f81c395c34d8d91bc0e46b6385acbff6a9bf4d0d","modified":1569303208011},{"_id":"source/_posts/net-core-cache/11.png","hash":"30871d0648957618d51a3b416e719f31506ea35a","modified":1569296435615},{"_id":"source/_posts/net-core-v3-april-webapi/7.png","hash":"32aefad1eb13ef53add8440dde9c8df88fd30e08","modified":1570688234301},{"_id":"source/_posts/vmware-use-centos/21.png","hash":"219886b48108df4c342096591cb977cc45034065","modified":1569739738723},{"_id":"source/_posts/vmware-use-centos/22.png","hash":"94fba928439540459948b0593ebad8e9159d4c81","modified":1569739741652},{"_id":"source/_posts/vmware-use-centos/26.png","hash":"bef2d9e05eb92eb98cebcb956c8f7186a977ffe4","modified":1569739753268},{"_id":"source/_posts/vmware-use-centos/28.png","hash":"f5b69a213612bd171c6441cdb1781a491126f7fb","modified":1569739759436},{"_id":"source/_posts/laravel-broadcasting/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1569735776341},{"_id":"source/_posts/net-core-log4net/1.png","hash":"7f400c19dc25559421a04bf28928b3b6fa7bd19f","modified":1569295349703},{"_id":"source/_posts/net-core-swagger/1.png","hash":"189e129ee49fa2359378f0c82c3e6f92b0c6af30","modified":1569294977863},{"_id":"source/_posts/net-core-cache/1.png","hash":"3ff63dbf5e4442b701313f33da796099f0dc068f","modified":1569296395687},{"_id":"source/_posts/net-core-v3-april-webapi/13.png","hash":"9a8e2abd35b4b453cf75bc19e5be598b62b91e13","modified":1570688255956},{"_id":"source/_posts/vmware-use-centos/24.png","hash":"886b97cee7e03b4bf5d335b62f8f1bab147c8f5c","modified":1569739747195},{"_id":"source/_posts/vmware-use-centos/25.png","hash":"7ef502b9f2383eb5599e73d5bcd5234ae07fd3f0","modified":1569739750187},{"_id":"source/_posts/vmware-use-centos/31.png","hash":"e96a5e06b2a6519b012ed2eb505e4d464d928ccd","modified":1569739768741},{"_id":"source/_posts/laravel-events/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1569735776426},{"_id":"source/_posts/net-core-log4net/5.png","hash":"744685637d45bb3cee6a96e2a6126c724b1f4a80","modified":1569295372191},{"_id":"source/_posts/net-core-v3-april-webapi/9.png","hash":"ebbf2241c43fb24d0161ed7e98969d4c2bd43b01","modified":1570688238807},{"_id":"source/_posts/vmware-use-centos/23.png","hash":"6e6dbf100eb33929e1b86a41e6e28d618b93cd10","modified":1569739744414},{"_id":"source/_posts/laravel-queues/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1569735776444},{"_id":"source/_posts/hello-php/cover.png","hash":"35bc00e68fb2981cc9c28af3a54771388de600d4","modified":1567587088398},{"_id":"source/_posts/vmware-use-centos/36.png","hash":"1c6d1b9af03836042720fc49472ab6b66ac8ee4f","modified":1569739783285},{"_id":"source/_posts/net-core-v3-april-webapi/12.png","hash":"a0cb48585c50d9304d6d0a4dd440cc1f73ddf677","modified":1570688252637},{"_id":"themes/hexo-theme-sense/source/video/sense.ogv","hash":"efab3470e2c35435d173a38675e0e0dac39678a9","modified":1567559515055},{"_id":"themes/hexo-theme-sense/source/video/sense.webm","hash":"bf4f3c81cb2c48b252cf3d9a533a456b56550a99","modified":1567559515068},{"_id":"themes/hexo-theme-sense/source/images/sense.png","hash":"ace522ebcec8f6f5642354581036d80ef03d6168","modified":1567559514985},{"_id":"themes/hexo-theme-sense/source/video/sense.mp4","hash":"cb47e08ec8d4383af81fa52dacbad1319548719c","modified":1567559515037},{"_id":"public/about/index.html","hash":"eb6e17aefd1c463ecfa6d85ae43953dbbcb98a92","modified":1574391588530},{"_id":"public/2019/10/29/net-core-v3-publish/index.html","hash":"25380012e945127784dc7959ba83331e2240afb2","modified":1574391588531},{"_id":"public/2019/10/28/laravel-vue-svg/index.html","hash":"bb21b4f2fcc1dc1e53b5d7d19d3ab7e89e29b8da","modified":1574391588592},{"_id":"public/2019/10/18/net-core-v3-npoi/index.html","hash":"03702c2a90958d337bbfab29412dbafce732702a","modified":1574391588622},{"_id":"public/2019/10/28/vmare-docker/index.html","hash":"e2263f78dc37598db428dd6ffe934790120c5184","modified":1574391588622},{"_id":"public/2019/10/12/laravel-swoole-socket-in-laradock/index.html","hash":"768d18404b3b7f743e185f85455e7631d355fdc4","modified":1574391588627},{"_id":"public/2019/10/24/another-year-1024/index.html","hash":"802192f87acdfec0ecfac21bce8368c6af665d41","modified":1574391588629},{"_id":"public/2019/10/09/net-core-v3-april-webapi/index.html","hash":"1abf4a91ab766a97fed3ba6c1210aaf126fbbdca","modified":1574391588629},{"_id":"public/2019/10/07/net-core-v3-swagger/index.html","hash":"437a5e27378023f1011c2d61d5ce8062d73fc5dc","modified":1574391588629},{"_id":"public/2019/09/26/net-core-quartz/index.html","hash":"666accc2594239a965673a4cbd15a9aef0d00070","modified":1574391588629},{"_id":"public/2019/09/23/net-core-redis/index.html","hash":"ce7d28eb995a3052410c3751f2df0e3f705d7e32","modified":1574391588629},{"_id":"public/2019/09/12/vmware-redis/index.html","hash":"f316dfa8afcaf2089925f12db4f8a6b4e1d3d50f","modified":1574391588629},{"_id":"public/2019/09/12/vmware-mysql/index.html","hash":"60a44fb6634db900fcb0e403c0ef1dba0152d4af","modified":1574391588630},{"_id":"public/2019/09/04/hello-dotnet/index.html","hash":"a0a1bd93d63e84debc05f96c0e68ea2a9eab159b","modified":1574391588630},{"_id":"public/2019/09/03/hello-php/index.html","hash":"aaa00c68eacd4b30605cdd8dacd44434385d505b","modified":1574391588630},{"_id":"public/2019/09/02/net-core-qywx-application/index.html","hash":"8ce2d65631a48ae02d1a0a34f0108c075187e13d","modified":1574391588630},{"_id":"public/2019/08/27/net-core-filedownload/index.html","hash":"092e94195e900bd2c6c0a167f2f257a0ebd68b87","modified":1574391588630},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/index.html","hash":"6b5d533c6b59c0582986264f15d11fee9b7cd850","modified":1574391588630},{"_id":"public/2019/08/23/laravel-swoole-in-laradock/index.html","hash":"f2cfb0d0d187c5296176bed2ac4cd6ff0549b996","modified":1574391588630},{"_id":"public/2019/08/21/vmware-nginx/index.html","hash":"25a18d44cd65aa515d89cd1f3617e5fe7ec271a0","modified":1574391588630},{"_id":"public/2019/08/21/vmware-use-centos/index.html","hash":"4bb7155c9a08b5be472b6939e1563b9d6136e5c8","modified":1574391588630},{"_id":"public/2019/08/01/net-core-aop-2/index.html","hash":"0e85e9651425ea88000a1442f9dae14cd7288186","modified":1574391588630},{"_id":"public/2019/07/30/net-core-aop-1/index.html","hash":"3aee6a7d471252511a818badf2a4cdd1f517217f","modified":1574391588630},{"_id":"public/2019/08/02/use-laravel-permission-can-tag-in-vue/index.html","hash":"b597878baa7eaf435c538a6423a560d28554ff87","modified":1574391588630},{"_id":"public/2019/07/19/net-core-sqlsugar-2/index.html","hash":"3e302612c5e8e2c82d62e31b81fa55d0c141fdfe","modified":1574391588630},{"_id":"public/2019/07/19/net-core-webapi-main/index.html","hash":"d62e3a53edad091d6446c52637c084368db7d833","modified":1574391588630},{"_id":"public/2019/07/18/net-core-sqlsugar-1/index.html","hash":"cdb8e6431eb9a1cc6f740feb73c3e74933adfe90","modified":1574391588630},{"_id":"public/2019/07/11/tp5-fileupload-requestfile-is-null/index.html","hash":"fab8a9dd6b5093faf99132255895e22656b60830","modified":1574391588631},{"_id":"public/2019/07/10/net-core-cache/index.html","hash":"2acd849d037e22d8f2c4fd5b2858adc4a940ca45","modified":1574391588631},{"_id":"public/2019/07/04/net-core-log4net/index.html","hash":"13bb193ccd523ff36802644e191f35081c235100","modified":1574391588631},{"_id":"public/2019/07/02/net-core-swagger/index.html","hash":"f3389f2376e35aa7a2a80020d843e323038639f2","modified":1574391588631},{"_id":"public/2019/07/02/net-core-createprogram/index.html","hash":"7f1443827369b61e061c3afa13a753cd3baa2e5e","modified":1574391588631},{"_id":"public/2019/07/02/net-core-tools-and-environment/index.html","hash":"6640bf274b94084094633815ccbc7106313a1c65","modified":1574391588631},{"_id":"public/2019/04/12/laravel-broadcasting/index.html","hash":"548dc367c79a32538edd08f562908cd7172852af","modified":1574391588631},{"_id":"public/2019/04/09/laravel-queues/index.html","hash":"5b7d0a86d216504f92748b3709e56179c28c0a36","modified":1574391588631},{"_id":"public/2019/04/03/laravel-events/index.html","hash":"fb9ccfd5e2f28ace4bf24083761a6a49d0115682","modified":1574391588631},{"_id":"public/archives/index.html","hash":"4977b1007d3b778181ff64a452c3f107cb189d89","modified":1574391588631},{"_id":"public/2019/03/15/laravel-mix/index.html","hash":"0e428d48b29bd304be5cec0f5dfbdd14f16e41c8","modified":1574391588631},{"_id":"public/2018/02/13/hello-world/index.html","hash":"b33d9a62854ccab501332fd3994b66236523b5b8","modified":1574391588631},{"_id":"public/archives/page/2/index.html","hash":"fa1ea74c5346327adfad4d7b9eba27d39adf8a32","modified":1574391588631},{"_id":"public/archives/page/4/index.html","hash":"5c5878dbf868273460def29d4226979097586d42","modified":1574391588631},{"_id":"public/archives/page/3/index.html","hash":"0a8d25a459228b09e90d539da85a2773dae77f07","modified":1574391588631},{"_id":"public/archives/2018/index.html","hash":"d39c51e8a539ed1dc5ec3d3c0a954474c5b74dd0","modified":1574391588631},{"_id":"public/archives/2019/index.html","hash":"d70d3b78a8ced3885aca1b52e52fe6b076b7b6cb","modified":1574391588631},{"_id":"public/archives/2018/02/index.html","hash":"fd6fc6f4f1b2feb7161011a9d540cb929038064f","modified":1574391588631},{"_id":"public/archives/2019/page/2/index.html","hash":"44f921e6a1217a3f7979e0555c21737b3b17bd9e","modified":1574391588631},{"_id":"public/archives/2019/03/index.html","hash":"2d540bd4e649c45a9c5929e432ff098882de1555","modified":1574391588631},{"_id":"public/archives/2019/page/4/index.html","hash":"de16f60071af024c81f1399dda429b5b4ae81daf","modified":1574391588632},{"_id":"public/archives/2019/04/index.html","hash":"7e3ca74dc7e7ea8835400c08397f5bb8c5a03f1c","modified":1574391588632},{"_id":"public/archives/2019/page/3/index.html","hash":"62804cabe9866bc3ba7514795adad6064cd0b8cc","modified":1574391588632},{"_id":"public/archives/2019/07/index.html","hash":"fc35ecd317a809e70448ac124f0d090d52cc7486","modified":1574391588632},{"_id":"public/archives/2019/08/index.html","hash":"b75c67cc114b8ee0275bbe49ae803eac308ef839","modified":1574391588632},{"_id":"public/archives/2019/09/index.html","hash":"42e295fc1a3eb549642b6813712ca144ae79fe36","modified":1574391588632},{"_id":"public/archives/2019/10/index.html","hash":"28fc8c5ebe32bf13b7863a44b8d644e4f75d3102","modified":1574391588632},{"_id":"public/index.html","hash":"8bd8c675488e5181a04cf01b00402ed599e69c93","modified":1574391588632},{"_id":"public/page/2/index.html","hash":"8a23fbe5e907bc70dde08763427af8c1f4130ef4","modified":1574391588632},{"_id":"public/page/3/index.html","hash":"f6e4f801a455035481a812b02885256f1ae0c5ce","modified":1574391588632},{"_id":"public/page/4/index.html","hash":"37efcc492247fd50b512e08034ee33b06fdb81bd","modified":1574391588632},{"_id":"public/categories/AprilBlank/index.html","hash":"e4340d7ffcbfd4aa79fd725c7c803ff0549e5afe","modified":1574391588632},{"_id":"public/categories/南瓜/index.html","hash":"3f69661300ccd7afc532a3b03c73cacee7fa0dcc","modified":1574391588632},{"_id":"public/categories/AprilBlank/page/2/index.html","hash":"2c9785040a625fd959e9c539c42baadfaf62d4d0","modified":1574391588632},{"_id":"public/categories/AprilBlank/page/3/index.html","hash":"7ca11f914ef47add6c34923dcf561bc2fcfdbfca","modified":1574391588632},{"_id":"public/tags/test/index.html","hash":"6bf94ae1bcb14b284206156aabe7baf99ccf1054","modified":1574391588632},{"_id":"public/tags/闲言碎语/index.html","hash":"9b3c898389d314c273bf3ff1f4c84085ed472951","modified":1574391588632},{"_id":"public/tags/laravel/index.html","hash":"ed61be5dc9505987d5ac4936b3bcbbdd37b4d209","modified":1574391588632},{"_id":"public/tags/swoole/index.html","hash":"b46ff432ce7b2befec9f69a2761c85cb7700c088","modified":1574391588632},{"_id":"public/tags/net-core/index.html","hash":"b5b389b766cbd08ab75bf9e45faba2a509d3a2f4","modified":1574391588632},{"_id":"public/tags/docker/index.html","hash":"ed631f84751adee63954a71762bd58411c388188","modified":1574391588632},{"_id":"public/2019/11/10/net-core-april-util-update-1/index.html","hash":"eebf748bf2bee6662545892218a443e079cd91ce","modified":1574391588647},{"_id":"public/2019/11/07/net-core-april-util/index.html","hash":"47dcd3f352f9c5d5fdcce56a4d16672c66c15adc","modified":1574391588647},{"_id":"public/2019/11/05/net-core-unittest/index.html","hash":"b870babd47d2754a73741fe4d2f2c0275c5aa96e","modified":1574391588647},{"_id":"public/archives/2019/11/index.html","hash":"305d1f8dee4a216fa6e422a15aeb28191debfa2f","modified":1574391588647},{"_id":"public/tags/net-core/page/3/index.html","hash":"406fb61363aeaaa44dec2b3df6111f0d10fe97c6","modified":1574391588647},{"_id":"public/tags/vmware/index.html","hash":"8d30ea66d0571ec0d10bd53e862eb958fa062808","modified":1574391588647},{"_id":"public/tags/net-core/page/2/index.html","hash":"5431e20c02f18dba5a22d55b18ad2eb9e8cf9214","modified":1574391588648},{"_id":"public/tags/新手向/index.html","hash":"608b35c0cb692bc3c3fe046d3e53b2519565c32b","modified":1574391588648},{"_id":"public/tags/vue/index.html","hash":"0e0ac54bcb3844d0cdeb374dd2972615dc706b84","modified":1574391588648},{"_id":"public/tags/php/index.html","hash":"b46978b580b19ccb02a7cd727cc4ecf0861f120c","modified":1574391588648},{"_id":"public/tags/问题记录/index.html","hash":"553cc6e5cc18b6d24b8e5cd9d798bc24f0faddab","modified":1574391588648},{"_id":"public/about/index/happy-codding.jpg","hash":"11d988eddee95f9f03c186f303560d5c6f8c6415","modified":1574391588688},{"_id":"public/css/content.css.map","hash":"5ce694e0e32dffdd39b1f3813da7db0a1322ba3e","modified":1574391588688},{"_id":"public/css/content.scss","hash":"6c05f008be83645dd4e1efa306936434d58924b2","modified":1574391588688},{"_id":"public/css/footer.css.map","hash":"9b3d2ae535903d7db247c7f28ce6665ffd43ccd4","modified":1574391588688},{"_id":"public/css/footer.scss","hash":"aaa31206291e7f0c98c7664b9263602b69b5842b","modified":1574391588688},{"_id":"public/css/go-top.css.map","hash":"9547bfdbbcc05d5def3d86888cc7ba67e4cbab19","modified":1574391588688},{"_id":"public/css/go-top.scss","hash":"addc9afc8f2fb7c52e4860b34a12222ee52d642e","modified":1574391588688},{"_id":"public/css/fonts.css.map","hash":"edbd3d240685ba52f8c89efc3e9c65f9ebf60686","modified":1574391588688},{"_id":"public/css/header.css.map","hash":"7e402242a5038043557928eca7081bdef4be63ea","modified":1574391588688},{"_id":"public/css/fonts.scss","hash":"3936a09c983e6f8aba87ea7c23ef9f96fe9bcfe1","modified":1574391588688},{"_id":"public/css/highlight.css.map","hash":"40ac1e0dd065c115bd064aa7e75786501b03ee74","modified":1574391588688},{"_id":"public/css/image-view.css.map","hash":"b30aaeb395a49b42beab32f17dc6de09d798bbf8","modified":1574391588688},{"_id":"public/css/header.scss","hash":"4f0bf6295a75a4496e775a5a4eefc6b826adf2fc","modified":1574391588689},{"_id":"public/css/scrollbar.scss","hash":"1c22f37d62221f6119765da954cc9d704461d4bf","modified":1574391588689},{"_id":"public/css/scrollbar.css.map","hash":"49bcd83b0babc06af761f7c0ff132f3df18bfe3b","modified":1574391588689},{"_id":"public/css/highlight.scss","hash":"dabe04ee69f4f98e42fd214bb0fe35e03be96309","modified":1574391588689},{"_id":"public/css/search.css.map","hash":"330c71b92978d83e8b188a4bc00fe65f86558b14","modified":1574391588689},{"_id":"public/css/page.css.map","hash":"29075c3b780bfe2698161d6d7e2a86a05acf8d14","modified":1574391588689},{"_id":"public/css/page.scss","hash":"c480aabd2877ecfd3baec6674c5d52f350d7fe27","modified":1574391588689},{"_id":"public/css/search.scss","hash":"eb44955a8f70a36db93687594933bc24261b383a","modified":1574391588689},{"_id":"public/css/image-view.scss","hash":"375977ba6690d8a859f145b67d5e97214fcfcd67","modified":1574391588689},{"_id":"public/css/video.scss","hash":"e045a57dc0f711cd2411bc58828385e761cb995b","modified":1574391588689},{"_id":"public/css/video.css.map","hash":"2b2e67a9580cf378d3782158791abec89072847d","modified":1574391588689},{"_id":"public/css/sense.scss","hash":"f295cf27cbcd710dc3d6dfbe01fbb13626b9977b","modified":1574391588689},{"_id":"public/cursor/No_Disponible.cur","hash":"52685e4ee4ec0aa172d99c9f1fa002f9662f47d6","modified":1574391588689},{"_id":"public/cursor/ayuda.cur","hash":"3b2f2cc7a36b8f958a7c3672a0407a59e187f314","modified":1574391588689},{"_id":"public/cursor/normal.cur","hash":"4e784fa1e9630f782a379667423c4886b02c5545","modified":1574391588689},{"_id":"public/cursor/work.cur","hash":"d98137bb1c2a8d844678ef660ff46fad2f66e982","modified":1574391588689},{"_id":"public/cursor/texto.cur","hash":"514f4d81a9d7149912d6f217e5392a0e2606de45","modified":1574391588690},{"_id":"public/font/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1574391588690},{"_id":"public/font/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1574391588690},{"_id":"public/css/sense.css.map","hash":"6cc526da51f9321415842d9cf0e6e363d438baaf","modified":1574391588690},{"_id":"public/images/loading.gif","hash":"a6621b4c1ea148c727cc2b1a360261b9e1317c8b","modified":1574391588690},{"_id":"public/font/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1574391588690},{"_id":"public/images/photoTheater.png","hash":"628f6893e72a527c2848bad5a692d1a6028792a4","modified":1574391588690},{"_id":"public/images/d-107.png","hash":"caf7a2c65d9c14a72b9bb918396e5b9f431eae45","modified":1574391588690},{"_id":"public/images/rotate.png","hash":"b1dad4b8a32e3b75dcda803bceee345c623cd1e1","modified":1574391588690},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1574391588690},{"_id":"public/images/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1574391588690},{"_id":"public/font/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1574391588690},{"_id":"public/2019/08/23/laravel-swoole-in-laradock/laradock.png","hash":"fb249a240bae786470099b0cf554d89b446c3623","modified":1574391588708},{"_id":"public/2019/03/15/laravel-mix/laravel-mix.png","hash":"8d39264428735ea937bf1ded9d095e430b289a17","modified":1574391588708},{"_id":"public/2019/04/09/laravel-queues/email.png","hash":"bfdca4ff3f9c2fdc46e6775c37961022683f0cce","modified":1574391588708},{"_id":"public/2019/07/11/tp5-fileupload-requestfile-is-null/1.png","hash":"cfcbee0dab551f4fa0afaf1c3d66b6177be69aa3","modified":1574391588708},{"_id":"public/2019/10/12/laravel-swoole-socket-in-laradock/laradock.png","hash":"fb249a240bae786470099b0cf554d89b446c3623","modified":1574391588708},{"_id":"public/2019/04/12/laravel-broadcasting/mes.png","hash":"eb6c38d51e7d0a24485473216abc88855dc3de01","modified":1574391588708},{"_id":"public/2019/04/12/laravel-broadcasting/new.png","hash":"be082f8430fe87420a8a2d0b80c5ec7174dd3509","modified":1574391588708},{"_id":"public/2019/08/21/vmware-nginx/1.png","hash":"0857666689c2b57c1407b70f4799247304d65c09","modified":1574391588709},{"_id":"public/2019/04/03/laravel-events/new-event.png","hash":"ebbfcf9dea64da8f3a1e27ea6a87e76a56e68eab","modified":1574391588710},{"_id":"public/2019/04/03/laravel-events/out.png","hash":"d13d91bff2c56ce2d01eb03564ebf3cf7e8abc33","modified":1574391588710},{"_id":"public/2019/09/12/vmware-redis/2.png","hash":"a42414a12bce7a4b00b0a662ae25699902933d58","modified":1574391588710},{"_id":"public/2019/09/12/vmware-redis/1.png","hash":"ed1c1ce3f2f3d6b6a660417e9926fc1f8b3192a8","modified":1574391588710},{"_id":"public/2019/09/12/vmware-redis/3.png","hash":"e35188a3a1f4d1bfbff1a80d31c2d77cf2d37aa7","modified":1574391588710},{"_id":"public/2019/08/01/net-core-aop-2/4.png","hash":"16c11cee5fdac52efea7daff78fc1f5d6c33752b","modified":1574391588710},{"_id":"public/2019/08/01/net-core-aop-2/1.png","hash":"610d9aaf433b99426ce2c1ac797de152c3677458","modified":1574391588710},{"_id":"public/2019/08/01/net-core-aop-2/2.png","hash":"e824a22aa3daabfdfd82597ffc32fc2faf657897","modified":1574391588710},{"_id":"public/2019/08/01/net-core-aop-2/3.png","hash":"60bd9e5674c9bbb875e24cca4fec4e2803942dda","modified":1574391588710},{"_id":"public/2019/07/02/net-core-createprogram/2.png","hash":"b25635ba96c0ce5aed1eee36e97322a7df9ed869","modified":1574391588710},{"_id":"public/2019/07/02/net-core-createprogram/5.png","hash":"764930797950d619723fa5b511f722f61048d63b","modified":1574391588710},{"_id":"public/2019/07/02/net-core-createprogram/4.png","hash":"07a4bf94522f46145a4b4f2b121963ba52def540","modified":1574391588710},{"_id":"public/2019/07/02/net-core-swagger/4.png","hash":"4ae10e844646e674e7720292c1f87587e4f496ed","modified":1574391588710},{"_id":"public/2019/07/02/net-core-swagger/2.png","hash":"2b046851b1f7d0597d88a40505f34d77b41f0f9c","modified":1574391588710},{"_id":"public/2019/07/02/net-core-swagger/6.png","hash":"7e0e29516e770a9f58ef582c8adeae8de903f242","modified":1574391588710},{"_id":"public/2019/07/30/net-core-aop-1/4.png","hash":"26f9cd36f1b1c24bd1bb5d86501ea3f0f782b41f","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/1.png","hash":"780ee9b44c3d6533493db6ec477bd18d1b4bb8c3","modified":1574391588711},{"_id":"public/2019/07/02/net-core-swagger/5.png","hash":"c786e273da05b663def626c29ca2f10d6875cd51","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/3.png","hash":"c556fcdcbb2d5750441ed6be369d56ffb67bfd0f","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/5.png","hash":"79cbd9e4133871bacce3f6ec00cd78466fbc844b","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/2.png","hash":"607142672012cedc5b9f9450deb41b2641f5b318","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/6.png","hash":"27485076145c47bc7ac144314283eb64f1fae528","modified":1574391588711},{"_id":"public/2019/07/30/net-core-aop-1/8.png","hash":"dc7c175d3adce6952a30cac8b09e7c980a19bf28","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/3.png","hash":"666f1c4124227c59dd7f32d98a8362c25bd65b59","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/1.png","hash":"e1a2763d0f234104fd17c973101fc18c851d9da8","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/2.png","hash":"a443eaa200178d2fbaf6ee7293c46f8fc1fb31ce","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/7.png","hash":"c810f821e1005a4760fee352f12cbc2285a7f6a3","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/4.png","hash":"4247acd36126ca96a977cad4da951685064e878d","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/5.png","hash":"c5b745437efa0b117e4ea78ea22651a8ee25e12e","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/6.png","hash":"4b395c7a99002c5839938641b164831ca4fb5414","modified":1574391588711},{"_id":"public/2019/10/07/net-core-v3-swagger/8.png","hash":"baf11ea180a26400032a13624f6121b580b55a2b","modified":1574391588711},{"_id":"public/2019/07/04/net-core-log4net/3.png","hash":"adecebc640cb2f6cd1521d055be4d38ad0443028","modified":1574391588711},{"_id":"public/2019/07/04/net-core-log4net/6.png","hash":"03ac034d208930dc33e87dad46bf0b579fd8146a","modified":1574391588711},{"_id":"public/2019/07/04/net-core-log4net/7.png","hash":"5c773c349de4f13989b45b812825a8b78ee8ec68","modified":1574391588711},{"_id":"public/2019/07/04/net-core-log4net/8.png","hash":"81f7653f0230b215a879105617c5e89e4713c878","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/1.png","hash":"288fdcf52de6001f0a9416a785b4e3b53a32143b","modified":1574391588711},{"_id":"public/2019/07/04/net-core-log4net/9.png","hash":"08b8960af698827b185afb2349852afe9e94ed95","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/14.png","hash":"a8fb68acb992ebf79093ca5a7c5a8b4a90e9f8b0","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/3.png","hash":"9351f2b9509b2d92e062dd4677e79dc40a04621e","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/4.png","hash":"8acc62b0a6e2de78f87d23fad4b24baa7b4a28ef","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/2.png","hash":"09b26f046720cb296e313698de7c90820ef05607","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/5.png","hash":"31fb36021993347cccab289ceb4068d31fe71658","modified":1574391588711},{"_id":"public/2019/10/09/net-core-v3-april-webapi/6.png","hash":"d0f7bf6e9cbfe150d5d37dc78fb38d95d6814f53","modified":1574391588712},{"_id":"public/2019/10/09/net-core-v3-april-webapi/8.png","hash":"784947e4f69237b243e8236632fa47750be00ef0","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/1.png","hash":"1f00c1d62ac91ec292c9f5957e60df5edbc2e7f0","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/10.png","hash":"7552c75d907ec841b61591ee049090bba058b58e","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/11.png","hash":"aa7ea5b2c097632116ea63a16f4c3ca746fdcde2","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/12.png","hash":"7c2f414b6d04209621a8838350146468489ca48f","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/13.png","hash":"1dcd76e6dd51de390d571216e5bdf973927c40c8","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/14.png","hash":"4d656461046ae0f08cc94c7f0abf6fa4a1d5cc1b","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/15.png","hash":"939f47ad58a4306bec48e38ada0d493986065102","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/16.png","hash":"7e7684ef893cdc80d725be893a394fd565e10a9c","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/18.png","hash":"db41a8512339613cd81ce54822701bf083b72802","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/19.png","hash":"3a3be9dcf9212f997c1890ca285cb76dca5e241f","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/2.png","hash":"320676acabe88c6242bfd4a8db777a5551f07c11","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/20.png","hash":"947c2709978510bf9fda9ce8edbed7b636335901","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/3.png","hash":"66a9ec58048436c11403e67bf05ac4568089a69d","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/4.png","hash":"b50d669e5024a4826da426a200077421b6adbef7","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/5.png","hash":"4bb9b7a7c0313788910476c97de92f4dfc60fbea","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/6.png","hash":"9a23ae855e996f477c04526d8f09bfb026c6fcf6","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/7.png","hash":"045e8afeb219a0299c93e436863f95774c83851b","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/8.png","hash":"ce118940cf8a0291e02baac825fdf2428fda6bcf","modified":1574391588712},{"_id":"public/2019/08/21/vmware-use-centos/9.png","hash":"f64b9f4e9957550ac7abfcbea0e69d3a011170ae","modified":1574391588712},{"_id":"public/2019/09/12/vmware-mysql/1.png","hash":"6682860a646fa767e334b0bf0fdfb448e09caf13","modified":1574391588712},{"_id":"public/2019/09/26/net-core-quartz/1.png","hash":"502387fb7e13509cdd91d18cc553630d8655a2fb","modified":1574391588712},{"_id":"public/2019/09/26/net-core-quartz/2.png","hash":"50ff5d7f73baff0a8be28dce8583348ffb7ec429","modified":1574391588712},{"_id":"public/2019/09/26/net-core-quartz/3.png","hash":"91d084c223092b41a2f2290c3b2021cc26c10e9d","modified":1574391588712},{"_id":"public/2019/09/02/net-core-qywx-application/3.png","hash":"d890289b77284becf2f7df75b3f314bc208a1031","modified":1574391588713},{"_id":"public/2019/09/02/net-core-qywx-application/5.png","hash":"49da1cc17350531ced6271845f474ba18e67fba5","modified":1574391588713},{"_id":"public/2019/09/02/net-core-qywx-application/4.png","hash":"9648d286d27cda5574f7dc5e061fcb0a4509cac3","modified":1574391588713},{"_id":"public/2019/10/18/net-core-v3-npoi/4.png","hash":"da02a80495673a50f976ce6beecbc53e26c6d7e9","modified":1574391588713},{"_id":"public/2019/10/18/net-core-v3-npoi/3.png","hash":"95aa031cc436a110ab1be1ebdd39c9e229018590","modified":1574391588713},{"_id":"public/2019/10/18/net-core-v3-npoi/1.png","hash":"7d1610c413b9711c951790e69ae4e2184cfbfc65","modified":1574391588713},{"_id":"public/2019/10/18/net-core-v3-npoi/5.png","hash":"e49c5277d73a9a31fae212cc9b0077e4f704f6d9","modified":1574391588713},{"_id":"public/2019/10/18/net-core-v3-npoi/6.png","hash":"d4500b2be47d2695c10c0e169f09c186247b50a7","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/2.png","hash":"79089c07c66273eb5bc29618f908696a9424c5a6","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/1.png","hash":"630441202ba307ce76d84294fadd4a6c1e1765b4","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/5.png","hash":"736e78dbe1772106261da7485a33625ad2e7681b","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/3.png","hash":"e46d3a11a79a1c7d1ea14b6130236572604b2372","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/6.png","hash":"d52bbf5fe75da6ba89b5f252ce53fe7caff58c44","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/7.png","hash":"e300f42ea58e301fe874787a4e4f59177d309ce5","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/4.png","hash":"621c9ad39819aaa926067b7e6952b565798c9712","modified":1574391588713},{"_id":"public/2019/07/19/net-core-sqlsugar-2/8.png","hash":"4433496696f19adc838f5b53ba4879a1d561a3ba","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/10.png","hash":"f5fb591e06416155bdd21eb8305fc712a4fa9e40","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/2.png","hash":"9c319a60c2132a6147fe3301dbf838d7dc7783d0","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/3.png","hash":"3b5ae85764678cdb4b30d2089ec572ee471d0dd1","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/4.png","hash":"cb5eb9561be2b3a00c0c68197a77bfde73a8dfb7","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/6.png","hash":"d16a90da59ce4495d05b7c0bb890894cfd84ae3e","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/7.png","hash":"cd2263013bb301a04fb042eec76decf6755625ab","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/8.png","hash":"bd8212b2da92788304d4ee2614080799f7d639cc","modified":1574391588713},{"_id":"public/2019/07/10/net-core-cache/9.png","hash":"c67d5edd0413b96a45f080335a7c60190bcaa3ce","modified":1574391588713},{"_id":"public/2019/09/23/net-core-redis/1.png","hash":"209e482551cef09a8c27567e2e9f129cc446e986","modified":1574391588713},{"_id":"public/2019/09/23/net-core-redis/11.png","hash":"aa36d1931ca167a1c0cdc77e69893a78a0c46453","modified":1574391588713},{"_id":"public/2019/09/23/net-core-redis/2.png","hash":"4037276da508ec51c10306d6bb95bf545d8e0891","modified":1574391588713},{"_id":"public/2019/09/23/net-core-redis/10.png","hash":"e7988db5c32cc2cf4273496e95fa2513a1b6b57d","modified":1574391588713},{"_id":"public/2019/09/23/net-core-redis/3.png","hash":"8790491f1234cf77e6d763f145e2bd366f3c07e6","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/4.png","hash":"e612f7c27802dd49b658ab1c908e47731b712f24","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/5.png","hash":"50250d27abd71b62090637f312e14be015a70391","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/6.png","hash":"0992e1076913f055bc6de00ab0de29fb45a4ba38","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/7.png","hash":"eb87146fdf60ebc5602c741ed676e34263574dde","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/8.png","hash":"b207a19bbcd1518f08b5d67b45318c93a84aaec0","modified":1574391588714},{"_id":"public/2019/09/23/net-core-redis/9.png","hash":"dd70bcc095a85e653031d4f725f733205849efc9","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/1.png","hash":"b2b9467900dadc0ccff0240fe92535e87d26619a","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/10.png","hash":"b305ca9e7901cfe9f22fbdb3faa55e62dbccd6e0","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/13.png","hash":"bed93329822f73d1408ceacaec406a124dec6d10","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/14.png","hash":"27940498d049fc563ee43cace6fb647652c0ed1b","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/16.png","hash":"f05606fffce3c0190398cb27f2ac877f48ba7f7b","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/2.png","hash":"9f07f5eebe7c90ff448d24d62c3d07e00df5e0c7","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/3.png","hash":"8e753b8a3369912fd562a2ef39aa0add7aedcbbc","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/5.png","hash":"cefc281247099c073bcf88191eefc82cc718ec22","modified":1574391588714},{"_id":"public/2019/10/29/net-core-v3-publish/6.png","hash":"460d303f305c4e0d0dca16ef806aef79573a3d92","modified":1574391588714},{"_id":"public/2019/07/18/net-core-sqlsugar-1/1.png","hash":"0325e5226b78756888892a943746e0b3e7a90dc6","modified":1574391588714},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/3.png","hash":"ec2442681b8acef0b506cb2940e229b0ef4dcd8b","modified":1574391588714},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/5.png","hash":"0b0985b2605936e0d5eea3a903ed4761105e309c","modified":1574391588714},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/6.png","hash":"613681b41bb8fdda37d5ca5f098c7f8fb4527562","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1574391588714},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1574391588715},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1574391588715},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1574391588715},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1574391588715},{"_id":"public/2019/11/05/net-core-unittest/2.png","hash":"3f126c7a1478e824343f7d558bebc5db6dd0d3c4","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/1.png","hash":"1d0ebc979af27ad3373eaba012ffac1ee974cab7","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/4.png","hash":"7571d00feebf631f7de20f908dfd7fc216bbe826","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/3.png","hash":"e913f70abf0e10f71deb3bf69173a2a7b24eaa45","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/2.png","hash":"051932c78473a6dbaa5241c6b4e62d46f5119b42","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/5.png","hash":"aa2841aba09d3d87cb67d957d7c110fc29414b45","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/7.png","hash":"9724996f89b8b5bcb3ee2b86ee22c3a620ecc60b","modified":1574391588715},{"_id":"public/2019/11/07/net-core-april-util/9.png","hash":"84815d18570f47ad2b35bd3932a8770b23deb11c","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/1.png","hash":"78a5c54ab470f86efa9a2a5280b6f4be961b3787","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/2.png","hash":"99e3cbf4912b681ce83dce60c3c092e7326c1932","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/3.png","hash":"2197a2a6d56fd5c78724a45e9ff0931021ec8aa4","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/4.png","hash":"090c35650ba92e31b1c29bef38200ecd392a923a","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/5.png","hash":"23cd7418044e9c85429e265f8dd34af5366ad243","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/6.png","hash":"9388b2e7d4008675bdc2f1c67f0d3b40987a5531","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/7.png","hash":"30d14f4054e57d8e0d549f7fa88959b120e202a9","modified":1574391588715},{"_id":"public/2019/11/10/net-core-april-util-update-1/8.png","hash":"b76f9d6f0a3349e5d84870086ff43fc4a916d8b1","modified":1574391588715},{"_id":"public/about/index/wx.jpg","hash":"e47f93f7ba8106dacb51826e297d3a6f15b9fd92","modified":1574391588856},{"_id":"public/css/footer.css","hash":"79f7e986bbaf7cb410f30667e3b8e7406ce78bf5","modified":1574391588868},{"_id":"public/css/go-top.css","hash":"35ce47c65393c4306fbf7d1f3fb3d43e53125150","modified":1574391588868},{"_id":"public/css/fonts.css","hash":"2995be5d872a03b7c85f638c8849b91bb0ea6bf2","modified":1574391588868},{"_id":"public/css/highlight.css","hash":"84ffe2d488f4b5172f9e80f34d7277129c358b53","modified":1574391588869},{"_id":"public/css/header.css","hash":"3f6559eb5ce13dfe86243a01dd18e47b20748fa0","modified":1574391588869},{"_id":"public/css/page.css","hash":"a7b3879dee5373e1e470f2227a04fab6780a9e4e","modified":1574391588869},{"_id":"public/css/scrollbar.css","hash":"bf6f7df5ae452765763384a1e8453224b66003b5","modified":1574391588869},{"_id":"public/css/search.css","hash":"e63a99a2901aac1bf0627f7d4a95161f2a0a139f","modified":1574391588869},{"_id":"public/css/image-view.css","hash":"4a09197f4938491edef346ed35e901e4d698631c","modified":1574391588869},{"_id":"public/css/video.css","hash":"f7ae31aa4b16e1869d73009dde5ad3366c599ec7","modified":1574391588869},{"_id":"public/images/favicon.ico","hash":"518569cc5ab05fd566fa75e2ff4ec3848e0db86c","modified":1574391588869},{"_id":"public/2019/10/12/laravel-swoole-socket-in-laradock/demo.png","hash":"9a688590704b071f85991b730048c186778491b5","modified":1574391588869},{"_id":"public/2019/08/21/vmware-nginx/2.png","hash":"84cb75bd62291252c6b853fca4b0c14498cc4252","modified":1574391588869},{"_id":"public/2019/07/02/net-core-createprogram/1.png","hash":"707e456cc8a0dbdd4fc65920bb95c365eabf7584","modified":1574391588869},{"_id":"public/2019/07/02/net-core-createprogram/3.png","hash":"cd920812998ab69e2e6ee1396b6fed47a8f68eab","modified":1574391588869},{"_id":"public/2019/07/02/net-core-swagger/3.png","hash":"a28e37ab042ce9f184e6815c3c714044d9283604","modified":1574391588869},{"_id":"public/2019/07/30/net-core-aop-1/7.png","hash":"4f0e79859e777044cfb88d030f96bb602a333643","modified":1574391588870},{"_id":"public/2019/07/04/net-core-log4net/2.png","hash":"1a66e0ccb372fc8478e075ba0510685881c241d9","modified":1574391588870},{"_id":"public/2019/07/04/net-core-log4net/4.png","hash":"cac15d9f1c2f2700f852a8025f7aa2999c55b113","modified":1574391588870},{"_id":"public/2019/10/09/net-core-v3-april-webapi/10.png","hash":"3f910a19757c05db95fb217f1498544ca66cb52a","modified":1574391588870},{"_id":"public/2019/10/09/net-core-v3-april-webapi/11.png","hash":"06ca681028c4b3393e8afce06762295ca1d32233","modified":1574391588870},{"_id":"public/2019/10/09/net-core-v3-april-webapi/15.png","hash":"125220d5c1baa51fbbcbf4e8cf1f265d1265ab6f","modified":1574391588870},{"_id":"public/2019/08/21/vmware-use-centos/17.png","hash":"7b611096d2c76a466df6754f465a83f1f4b918b4","modified":1574391588870},{"_id":"public/2019/08/21/vmware-use-centos/27.png","hash":"be132ffc76d09cea3de4a50cc10b39b4e937ae89","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/30.png","hash":"3f7663b620adfb84696333ff3c69983807f2eb5a","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/29.png","hash":"3bee8b57281134b935ad187e52573bb56765af32","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/32.png","hash":"e79f05fb41debe05f4b2e82401785f08d44dda57","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/33.png","hash":"eb229f69972840b72b68402f53ef95b920a95c57","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/34.png","hash":"c9b260d9ef358b4e878e30b731c75c7a1e28588b","modified":1574391588871},{"_id":"public/2019/08/21/vmware-use-centos/35.png","hash":"5c1ead565ac1af94cf00142fe07ecace95e88f12","modified":1574391588872},{"_id":"public/2019/08/27/net-core-filedownload/1.png","hash":"1b43cc018b69827766b7f80985a2e27b1191628e","modified":1574391588872},{"_id":"public/2019/09/02/net-core-qywx-application/1.png","hash":"8fea9ce99c9fd470da2aac30c72440f57ac62f2a","modified":1574391588872},{"_id":"public/2019/09/02/net-core-qywx-application/2.png","hash":"95be0070c47e158a55bc4c09f929e3cd347c1e3e","modified":1574391588872},{"_id":"public/2019/10/18/net-core-v3-npoi/2.png","hash":"f4b348da37be2e9e1958f27d5e46244606becb74","modified":1574391588872},{"_id":"public/js/firework.js","hash":"805caed95829fccafc74c7d741c6e2c00953998d","modified":1574391588882},{"_id":"public/js/sense.js","hash":"fc79b9c402f5711b1381c521e6e25d0a1490bb9f","modified":1574391588882},{"_id":"public/js/snow.js","hash":"e442240cb39d66d9ef4841f8a38a884ec05b7020","modified":1574391588882},{"_id":"public/2019/07/19/net-core-sqlsugar-2/9.png","hash":"f81c395c34d8d91bc0e46b6385acbff6a9bf4d0d","modified":1574391588882},{"_id":"public/2019/07/10/net-core-cache/5.png","hash":"3ce1c4c6abd19d1ce24036a3b0c14bf9fe72497a","modified":1574391588882},{"_id":"public/2019/10/29/net-core-v3-publish/11.png","hash":"6bf210851fb3a63f1743a7b8a738df93274ac99b","modified":1574391588882},{"_id":"public/2019/10/29/net-core-v3-publish/12.png","hash":"56d1aafb8e47874ff199f3696e76b08af7b145f1","modified":1574391588883},{"_id":"public/2019/10/29/net-core-v3-publish/15.png","hash":"0701edd7b46514ba88e3cc68871be5f5af8ffc47","modified":1574391588883},{"_id":"public/2019/10/29/net-core-v3-publish/4.png","hash":"66d9728a56307e97e40c799d8ea9407be03148e6","modified":1574391588883},{"_id":"public/2019/10/29/net-core-v3-publish/7.png","hash":"690ae612d8cc801598882bff1da12a2c59b833b1","modified":1574391588883},{"_id":"public/2019/10/29/net-core-v3-publish/8.png","hash":"eb79f423d8f6afd5928a7a7553702c4dde571dae","modified":1574391588883},{"_id":"public/2019/10/29/net-core-v3-publish/9.png","hash":"3a875cd264a52c1e95ecd81d27fa0a4defb6701f","modified":1574391588883},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/1.png","hash":"499abae2479a65094fac19ad9e3851d7c182b0a9","modified":1574391588883},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/2.png","hash":"a7f0038ef8a87e11609a323aaf3c729bcefd6fe0","modified":1574391588883},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/4.png","hash":"f5c704318be389f66f1174685548a71f40eec9f4","modified":1574391588883},{"_id":"public/2019/08/23/net-core-fileuploader-and-cors/7.png","hash":"7f7c53c79ec6496b1c005b484c6ab6ee3b92238c","modified":1574391588883},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1574391588883},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1574391588884},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1574391588884},{"_id":"public/2019/11/05/net-core-unittest/1.png","hash":"eb83902f70d92e068d767d90e569344a3cc07300","modified":1574391588884},{"_id":"public/2019/11/07/net-core-april-util/6.png","hash":"f6a8a78f321386ee7c24ce97b80823541fe21a53","modified":1574391588884},{"_id":"public/2019/11/07/net-core-april-util/8.png","hash":"3b9e69f5f3ac2488e721521b9cd5a5126e97de99","modified":1574391588884},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1574391588884},{"_id":"public/css/content.css","hash":"60578e84d12da2b5c9898ac153176ea8cd69a765","modified":1574391588915},{"_id":"public/js/image-view.js","hash":"fb3325240c6db34f3369236826ef277fd4276f58","modified":1574391588915},{"_id":"public/2019/07/04/net-core-log4net/1.png","hash":"7f400c19dc25559421a04bf28928b3b6fa7bd19f","modified":1574391588916},{"_id":"public/2019/07/10/net-core-cache/1.png","hash":"3ff63dbf5e4442b701313f33da796099f0dc068f","modified":1574391588916},{"_id":"public/2019/07/02/net-core-swagger/1.png","hash":"189e129ee49fa2359378f0c82c3e6f92b0c6af30","modified":1574391588942},{"_id":"public/2019/08/21/vmware-use-centos/24.png","hash":"886b97cee7e03b4bf5d335b62f8f1bab147c8f5c","modified":1574391588942},{"_id":"public/2019/08/21/vmware-use-centos/25.png","hash":"7ef502b9f2383eb5599e73d5bcd5234ae07fd3f0","modified":1574391588947},{"_id":"public/2019/10/09/net-core-v3-april-webapi/13.png","hash":"9a8e2abd35b4b453cf75bc19e5be598b62b91e13","modified":1574391588947},{"_id":"public/2019/10/09/net-core-v3-april-webapi/9.png","hash":"ebbf2241c43fb24d0161ed7e98969d4c2bd43b01","modified":1574391588956},{"_id":"public/2019/04/09/laravel-queues/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1574391588957},{"_id":"public/2019/10/09/net-core-v3-april-webapi/7.png","hash":"32aefad1eb13ef53add8440dde9c8df88fd30e08","modified":1574391588958},{"_id":"public/2019/08/21/vmware-use-centos/21.png","hash":"219886b48108df4c342096591cb977cc45034065","modified":1574391588959},{"_id":"public/2019/07/10/net-core-cache/11.png","hash":"30871d0648957618d51a3b416e719f31506ea35a","modified":1574391588959},{"_id":"public/2019/04/12/laravel-broadcasting/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1574391589177},{"_id":"public/2019/08/21/vmware-use-centos/31.png","hash":"e96a5e06b2a6519b012ed2eb505e4d464d928ccd","modified":1574391589177},{"_id":"public/2019/04/03/laravel-events/laravel.jpg","hash":"8a747edce2085347b73fc8d73cb3f97dc4f53fd6","modified":1574391589177},{"_id":"public/2019/08/21/vmware-use-centos/22.png","hash":"94fba928439540459948b0593ebad8e9159d4c81","modified":1574391589177},{"_id":"public/2019/08/21/vmware-use-centos/26.png","hash":"bef2d9e05eb92eb98cebcb956c8f7186a977ffe4","modified":1574391589178},{"_id":"public/2019/08/21/vmware-use-centos/28.png","hash":"f5b69a213612bd171c6441cdb1781a491126f7fb","modified":1574391589178},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1574391589218},{"_id":"public/2019/08/21/vmware-use-centos/23.png","hash":"6e6dbf100eb33929e1b86a41e6e28d618b93cd10","modified":1574391589218},{"_id":"public/2019/07/04/net-core-log4net/5.png","hash":"744685637d45bb3cee6a96e2a6126c724b1f4a80","modified":1574391589366},{"_id":"public/css/sense.css","hash":"0d79fd29a7358073bb270da9b07f0078b87e6af6","modified":1574391589396},{"_id":"public/2019/09/03/hello-php/cover.png","hash":"35bc00e68fb2981cc9c28af3a54771388de600d4","modified":1574391589396},{"_id":"public/2019/08/21/vmware-use-centos/36.png","hash":"1c6d1b9af03836042720fc49472ab6b66ac8ee4f","modified":1574391589396},{"_id":"public/2019/10/09/net-core-v3-april-webapi/12.png","hash":"a0cb48585c50d9304d6d0a4dd440cc1f73ddf677","modified":1574391589402},{"_id":"public/js/sakura.js","hash":"940475057a9aa808f1a2ddceda1b6de99b7cac7d","modified":1574391589412},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1574391589437},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1574391589452},{"_id":"public/video/sense.ogv","hash":"efab3470e2c35435d173a38675e0e0dac39678a9","modified":1574391589453},{"_id":"public/video/sense.webm","hash":"bf4f3c81cb2c48b252cf3d9a533a456b56550a99","modified":1574391589455},{"_id":"public/images/sense.png","hash":"ace522ebcec8f6f5642354581036d80ef03d6168","modified":1574391589458},{"_id":"public/video/sense.mp4","hash":"cb47e08ec8d4383af81fa52dacbad1319548719c","modified":1574391589468}],"Category":[{"name":"AprilBlank","_id":"ck39k3m0m00049sv78byu6ib2"},{"name":"南瓜","_id":"ck39k3m1v000e9sv7iwv05w3a"}],"Data":[{"_id":"temp","data":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}],"Page":[{"title":"关于","date":"2018-02-14T05:11:41.000Z","_content":"\nD-107 3wly 项目开发组自留地。\n\n主要用于分享技术经验：\n* PHP\n* JAVA\n* .NET\n* Android\n\n\n![码不能停](index/happy-codding.jpg)\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-02-14 13:11:41\n---\n\nD-107 3wly 项目开发组自留地。\n\n主要用于分享技术经验：\n* PHP\n* JAVA\n* .NET\n* Android\n\n\n![码不能停](index/happy-codding.jpg)\n","updated":"2019-09-04T08:51:28.399Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck39k3m1p000c9sv7g0tzeauc","content":"<p>D-107 3wly 项目开发组自留地。</p>\n<p>主要用于分享技术经验：</p>\n<ul>\n<li>PHP</li>\n<li>JAVA</li>\n<li>.NET</li>\n<li>Android</li>\n</ul>\n<p><img src=\"/about/index/happy-codding.jpg\" alt=\"码不能停\"></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<p>D-107 3wly 项目开发组自留地。</p>\n<p>主要用于分享技术经验：</p>\n<ul>\n<li>PHP</li>\n<li>JAVA</li>\n<li>.NET</li>\n<li>Android</li>\n</ul>\n<p><img src=\"/about/index/happy-codding.jpg\" alt=\"码不能停\"></p>\n"}],"Post":[{"title":"Hello Dotnet","date":"2019-09-04T08:56:38.000Z","_content":"\n### 测试\n\n```csharp\nstring name = \"三哈\";\nConsole.WriteLine($\"Hello {name}\");\n```","source":"_posts/hello-dotnet.md","raw":"---\ntitle: Hello Dotnet\ndate: 2019-09-04 16:56:38\ntags: test\n---\n\n### 测试\n\n```csharp\nstring name = \"三哈\";\nConsole.WriteLine($\"Hello {name}\");\n```","slug":"hello-dotnet","published":1,"updated":"2019-11-01T08:29:39.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m0400009sv76adr5fdc","content":"<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> name = <span class=\"string\">\"三哈\"</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Hello <span class=\"subst\">&#123;name&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> name = <span class=\"string\">\"三哈\"</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Hello <span class=\"subst\">&#123;name&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"Hello PHP","date":"2019-09-03T15:59:00.000Z","_content":"\n这是一篇测试。\n\n用来调整内容显示和评论。\n\n![](hello-php/cover.png)\n\n\n```php\n$hello = '你好啊，大哈！';\necho $hello;\n```\n\n> D-107\n\n`D-107`\n","source":"_posts/hello-php.md","raw":"---\ntitle: Hello PHP\ndate: 2019-09-03 23:59:00\ntags: test\n---\n\n这是一篇测试。\n\n用来调整内容显示和评论。\n\n![](hello-php/cover.png)\n\n\n```php\n$hello = '你好啊，大哈！';\necho $hello;\n```\n\n> D-107\n\n`D-107`\n","slug":"hello-php","published":1,"updated":"2019-09-04T09:08:22.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m0d00019sv7lk362q5o","content":"<p>这是一篇测试。</p>\n<p>用来调整内容显示和评论。</p>\n<p><img src=\"/2019/09/03/hello-php/cover.png\" alt></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello = <span class=\"string\">'你好啊，大哈！'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $hello;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>D-107</p>\n</blockquote>\n<p><code>D-107</code></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<p>这是一篇测试。</p>\n<p>用来调整内容显示和评论。</p>\n<p><img src=\"/2019/09/03/hello-php/cover.png\" alt></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello = <span class=\"string\">'你好啊，大哈！'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $hello;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>D-107</p>\n</blockquote>\n<p><code>D-107</code></p>\n"},{"title":"又是一年1024","date":"2019-10-24T00:44:42.000Z","_content":"\n### 前言\n\n又是一年1024，大早上坐到电脑前，无心工作，先祝各位程序猿：**上班时间短，月月薪水多，代码少bug，测试全通过，下班回家早，周末还双休，生活无压力，还有女朋友。** 感觉写完这句话整篇已经可以结束了，这可能是工作生活平衡点的最终实现目标吧。\n\n### 彷徨\n\n总觉得自己还年轻，但是也不知不觉走在奔三的路上，总觉得自己还有精力，但是也不知不觉晚上到家连电脑也开的少。时间总是在不知不觉中流逝，梦想着今朝有酒今朝醉，却还要考虑着明日之事昨日遗留，按说这个20出头的年纪（还年轻，正青年）不该有这么尴尬的想法，但确实是个比较尴尬的年纪。\n\n16年刚离开校门就步入公司，在郑州呆了两年全都从事.net开发，至于大学的生活不过多描述，恍惚而已，18年考虑了许久（应该有个半年吧），离开了郑州回到了家乡——洛阳，这个我觉得应该不至于环境太差的城市，却因为年轻低估了旅游城市对于软件开发的需求，幸好，还有.net的公司。\n\n其实对于编程语言并没有太多执念，但却总想用C#开发，看着身边的转行，转语言，我也是不禁在想，是否也要考虑下转转试试，也是在这种纠纠结结中鼓捣过php，java，python，go，也都是看看视频看看资料后做个不成型的小demo，比如先跟world打个招呼？，涉猎而已。\n\n工作当然也不会顺人心意，毕竟公司比较喜欢全能型人才，而为了全能，就不得不去接触种种，前端，后端，sql，架构，分布式…，可想而知，精力有限，学的多不代表就好，能咬着牙一条路走到黑的才能有所收获（要么大佬，要么，emm，一根筋），身边同事有句话说的我觉得挺好，==\"拿着白菜的价格，操着盖大楼的心\"==，虽然这样说不妥，但我想应该会引起共鸣吧，也有一句话 ==\"钱是别人的，命是自己的，上班996，下班ICU\"==，服务上线，项目验收，在这之前都经历过什么相信我也不需要多说，上线后有维护，验收后有反馈，这一行，是停不下来的一行 。\n\n有不少人跟我说，**在家里二三线城市，还干啥程序猿，趁早转行吧，要么趁着年轻试试上岸，要么趁着年轻折腾从商，要么趁着年轻工地搬砖，要么趁着年轻外卖走起**。对于这些提议，我只能说，有道理，我也在考虑。不抱怨生态如何，只觉得自己还要走很长，我一直坚信，程序猿是能改变世界的群体。\n\n### 一步一个脚印，慢慢来\n\n做开发后会有个习惯，看到生活当中觉得麻烦的事都会去想，如果用软件能否改善现状，工作之余也喜欢自己鼓捣些东西，简单列下自己鼓捣的东西吧，都是.net的工程，可能是因为执念，可能是因为用着顺手吧。\n\n工程 | 时间\n---|---\n基于netframework的代码生成器 | 郑州回来待业的两个月\n基于netframeword的基础工程 | 同样是待业的两个月\n基于layui的后台界面工程 | 家里工作的第二个月\n在线点餐系统 | 公司业务需要，后来搁置\n在线票务系统 | 同样搁置\n基于net core2.1的基础工程 | 18年10月左右\nApril.WebApi | 今年7月左右\n\n要说荒废吧，确实有点儿荒废，自控能力比较差的我，平时不太喜欢说不的我，总是把自己的事往后推，期间也搁置了不少想鼓捣的东西，至于怎么改进吧，也没啥喊口号的话，生活是自己的，怎么过也是自己的。\n\n另外从今年7月，开始写博客，记录下平时自己鼓捣东西或者工作中遇到的问题及解决方法，一是为了以后需要的时候随翻随用，毕竟好记性不如烂笔头，二是为了分享出来给遇到同样问题的人给予一定帮助，万一帮到人了呢。在写之前有很多顾虑，感觉不知道写啥，也不知道写的有没有人看，也感觉别人已经写过相关的自己再写有点儿多余，在后来写开之后，才对这些顾虑释然，一个字，干就完了。\n\n至于转行，当然也依然在考虑范围内，毕竟有些不是个人能力所能左右的（当然还是因为自己是渣鸡），但是编程这条路不会断，不仅仅是因为兴趣爱好吧，当然也还是希望通过这双敲代码的手去搞点儿能于生活便利的事。去了泰国一趟，别的没学会，就学会了一句翟炎炎（也不知道对不对），凡事急不得，慢慢来，质变之所以那么明显是因为量变的千锤百炼，滴水之所以石穿是因为目标明确，不能把鸡蛋放到同一个篮子里，也不能把鸡蛋放到百十个篮子里，置之死地而后生这个大英雄气概我搞不来，生而为凡人，那就只有靠自己的双手，不断的撸树挖矿，才能盖房子造装备，手拿钻石剑，最终干掉末影龙。\n\n### 总想…\n\n想的越多，顾虑越多，如何整理思路规整目标，可能是目前我最迫切需要做的，年轻人该有的冲劲儿感觉在我身上已经不知何时已经木得了，取而代之的是走路手不自觉的背后（可怕可怕）。还是想通过.net去鼓捣些什么，毕竟真的是觉得net core这个，用起来确实是比之前舒服多了，但正如前面所说，编程语言的执念没有，毕竟这只是个工具，就像镐，铲，剑，斧都能砍怪（当然这举例不恰当），语言不重要，重要的是需求与流程还有解决方案。\n\n语言也好，业务也好，行为习惯也好，都是需要不断的交流沟通，思想的火花是靠碰撞的，有些时候自己确实有点儿闭门造车的感觉，还是需要没事多关注下官网啊文档资料已经其他博客的分享，集思广益，取长补短。\n\n能推的事就推，能拒绝的得拒绝，老好人往往都是牺牲自己的时间去帮助别人，最终自己越过越累，当然好人还是要当的（不要好人卡），学会合理的拒绝也是需要的，时间用在该用的地方，精力搞在该搞的地方，对于自己的想法要么不开始，要么做到底，年轻，还是需要偶尔的冲动的。\n\n### 小结\n\n> ps:总算有篇不用写测试了\n\n写着写着感觉成了个总结了，不过也确实是整理下，生活不止眼前的苟且，当有人告诉你前面是堵墙的时候，你是选择绕路而行，还是选择勇往直前，亲身体会撞墙的感觉，可能撞的是堵纸墙，但谁知道呢，**猜不到的明天，留不住的昨天，属于自己的，只有今天。**\n","source":"_posts/another-year-1024.md","raw":"---\ntitle: 又是一年1024\ndate: 2019-10-24 08:44:42\ntags: 闲言碎语\ncategories: AprilBlank\n---\n\n### 前言\n\n又是一年1024，大早上坐到电脑前，无心工作，先祝各位程序猿：**上班时间短，月月薪水多，代码少bug，测试全通过，下班回家早，周末还双休，生活无压力，还有女朋友。** 感觉写完这句话整篇已经可以结束了，这可能是工作生活平衡点的最终实现目标吧。\n\n### 彷徨\n\n总觉得自己还年轻，但是也不知不觉走在奔三的路上，总觉得自己还有精力，但是也不知不觉晚上到家连电脑也开的少。时间总是在不知不觉中流逝，梦想着今朝有酒今朝醉，却还要考虑着明日之事昨日遗留，按说这个20出头的年纪（还年轻，正青年）不该有这么尴尬的想法，但确实是个比较尴尬的年纪。\n\n16年刚离开校门就步入公司，在郑州呆了两年全都从事.net开发，至于大学的生活不过多描述，恍惚而已，18年考虑了许久（应该有个半年吧），离开了郑州回到了家乡——洛阳，这个我觉得应该不至于环境太差的城市，却因为年轻低估了旅游城市对于软件开发的需求，幸好，还有.net的公司。\n\n其实对于编程语言并没有太多执念，但却总想用C#开发，看着身边的转行，转语言，我也是不禁在想，是否也要考虑下转转试试，也是在这种纠纠结结中鼓捣过php，java，python，go，也都是看看视频看看资料后做个不成型的小demo，比如先跟world打个招呼？，涉猎而已。\n\n工作当然也不会顺人心意，毕竟公司比较喜欢全能型人才，而为了全能，就不得不去接触种种，前端，后端，sql，架构，分布式…，可想而知，精力有限，学的多不代表就好，能咬着牙一条路走到黑的才能有所收获（要么大佬，要么，emm，一根筋），身边同事有句话说的我觉得挺好，==\"拿着白菜的价格，操着盖大楼的心\"==，虽然这样说不妥，但我想应该会引起共鸣吧，也有一句话 ==\"钱是别人的，命是自己的，上班996，下班ICU\"==，服务上线，项目验收，在这之前都经历过什么相信我也不需要多说，上线后有维护，验收后有反馈，这一行，是停不下来的一行 。\n\n有不少人跟我说，**在家里二三线城市，还干啥程序猿，趁早转行吧，要么趁着年轻试试上岸，要么趁着年轻折腾从商，要么趁着年轻工地搬砖，要么趁着年轻外卖走起**。对于这些提议，我只能说，有道理，我也在考虑。不抱怨生态如何，只觉得自己还要走很长，我一直坚信，程序猿是能改变世界的群体。\n\n### 一步一个脚印，慢慢来\n\n做开发后会有个习惯，看到生活当中觉得麻烦的事都会去想，如果用软件能否改善现状，工作之余也喜欢自己鼓捣些东西，简单列下自己鼓捣的东西吧，都是.net的工程，可能是因为执念，可能是因为用着顺手吧。\n\n工程 | 时间\n---|---\n基于netframework的代码生成器 | 郑州回来待业的两个月\n基于netframeword的基础工程 | 同样是待业的两个月\n基于layui的后台界面工程 | 家里工作的第二个月\n在线点餐系统 | 公司业务需要，后来搁置\n在线票务系统 | 同样搁置\n基于net core2.1的基础工程 | 18年10月左右\nApril.WebApi | 今年7月左右\n\n要说荒废吧，确实有点儿荒废，自控能力比较差的我，平时不太喜欢说不的我，总是把自己的事往后推，期间也搁置了不少想鼓捣的东西，至于怎么改进吧，也没啥喊口号的话，生活是自己的，怎么过也是自己的。\n\n另外从今年7月，开始写博客，记录下平时自己鼓捣东西或者工作中遇到的问题及解决方法，一是为了以后需要的时候随翻随用，毕竟好记性不如烂笔头，二是为了分享出来给遇到同样问题的人给予一定帮助，万一帮到人了呢。在写之前有很多顾虑，感觉不知道写啥，也不知道写的有没有人看，也感觉别人已经写过相关的自己再写有点儿多余，在后来写开之后，才对这些顾虑释然，一个字，干就完了。\n\n至于转行，当然也依然在考虑范围内，毕竟有些不是个人能力所能左右的（当然还是因为自己是渣鸡），但是编程这条路不会断，不仅仅是因为兴趣爱好吧，当然也还是希望通过这双敲代码的手去搞点儿能于生活便利的事。去了泰国一趟，别的没学会，就学会了一句翟炎炎（也不知道对不对），凡事急不得，慢慢来，质变之所以那么明显是因为量变的千锤百炼，滴水之所以石穿是因为目标明确，不能把鸡蛋放到同一个篮子里，也不能把鸡蛋放到百十个篮子里，置之死地而后生这个大英雄气概我搞不来，生而为凡人，那就只有靠自己的双手，不断的撸树挖矿，才能盖房子造装备，手拿钻石剑，最终干掉末影龙。\n\n### 总想…\n\n想的越多，顾虑越多，如何整理思路规整目标，可能是目前我最迫切需要做的，年轻人该有的冲劲儿感觉在我身上已经不知何时已经木得了，取而代之的是走路手不自觉的背后（可怕可怕）。还是想通过.net去鼓捣些什么，毕竟真的是觉得net core这个，用起来确实是比之前舒服多了，但正如前面所说，编程语言的执念没有，毕竟这只是个工具，就像镐，铲，剑，斧都能砍怪（当然这举例不恰当），语言不重要，重要的是需求与流程还有解决方案。\n\n语言也好，业务也好，行为习惯也好，都是需要不断的交流沟通，思想的火花是靠碰撞的，有些时候自己确实有点儿闭门造车的感觉，还是需要没事多关注下官网啊文档资料已经其他博客的分享，集思广益，取长补短。\n\n能推的事就推，能拒绝的得拒绝，老好人往往都是牺牲自己的时间去帮助别人，最终自己越过越累，当然好人还是要当的（不要好人卡），学会合理的拒绝也是需要的，时间用在该用的地方，精力搞在该搞的地方，对于自己的想法要么不开始，要么做到底，年轻，还是需要偶尔的冲动的。\n\n### 小结\n\n> ps:总算有篇不用写测试了\n\n写着写着感觉成了个总结了，不过也确实是整理下，生活不止眼前的苟且，当有人告诉你前面是堵墙的时候，你是选择绕路而行，还是选择勇往直前，亲身体会撞墙的感觉，可能撞的是堵纸墙，但谁知道呢，**猜不到的明天，留不住的昨天，属于自己的，只有今天。**\n","slug":"another-year-1024","published":1,"updated":"2019-10-29T02:32:40.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m0k00039sv778kskwgm","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>又是一年1024，大早上坐到电脑前，无心工作，先祝各位程序猿：<strong>上班时间短，月月薪水多，代码少bug，测试全通过，下班回家早，周末还双休，生活无压力，还有女朋友。</strong> 感觉写完这句话整篇已经可以结束了，这可能是工作生活平衡点的最终实现目标吧。</p>\n<h3 id=\"彷徨\"><a href=\"#彷徨\" class=\"headerlink\" title=\"彷徨\"></a>彷徨</h3><p>总觉得自己还年轻，但是也不知不觉走在奔三的路上，总觉得自己还有精力，但是也不知不觉晚上到家连电脑也开的少。时间总是在不知不觉中流逝，梦想着今朝有酒今朝醉，却还要考虑着明日之事昨日遗留，按说这个20出头的年纪（还年轻，正青年）不该有这么尴尬的想法，但确实是个比较尴尬的年纪。</p>\n<p>16年刚离开校门就步入公司，在郑州呆了两年全都从事.net开发，至于大学的生活不过多描述，恍惚而已，18年考虑了许久（应该有个半年吧），离开了郑州回到了家乡——洛阳，这个我觉得应该不至于环境太差的城市，却因为年轻低估了旅游城市对于软件开发的需求，幸好，还有.net的公司。</p>\n<p>其实对于编程语言并没有太多执念，但却总想用C#开发，看着身边的转行，转语言，我也是不禁在想，是否也要考虑下转转试试，也是在这种纠纠结结中鼓捣过php，java，python，go，也都是看看视频看看资料后做个不成型的小demo，比如先跟world打个招呼？，涉猎而已。</p>\n<p>工作当然也不会顺人心意，毕竟公司比较喜欢全能型人才，而为了全能，就不得不去接触种种，前端，后端，sql，架构，分布式…，可想而知，精力有限，学的多不代表就好，能咬着牙一条路走到黑的才能有所收获（要么大佬，要么，emm，一根筋），身边同事有句话说的我觉得挺好，==”拿着白菜的价格，操着盖大楼的心”==，虽然这样说不妥，但我想应该会引起共鸣吧，也有一句话 ==”钱是别人的，命是自己的，上班996，下班ICU”==，服务上线，项目验收，在这之前都经历过什么相信我也不需要多说，上线后有维护，验收后有反馈，这一行，是停不下来的一行 。</p>\n<p>有不少人跟我说，<strong>在家里二三线城市，还干啥程序猿，趁早转行吧，要么趁着年轻试试上岸，要么趁着年轻折腾从商，要么趁着年轻工地搬砖，要么趁着年轻外卖走起</strong>。对于这些提议，我只能说，有道理，我也在考虑。不抱怨生态如何，只觉得自己还要走很长，我一直坚信，程序猿是能改变世界的群体。</p>\n<h3 id=\"一步一个脚印，慢慢来\"><a href=\"#一步一个脚印，慢慢来\" class=\"headerlink\" title=\"一步一个脚印，慢慢来\"></a>一步一个脚印，慢慢来</h3><p>做开发后会有个习惯，看到生活当中觉得麻烦的事都会去想，如果用软件能否改善现状，工作之余也喜欢自己鼓捣些东西，简单列下自己鼓捣的东西吧，都是.net的工程，可能是因为执念，可能是因为用着顺手吧。</p>\n<table>\n<thead>\n<tr>\n<th>工程</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基于netframework的代码生成器</td>\n<td>郑州回来待业的两个月</td>\n</tr>\n<tr>\n<td>基于netframeword的基础工程</td>\n<td>同样是待业的两个月</td>\n</tr>\n<tr>\n<td>基于layui的后台界面工程</td>\n<td>家里工作的第二个月</td>\n</tr>\n<tr>\n<td>在线点餐系统</td>\n<td>公司业务需要，后来搁置</td>\n</tr>\n<tr>\n<td>在线票务系统</td>\n<td>同样搁置</td>\n</tr>\n<tr>\n<td>基于net core2.1的基础工程</td>\n<td>18年10月左右</td>\n</tr>\n<tr>\n<td>April.WebApi</td>\n<td>今年7月左右</td>\n</tr>\n</tbody></table>\n<p>要说荒废吧，确实有点儿荒废，自控能力比较差的我，平时不太喜欢说不的我，总是把自己的事往后推，期间也搁置了不少想鼓捣的东西，至于怎么改进吧，也没啥喊口号的话，生活是自己的，怎么过也是自己的。</p>\n<p>另外从今年7月，开始写博客，记录下平时自己鼓捣东西或者工作中遇到的问题及解决方法，一是为了以后需要的时候随翻随用，毕竟好记性不如烂笔头，二是为了分享出来给遇到同样问题的人给予一定帮助，万一帮到人了呢。在写之前有很多顾虑，感觉不知道写啥，也不知道写的有没有人看，也感觉别人已经写过相关的自己再写有点儿多余，在后来写开之后，才对这些顾虑释然，一个字，干就完了。</p>\n<p>至于转行，当然也依然在考虑范围内，毕竟有些不是个人能力所能左右的（当然还是因为自己是渣鸡），但是编程这条路不会断，不仅仅是因为兴趣爱好吧，当然也还是希望通过这双敲代码的手去搞点儿能于生活便利的事。去了泰国一趟，别的没学会，就学会了一句翟炎炎（也不知道对不对），凡事急不得，慢慢来，质变之所以那么明显是因为量变的千锤百炼，滴水之所以石穿是因为目标明确，不能把鸡蛋放到同一个篮子里，也不能把鸡蛋放到百十个篮子里，置之死地而后生这个大英雄气概我搞不来，生而为凡人，那就只有靠自己的双手，不断的撸树挖矿，才能盖房子造装备，手拿钻石剑，最终干掉末影龙。</p>\n<h3 id=\"总想…\"><a href=\"#总想…\" class=\"headerlink\" title=\"总想…\"></a>总想…</h3><p>想的越多，顾虑越多，如何整理思路规整目标，可能是目前我最迫切需要做的，年轻人该有的冲劲儿感觉在我身上已经不知何时已经木得了，取而代之的是走路手不自觉的背后（可怕可怕）。还是想通过.net去鼓捣些什么，毕竟真的是觉得net core这个，用起来确实是比之前舒服多了，但正如前面所说，编程语言的执念没有，毕竟这只是个工具，就像镐，铲，剑，斧都能砍怪（当然这举例不恰当），语言不重要，重要的是需求与流程还有解决方案。</p>\n<p>语言也好，业务也好，行为习惯也好，都是需要不断的交流沟通，思想的火花是靠碰撞的，有些时候自己确实有点儿闭门造车的感觉，还是需要没事多关注下官网啊文档资料已经其他博客的分享，集思广益，取长补短。</p>\n<p>能推的事就推，能拒绝的得拒绝，老好人往往都是牺牲自己的时间去帮助别人，最终自己越过越累，当然好人还是要当的（不要好人卡），学会合理的拒绝也是需要的，时间用在该用的地方，精力搞在该搞的地方，对于自己的想法要么不开始，要么做到底，年轻，还是需要偶尔的冲动的。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><blockquote>\n<p>ps:总算有篇不用写测试了</p>\n</blockquote>\n<p>写着写着感觉成了个总结了，不过也确实是整理下，生活不止眼前的苟且，当有人告诉你前面是堵墙的时候，你是选择绕路而行，还是选择勇往直前，亲身体会撞墙的感觉，可能撞的是堵纸墙，但谁知道呢，<strong>猜不到的明天，留不住的昨天，属于自己的，只有今天。</strong></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>又是一年1024，大早上坐到电脑前，无心工作，先祝各位程序猿：<strong>上班时间短，月月薪水多，代码少bug，测试全通过，下班回家早，周末还双休，生活无压力，还有女朋友。</strong> 感觉写完这句话整篇已经可以结束了，这可能是工作生活平衡点的最终实现目标吧。</p>\n<h3 id=\"彷徨\"><a href=\"#彷徨\" class=\"headerlink\" title=\"彷徨\"></a>彷徨</h3><p>总觉得自己还年轻，但是也不知不觉走在奔三的路上，总觉得自己还有精力，但是也不知不觉晚上到家连电脑也开的少。时间总是在不知不觉中流逝，梦想着今朝有酒今朝醉，却还要考虑着明日之事昨日遗留，按说这个20出头的年纪（还年轻，正青年）不该有这么尴尬的想法，但确实是个比较尴尬的年纪。</p>\n<p>16年刚离开校门就步入公司，在郑州呆了两年全都从事.net开发，至于大学的生活不过多描述，恍惚而已，18年考虑了许久（应该有个半年吧），离开了郑州回到了家乡——洛阳，这个我觉得应该不至于环境太差的城市，却因为年轻低估了旅游城市对于软件开发的需求，幸好，还有.net的公司。</p>\n<p>其实对于编程语言并没有太多执念，但却总想用C#开发，看着身边的转行，转语言，我也是不禁在想，是否也要考虑下转转试试，也是在这种纠纠结结中鼓捣过php，java，python，go，也都是看看视频看看资料后做个不成型的小demo，比如先跟world打个招呼？，涉猎而已。</p>\n<p>工作当然也不会顺人心意，毕竟公司比较喜欢全能型人才，而为了全能，就不得不去接触种种，前端，后端，sql，架构，分布式…，可想而知，精力有限，学的多不代表就好，能咬着牙一条路走到黑的才能有所收获（要么大佬，要么，emm，一根筋），身边同事有句话说的我觉得挺好，==”拿着白菜的价格，操着盖大楼的心”==，虽然这样说不妥，但我想应该会引起共鸣吧，也有一句话 ==”钱是别人的，命是自己的，上班996，下班ICU”==，服务上线，项目验收，在这之前都经历过什么相信我也不需要多说，上线后有维护，验收后有反馈，这一行，是停不下来的一行 。</p>\n<p>有不少人跟我说，<strong>在家里二三线城市，还干啥程序猿，趁早转行吧，要么趁着年轻试试上岸，要么趁着年轻折腾从商，要么趁着年轻工地搬砖，要么趁着年轻外卖走起</strong>。对于这些提议，我只能说，有道理，我也在考虑。不抱怨生态如何，只觉得自己还要走很长，我一直坚信，程序猿是能改变世界的群体。</p>\n<h3 id=\"一步一个脚印，慢慢来\"><a href=\"#一步一个脚印，慢慢来\" class=\"headerlink\" title=\"一步一个脚印，慢慢来\"></a>一步一个脚印，慢慢来</h3><p>做开发后会有个习惯，看到生活当中觉得麻烦的事都会去想，如果用软件能否改善现状，工作之余也喜欢自己鼓捣些东西，简单列下自己鼓捣的东西吧，都是.net的工程，可能是因为执念，可能是因为用着顺手吧。</p>\n<table>\n<thead>\n<tr>\n<th>工程</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基于netframework的代码生成器</td>\n<td>郑州回来待业的两个月</td>\n</tr>\n<tr>\n<td>基于netframeword的基础工程</td>\n<td>同样是待业的两个月</td>\n</tr>\n<tr>\n<td>基于layui的后台界面工程</td>\n<td>家里工作的第二个月</td>\n</tr>\n<tr>\n<td>在线点餐系统</td>\n<td>公司业务需要，后来搁置</td>\n</tr>\n<tr>\n<td>在线票务系统</td>\n<td>同样搁置</td>\n</tr>\n<tr>\n<td>基于net core2.1的基础工程</td>\n<td>18年10月左右</td>\n</tr>\n<tr>\n<td>April.WebApi</td>\n<td>今年7月左右</td>\n</tr>\n</tbody></table>\n<p>要说荒废吧，确实有点儿荒废，自控能力比较差的我，平时不太喜欢说不的我，总是把自己的事往后推，期间也搁置了不少想鼓捣的东西，至于怎么改进吧，也没啥喊口号的话，生活是自己的，怎么过也是自己的。</p>\n<p>另外从今年7月，开始写博客，记录下平时自己鼓捣东西或者工作中遇到的问题及解决方法，一是为了以后需要的时候随翻随用，毕竟好记性不如烂笔头，二是为了分享出来给遇到同样问题的人给予一定帮助，万一帮到人了呢。在写之前有很多顾虑，感觉不知道写啥，也不知道写的有没有人看，也感觉别人已经写过相关的自己再写有点儿多余，在后来写开之后，才对这些顾虑释然，一个字，干就完了。</p>\n<p>至于转行，当然也依然在考虑范围内，毕竟有些不是个人能力所能左右的（当然还是因为自己是渣鸡），但是编程这条路不会断，不仅仅是因为兴趣爱好吧，当然也还是希望通过这双敲代码的手去搞点儿能于生活便利的事。去了泰国一趟，别的没学会，就学会了一句翟炎炎（也不知道对不对），凡事急不得，慢慢来，质变之所以那么明显是因为量变的千锤百炼，滴水之所以石穿是因为目标明确，不能把鸡蛋放到同一个篮子里，也不能把鸡蛋放到百十个篮子里，置之死地而后生这个大英雄气概我搞不来，生而为凡人，那就只有靠自己的双手，不断的撸树挖矿，才能盖房子造装备，手拿钻石剑，最终干掉末影龙。</p>\n<h3 id=\"总想…\"><a href=\"#总想…\" class=\"headerlink\" title=\"总想…\"></a>总想…</h3><p>想的越多，顾虑越多，如何整理思路规整目标，可能是目前我最迫切需要做的，年轻人该有的冲劲儿感觉在我身上已经不知何时已经木得了，取而代之的是走路手不自觉的背后（可怕可怕）。还是想通过.net去鼓捣些什么，毕竟真的是觉得net core这个，用起来确实是比之前舒服多了，但正如前面所说，编程语言的执念没有，毕竟这只是个工具，就像镐，铲，剑，斧都能砍怪（当然这举例不恰当），语言不重要，重要的是需求与流程还有解决方案。</p>\n<p>语言也好，业务也好，行为习惯也好，都是需要不断的交流沟通，思想的火花是靠碰撞的，有些时候自己确实有点儿闭门造车的感觉，还是需要没事多关注下官网啊文档资料已经其他博客的分享，集思广益，取长补短。</p>\n<p>能推的事就推，能拒绝的得拒绝，老好人往往都是牺牲自己的时间去帮助别人，最终自己越过越累，当然好人还是要当的（不要好人卡），学会合理的拒绝也是需要的，时间用在该用的地方，精力搞在该搞的地方，对于自己的想法要么不开始，要么做到底，年轻，还是需要偶尔的冲动的。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><blockquote>\n<p>ps:总算有篇不用写测试了</p>\n</blockquote>\n<p>写着写着感觉成了个总结了，不过也确实是整理下，生活不止眼前的苟且，当有人告诉你前面是堵墙的时候，你是选择绕路而行，还是选择勇往直前，亲身体会撞墙的感觉，可能撞的是堵纸墙，但谁知道呢，<strong>猜不到的明天，留不住的昨天，属于自己的，只有今天。</strong></p>\n"},{"title":"laravel 广播系统学习","date":"2019-04-12T15:59:59.000Z","_content":"\n看到广播系统，先想起了曾经虐过我的即时通讯。\n\n虽然都是对 websocket 的应用，但是好像又有点区别，这里好好学习一下。\n\n![](laravel-broadcasting/laravel.jpg)\n<!-- more -->\n\nlaravel 的广播与事件紧密相关，广播即对事件进行广播，因此在学习广播之前，要先阅读事件和监听器的相关文档。\n\n\n#### 配置\n老规矩，先来看配置文件 `config/broadcasting.php` 里边的配置选项：\n\n```php\n<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Broadcaster\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default broadcaster that will be used by the\n    | framework when an event needs to be broadcast. You may set this to\n    | any of the connections defined in the \"connections\" array below.\n    |\n    | Supported: \"pusher\", \"redis\", \"log\", \"null\"\n    |\n    */\n\n    'default' => env('BROADCAST_DRIVER', 'null'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Broadcast Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define all of the broadcast connections that will be used\n    | to broadcast events to other systems or over websockets. Samples of\n    | each available type of connection are provided inside this array.\n    |\n    */\n\n    'connections' => [\n\n        'pusher' => [\n            'driver' => 'pusher',\n            'key' => env('PUSHER_APP_KEY'),\n            'secret' => env('PUSHER_APP_SECRET'),\n            'app_id' => env('PUSHER_APP_ID'),\n            'options' => [\n                'cluster' => env('PUSHER_APP_CLUSTER'),\n                'encrypted' => true,\n            ],\n        ],\n\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'default',\n        ],\n\n        'log' => [\n            'driver' => 'log',\n        ],\n\n        'null' => [\n            'driver' => 'null',\n        ],\n\n    ],\n\n];\n\n```\n\n默认情况下，laravel 提供了以上几种开箱即用的广播驱动器程序。\n\n`env` 配置文件中，默认的驱动为 `log`，意味着客户端不会受到任何信息，只是会把要广播的消息写入 log 文件中，跟学习目标不符，就先以 `pusher` 展开学习吧。\n\n我们就以发布新文章后推送给所有用户为例。\n\n#### 前期准备\n开始之前，必须要先注册 `App\\Providers\\BroadcastServiceProvider`，在 `config/app.php` 配置文件中的 `providers` 数组中取消对提供者的注释。\n\n注册:[ [ pusher ] ](https://dashboard.pusher.com)\n\n然后把相关参数配置到 `.env` 文件。\n\n#### 安装组件：\n```php\ncomposer require pusher/pusher-php-server\nnpm install --save laravel-echo pusher-js\n```\n\n添加文章模块，包含 migrate，controller，model，view 和 router 等内容。\n\n\n#### 新建事件：\n```php\nphp artisan make:event NewArticleNotificationEvent\n\n// 事件内容：\n<?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse App\\Article;\n\nclass NewArticleNotificationEvent implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    private $article;\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Article $article)\n    {\n        $this->article = $article;\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'title' => $this->article->title,\n            'content' => $this->article->content,\n            'author' => $this->article->user->name\n        ];\n    }\n\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return \\Illuminate\\Broadcasting\\Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new Channel('articles');\n    }\n}\n\n```\n\n#### 触发事件\n在保存文章的控制器中触发事件：\n```php\n$data = array_merge($request->only(['title', 'content']), ['uid' => Auth::id()]);\n$article = Article::create($data);\nbroadcast(new NewArticleNotificationEvent($article));\n```\n\n#### 前端监听\n\n文章列表用了vue组件，在这个组件中进行事件监听。\n```vue\n<template>\n    <div class=\"container\">\n        <table class=\"table table-striped\">\n            <tr>\n                <th>ID</th>\n                <th>Author</th>\n                <th>Title</th>\n                <th>Content</th>\n                <th>Created At</th>\n            </tr>\n            <tr v-for=\"article in articles\">\n                <td>{{article.id}}</td>\n                <td>{{article.user.name}}</td>\n                <td>{{article.title}}</td>\n                <td>{{article.content}}</td>\n                <td>{{article.created_at}}</td>\n            </tr>\n        </table>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: ['articles'],\n    created() {\n        Echo.channel('articles').listen('NewArticleNotificationEvent', (article) => {\n            console.log(article);\n        })\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n```\n\n写好后要在命令行执行 npm run watch-poll 实时编译文件。\n\n#### 测试\n写篇文章测试一下：\n![](laravel-broadcasting/new.png)\n\n![](laravel-broadcasting/mes.png)\n\n#### 注意事项\n* 不需要创建 channel 路由\n* 不需要开启队列监听\n* 如果没反应请先强制刷新浏览器\n","source":"_posts/laravel-broadcasting.md","raw":"---\ntitle: laravel 广播系统学习\ndate: 2019-04-12 23:59:59\ntags: laravel\ncategories: 南瓜\n---\n\n看到广播系统，先想起了曾经虐过我的即时通讯。\n\n虽然都是对 websocket 的应用，但是好像又有点区别，这里好好学习一下。\n\n![](laravel-broadcasting/laravel.jpg)\n<!-- more -->\n\nlaravel 的广播与事件紧密相关，广播即对事件进行广播，因此在学习广播之前，要先阅读事件和监听器的相关文档。\n\n\n#### 配置\n老规矩，先来看配置文件 `config/broadcasting.php` 里边的配置选项：\n\n```php\n<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Broadcaster\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default broadcaster that will be used by the\n    | framework when an event needs to be broadcast. You may set this to\n    | any of the connections defined in the \"connections\" array below.\n    |\n    | Supported: \"pusher\", \"redis\", \"log\", \"null\"\n    |\n    */\n\n    'default' => env('BROADCAST_DRIVER', 'null'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Broadcast Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define all of the broadcast connections that will be used\n    | to broadcast events to other systems or over websockets. Samples of\n    | each available type of connection are provided inside this array.\n    |\n    */\n\n    'connections' => [\n\n        'pusher' => [\n            'driver' => 'pusher',\n            'key' => env('PUSHER_APP_KEY'),\n            'secret' => env('PUSHER_APP_SECRET'),\n            'app_id' => env('PUSHER_APP_ID'),\n            'options' => [\n                'cluster' => env('PUSHER_APP_CLUSTER'),\n                'encrypted' => true,\n            ],\n        ],\n\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'default',\n        ],\n\n        'log' => [\n            'driver' => 'log',\n        ],\n\n        'null' => [\n            'driver' => 'null',\n        ],\n\n    ],\n\n];\n\n```\n\n默认情况下，laravel 提供了以上几种开箱即用的广播驱动器程序。\n\n`env` 配置文件中，默认的驱动为 `log`，意味着客户端不会受到任何信息，只是会把要广播的消息写入 log 文件中，跟学习目标不符，就先以 `pusher` 展开学习吧。\n\n我们就以发布新文章后推送给所有用户为例。\n\n#### 前期准备\n开始之前，必须要先注册 `App\\Providers\\BroadcastServiceProvider`，在 `config/app.php` 配置文件中的 `providers` 数组中取消对提供者的注释。\n\n注册:[ [ pusher ] ](https://dashboard.pusher.com)\n\n然后把相关参数配置到 `.env` 文件。\n\n#### 安装组件：\n```php\ncomposer require pusher/pusher-php-server\nnpm install --save laravel-echo pusher-js\n```\n\n添加文章模块，包含 migrate，controller，model，view 和 router 等内容。\n\n\n#### 新建事件：\n```php\nphp artisan make:event NewArticleNotificationEvent\n\n// 事件内容：\n<?php\n\nnamespace App\\Events;\n\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Broadcasting\\Channel;\nuse Illuminate\\Broadcasting\\PrivateChannel;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\nuse App\\Article;\n\nclass NewArticleNotificationEvent implements ShouldBroadcast\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    private $article;\n    /**\n     * Create a new event instance.\n     *\n     * @return void\n     */\n    public function __construct(Article $article)\n    {\n        $this->article = $article;\n    }\n\n    public function broadcastWith()\n    {\n        return [\n            'title' => $this->article->title,\n            'content' => $this->article->content,\n            'author' => $this->article->user->name\n        ];\n    }\n\n\n    /**\n     * Get the channels the event should broadcast on.\n     *\n     * @return \\Illuminate\\Broadcasting\\Channel|array\n     */\n    public function broadcastOn()\n    {\n        return new Channel('articles');\n    }\n}\n\n```\n\n#### 触发事件\n在保存文章的控制器中触发事件：\n```php\n$data = array_merge($request->only(['title', 'content']), ['uid' => Auth::id()]);\n$article = Article::create($data);\nbroadcast(new NewArticleNotificationEvent($article));\n```\n\n#### 前端监听\n\n文章列表用了vue组件，在这个组件中进行事件监听。\n```vue\n<template>\n    <div class=\"container\">\n        <table class=\"table table-striped\">\n            <tr>\n                <th>ID</th>\n                <th>Author</th>\n                <th>Title</th>\n                <th>Content</th>\n                <th>Created At</th>\n            </tr>\n            <tr v-for=\"article in articles\">\n                <td>{{article.id}}</td>\n                <td>{{article.user.name}}</td>\n                <td>{{article.title}}</td>\n                <td>{{article.content}}</td>\n                <td>{{article.created_at}}</td>\n            </tr>\n        </table>\n    </div>\n</template>\n\n<script>\nexport default {\n    props: ['articles'],\n    created() {\n        Echo.channel('articles').listen('NewArticleNotificationEvent', (article) => {\n            console.log(article);\n        })\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n```\n\n写好后要在命令行执行 npm run watch-poll 实时编译文件。\n\n#### 测试\n写篇文章测试一下：\n![](laravel-broadcasting/new.png)\n\n![](laravel-broadcasting/mes.png)\n\n#### 注意事项\n* 不需要创建 channel 路由\n* 不需要开启队列监听\n* 如果没反应请先强制刷新浏览器\n","slug":"laravel-broadcasting","published":1,"updated":"2019-09-30T05:50:02.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m1n000b9sv7zuidy2sl","content":"<p>看到广播系统，先想起了曾经虐过我的即时通讯。</p>\n<p>虽然都是对 websocket 的应用，但是好像又有点区别，这里好好学习一下。</p>\n<p><img src=\"/2019/04/12/laravel-broadcasting/laravel.jpg\" alt></p>\n<a id=\"more\"></a>\n\n<p>laravel 的广播与事件紧密相关，广播即对事件进行广播，因此在学习广播之前，要先阅读事件和监听器的相关文档。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>老规矩，先来看配置文件 <code>config/broadcasting.php</code> 里边的配置选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    | Default Broadcaster</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | This option controls the default broadcaster that will be used by the</span></span><br><span class=\"line\"><span class=\"comment\">    | framework when an event needs to be broadcast. You may set this to</span></span><br><span class=\"line\"><span class=\"comment\">    | any of the connections defined in the \"connections\" array below.</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | Supported: \"pusher\", \"redis\", \"log\", \"null\"</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'default'</span> =&gt; env(<span class=\"string\">'BROADCAST_DRIVER'</span>, <span class=\"string\">'null'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    | Broadcast Connections</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | Here you may define all of the broadcast connections that will be used</span></span><br><span class=\"line\"><span class=\"comment\">    | to broadcast events to other systems or over websockets. Samples of</span></span><br><span class=\"line\"><span class=\"comment\">    | each available type of connection are provided inside this array.</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'connections'</span> =&gt; [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'pusher'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'pusher'</span>,</span><br><span class=\"line\">            <span class=\"string\">'key'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_KEY'</span>),</span><br><span class=\"line\">            <span class=\"string\">'secret'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_SECRET'</span>),</span><br><span class=\"line\">            <span class=\"string\">'app_id'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_ID'</span>),</span><br><span class=\"line\">            <span class=\"string\">'options'</span> =&gt; [</span><br><span class=\"line\">                <span class=\"string\">'cluster'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_CLUSTER'</span>),</span><br><span class=\"line\">                <span class=\"string\">'encrypted'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'redis'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'redis'</span>,</span><br><span class=\"line\">            <span class=\"string\">'connection'</span> =&gt; <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'log'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'log'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'null'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'null'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，laravel 提供了以上几种开箱即用的广播驱动器程序。</p>\n<p><code>env</code> 配置文件中，默认的驱动为 <code>log</code>，意味着客户端不会受到任何信息，只是会把要广播的消息写入 log 文件中，跟学习目标不符，就先以 <code>pusher</code> 展开学习吧。</p>\n<p>我们就以发布新文章后推送给所有用户为例。</p>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><p>开始之前，必须要先注册 <code>App\\Providers\\BroadcastServiceProvider</code>，在 <code>config/app.php</code> 配置文件中的 <code>providers</code> 数组中取消对提供者的注释。</p>\n<p>注册:<a href=\"https://dashboard.pusher.com\" target=\"_blank\" rel=\"noopener\"> [ pusher ] </a></p>\n<p>然后把相关参数配置到 <code>.env</code> 文件。</p>\n<h4 id=\"安装组件：\"><a href=\"#安装组件：\" class=\"headerlink\" title=\"安装组件：\"></a>安装组件：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer <span class=\"keyword\">require</span> pusher/pusher-php-server</span><br><span class=\"line\">npm install --save laravel-<span class=\"keyword\">echo</span> pusher-js</span><br></pre></td></tr></table></figure>\n\n<p>添加文章模块，包含 migrate，controller，model，view 和 router 等内容。</p>\n<h4 id=\"新建事件：\"><a href=\"#新建事件：\" class=\"headerlink\" title=\"新建事件：\"></a>新建事件：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:event NewArticleNotificationEvent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件内容：</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Events</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Queue</span>\\<span class=\"title\">SerializesModels</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">Channel</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">PrivateChannel</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Events</span>\\<span class=\"title\">Dispatchable</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">InteractsWithSockets</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Contracts</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">ShouldBroadcast</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Article</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewArticleNotificationEvent</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShouldBroadcast</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Dispatchable</span>, <span class=\"title\">InteractsWithSockets</span>, <span class=\"title\">SerializesModels</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $article;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new event instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Article $article)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;article = $article;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcastWith</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">            <span class=\"string\">'title'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;title,</span><br><span class=\"line\">            <span class=\"string\">'content'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;content,</span><br><span class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;user-&gt;name</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the channels the event should broadcast on.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Illuminate\\Broadcasting\\Channel|array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcastOn</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Channel(<span class=\"string\">'articles'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发事件\"><a href=\"#触发事件\" class=\"headerlink\" title=\"触发事件\"></a>触发事件</h4><p>在保存文章的控制器中触发事件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$data = array_merge($request-&gt;only([<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>]), [<span class=\"string\">'uid'</span> =&gt; Auth::id()]);</span><br><span class=\"line\">$article = Article::create($data);</span><br><span class=\"line\">broadcast(<span class=\"keyword\">new</span> NewArticleNotificationEvent($article));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端监听\"><a href=\"#前端监听\" class=\"headerlink\" title=\"前端监听\"></a>前端监听</h4><p>文章列表用了vue组件，在这个组件中进行事件监听。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;table table-striped&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Author&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Title&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Content&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Created At&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr v-for=&quot;article in articles&quot;&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.user.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.title&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.content&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.created_at&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props: [&apos;articles&apos;],</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        Echo.channel(&apos;articles&apos;).listen(&apos;NewArticleNotificationEvent&apos;, (article) =&gt; &#123;</span><br><span class=\"line\">            console.log(article);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写好后要在命令行执行 npm run watch-poll 实时编译文件。</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>写篇文章测试一下：<br><img src=\"/2019/04/12/laravel-broadcasting/new.png\" alt></p>\n<p><img src=\"/2019/04/12/laravel-broadcasting/mes.png\" alt></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>不需要创建 channel 路由</li>\n<li>不需要开启队列监听</li>\n<li>如果没反应请先强制刷新浏览器</li>\n</ul>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>看到广播系统，先想起了曾经虐过我的即时通讯。</p>\n<p>虽然都是对 websocket 的应用，但是好像又有点区别，这里好好学习一下。</p>\n<p><img src=\"/2019/04/12/laravel-broadcasting/laravel.jpg\" alt></p>","more":"<p>laravel 的广播与事件紧密相关，广播即对事件进行广播，因此在学习广播之前，要先阅读事件和监听器的相关文档。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>老规矩，先来看配置文件 <code>config/broadcasting.php</code> 里边的配置选项：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> [</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    | Default Broadcaster</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | This option controls the default broadcaster that will be used by the</span></span><br><span class=\"line\"><span class=\"comment\">    | framework when an event needs to be broadcast. You may set this to</span></span><br><span class=\"line\"><span class=\"comment\">    | any of the connections defined in the \"connections\" array below.</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | Supported: \"pusher\", \"redis\", \"log\", \"null\"</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'default'</span> =&gt; env(<span class=\"string\">'BROADCAST_DRIVER'</span>, <span class=\"string\">'null'</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    | Broadcast Connections</span></span><br><span class=\"line\"><span class=\"comment\">    |--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    | Here you may define all of the broadcast connections that will be used</span></span><br><span class=\"line\"><span class=\"comment\">    | to broadcast events to other systems or over websockets. Samples of</span></span><br><span class=\"line\"><span class=\"comment\">    | each available type of connection are provided inside this array.</span></span><br><span class=\"line\"><span class=\"comment\">    |</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'connections'</span> =&gt; [</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'pusher'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'pusher'</span>,</span><br><span class=\"line\">            <span class=\"string\">'key'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_KEY'</span>),</span><br><span class=\"line\">            <span class=\"string\">'secret'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_SECRET'</span>),</span><br><span class=\"line\">            <span class=\"string\">'app_id'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_ID'</span>),</span><br><span class=\"line\">            <span class=\"string\">'options'</span> =&gt; [</span><br><span class=\"line\">                <span class=\"string\">'cluster'</span> =&gt; env(<span class=\"string\">'PUSHER_APP_CLUSTER'</span>),</span><br><span class=\"line\">                <span class=\"string\">'encrypted'</span> =&gt; <span class=\"keyword\">true</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'redis'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'redis'</span>,</span><br><span class=\"line\">            <span class=\"string\">'connection'</span> =&gt; <span class=\"string\">'default'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'log'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'log'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">'null'</span> =&gt; [</span><br><span class=\"line\">            <span class=\"string\">'driver'</span> =&gt; <span class=\"string\">'null'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，laravel 提供了以上几种开箱即用的广播驱动器程序。</p>\n<p><code>env</code> 配置文件中，默认的驱动为 <code>log</code>，意味着客户端不会受到任何信息，只是会把要广播的消息写入 log 文件中，跟学习目标不符，就先以 <code>pusher</code> 展开学习吧。</p>\n<p>我们就以发布新文章后推送给所有用户为例。</p>\n<h4 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h4><p>开始之前，必须要先注册 <code>App\\Providers\\BroadcastServiceProvider</code>，在 <code>config/app.php</code> 配置文件中的 <code>providers</code> 数组中取消对提供者的注释。</p>\n<p>注册:<a href=\"https://dashboard.pusher.com\" target=\"_blank\" rel=\"noopener\"> [ pusher ] </a></p>\n<p>然后把相关参数配置到 <code>.env</code> 文件。</p>\n<h4 id=\"安装组件：\"><a href=\"#安装组件：\" class=\"headerlink\" title=\"安装组件：\"></a>安装组件：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer <span class=\"keyword\">require</span> pusher/pusher-php-server</span><br><span class=\"line\">npm install --save laravel-<span class=\"keyword\">echo</span> pusher-js</span><br></pre></td></tr></table></figure>\n\n<p>添加文章模块，包含 migrate，controller，model，view 和 router 等内容。</p>\n<h4 id=\"新建事件：\"><a href=\"#新建事件：\" class=\"headerlink\" title=\"新建事件：\"></a>新建事件：</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan make:event NewArticleNotificationEvent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件内容：</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Events</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Queue</span>\\<span class=\"title\">SerializesModels</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">Channel</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">PrivateChannel</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Foundation</span>\\<span class=\"title\">Events</span>\\<span class=\"title\">Dispatchable</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">InteractsWithSockets</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Contracts</span>\\<span class=\"title\">Broadcasting</span>\\<span class=\"title\">ShouldBroadcast</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Article</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewArticleNotificationEvent</span> <span class=\"keyword\">implements</span> <span class=\"title\">ShouldBroadcast</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Dispatchable</span>, <span class=\"title\">InteractsWithSockets</span>, <span class=\"title\">SerializesModels</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $article;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new event instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(Article $article)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;article = $article;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcastWith</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [</span><br><span class=\"line\">            <span class=\"string\">'title'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;title,</span><br><span class=\"line\">            <span class=\"string\">'content'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;content,</span><br><span class=\"line\">            <span class=\"string\">'author'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;article-&gt;user-&gt;name</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the channels the event should broadcast on.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> \\Illuminate\\Broadcasting\\Channel|array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcastOn</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Channel(<span class=\"string\">'articles'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发事件\"><a href=\"#触发事件\" class=\"headerlink\" title=\"触发事件\"></a>触发事件</h4><p>在保存文章的控制器中触发事件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$data = array_merge($request-&gt;only([<span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>]), [<span class=\"string\">'uid'</span> =&gt; Auth::id()]);</span><br><span class=\"line\">$article = Article::create($data);</span><br><span class=\"line\">broadcast(<span class=\"keyword\">new</span> NewArticleNotificationEvent($article));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端监听\"><a href=\"#前端监听\" class=\"headerlink\" title=\"前端监听\"></a>前端监听</h4><p>文章列表用了vue组件，在这个组件中进行事件监听。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;table table-striped&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;ID&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Author&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Title&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Content&lt;/th&gt;</span><br><span class=\"line\">                &lt;th&gt;Created At&lt;/th&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr v-for=&quot;article in articles&quot;&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.id&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.user.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.title&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.content&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">                &lt;td&gt;&#123;&#123;article.created_at&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    props: [&apos;articles&apos;],</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        Echo.channel(&apos;articles&apos;).listen(&apos;NewArticleNotificationEvent&apos;, (article) =&gt; &#123;</span><br><span class=\"line\">            console.log(article);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写好后要在命令行执行 npm run watch-poll 实时编译文件。</p>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>写篇文章测试一下：<br><img src=\"/2019/04/12/laravel-broadcasting/new.png\" alt></p>\n<p><img src=\"/2019/04/12/laravel-broadcasting/mes.png\" alt></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>不需要创建 channel 路由</li>\n<li>不需要开启队列监听</li>\n<li>如果没反应请先强制刷新浏览器</li>\n</ul>"},{"title":"laravel 事件系统学习","date":"2019-04-03T15:00:00.000Z","_content":"\n学习下 laravel 的事件系统。\n![](laravel-events/laravel.jpg)\n<!-- more -->\n\nLaravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。\n\n先以一个登陆日志来作为例子开始事件的学习吧。\n\n#### 注册事件 && 监听器\n\n在 app\\Providers\\EventServiceProvider.php 中，添加以下内容：\n```php\nprotected $listen = [\n    Registered::class => [\n        SendEmailVerificationNotification::class,\n    ],\n    'App\\Events\\LoginEvent' => [\n        'App\\Listeners\\LoginListener'\n    ]\n];\n```\n\n然后运行命令，生成事件和监听器：\n\n```php\nphp artisan event:generate\n```\n\n运行结束后，事件和监听器都会被自动创建好。\n![](laravel-events/new-event.png)\n\n在监听中打个 log： info('user login event')\n\n然后找个控制器触发事件。\n\n`event(new LoginEvent());`\n\n可以看到 log 文件中有一条新纪录：\n\n>[2019-03-27 08:16:21] local.INFO: user login event\n\n走到这里，理论上已经可以做很多事情了，但是对于登录日志来说，这样处理并不完美，因为 larave 内置已经写好了登录事件，只需要去调用就可以了。\n\n#### 改造事件\n在身份验证处理过程中 Laravel 引发了多种事件 。 \n可以在 EventServiceProvider 中附着这些事件的监听器。\n[文档](https://laravel.com/docs/5.8/authentication#events)\n\n```php\n/**\n * 应用的事件监听器映射。\n *\n * @var array\n */\nprotected $listen = [\n    'Illuminate\\Auth\\Events\\Registered' => [\n        'App\\Listeners\\LogRegisteredUser',\n    ],\n\n    'Illuminate\\Auth\\Events\\Attempting' => [\n        'App\\Listeners\\LogAuthenticationAttempt',\n    ],\n\n    'Illuminate\\Auth\\Events\\Authenticated' => [\n        'App\\Listeners\\LogAuthenticated',\n    ],\n\n    'Illuminate\\Auth\\Events\\Login' => [\n        'App\\Listeners\\LogSuccessfulLogin',\n    ],\n\n    'Illuminate\\Auth\\Events\\Failed' => [\n        'App\\Listeners\\LogFailedLogin',\n    ],\n\n    'Illuminate\\Auth\\Events\\Logout' => [\n        'App\\Listeners\\LogSuccessfulLogout',\n    ],\n\n    'Illuminate\\Auth\\Events\\Lockout' => [\n        'App\\Listeners\\LogLockout',\n    ],\n\n    'Illuminate\\Auth\\Events\\PasswordReset' => [\n        'App\\Listeners\\LogPasswordReset',\n    ],\n];\n```\n\n这里就只使用登录事件。\n修改 EventServiceProvider：\n\n```php\n'Illuminate\\Auth\\Events\\Login' => [\n    'App\\Listeners\\LoginListener'\n]\n```\n\n再改改 listener：\n```php\npublic function handle($guard) {\n    info('user login event', ['username'=>$guard->user->name]);\n    dd($guard);\n}\n```\n\n#### 触发事件\n退出帐号重新登录，可以看到以下内容：\n![输出结果](laravel-events/out.png)\n\n可以再优化一下：\n```php\npublic function handle($guard) {\n    $log = [\n        'name' => $guard->user->name,\n        'email'=> $guard->user->email,\n        'ip'=> \\Request::getClientIp(true),\n        'datetime' => Carbon::now()\n    ];\n    info('user login event', $log);\n}\n```\n\n这里可以选中用 log 存储还是用 mysql 存储。\n\n事件的学习就是这些了，平时开发要经常使用避免遗忘。","source":"_posts/laravel-events.md","raw":"---\ntitle: laravel 事件系统学习\ndate: 2019-04-03 23:00:00\ntags: laravel\ncategories: 南瓜\n---\n\n学习下 laravel 的事件系统。\n![](laravel-events/laravel.jpg)\n<!-- more -->\n\nLaravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。\n\n先以一个登陆日志来作为例子开始事件的学习吧。\n\n#### 注册事件 && 监听器\n\n在 app\\Providers\\EventServiceProvider.php 中，添加以下内容：\n```php\nprotected $listen = [\n    Registered::class => [\n        SendEmailVerificationNotification::class,\n    ],\n    'App\\Events\\LoginEvent' => [\n        'App\\Listeners\\LoginListener'\n    ]\n];\n```\n\n然后运行命令，生成事件和监听器：\n\n```php\nphp artisan event:generate\n```\n\n运行结束后，事件和监听器都会被自动创建好。\n![](laravel-events/new-event.png)\n\n在监听中打个 log： info('user login event')\n\n然后找个控制器触发事件。\n\n`event(new LoginEvent());`\n\n可以看到 log 文件中有一条新纪录：\n\n>[2019-03-27 08:16:21] local.INFO: user login event\n\n走到这里，理论上已经可以做很多事情了，但是对于登录日志来说，这样处理并不完美，因为 larave 内置已经写好了登录事件，只需要去调用就可以了。\n\n#### 改造事件\n在身份验证处理过程中 Laravel 引发了多种事件 。 \n可以在 EventServiceProvider 中附着这些事件的监听器。\n[文档](https://laravel.com/docs/5.8/authentication#events)\n\n```php\n/**\n * 应用的事件监听器映射。\n *\n * @var array\n */\nprotected $listen = [\n    'Illuminate\\Auth\\Events\\Registered' => [\n        'App\\Listeners\\LogRegisteredUser',\n    ],\n\n    'Illuminate\\Auth\\Events\\Attempting' => [\n        'App\\Listeners\\LogAuthenticationAttempt',\n    ],\n\n    'Illuminate\\Auth\\Events\\Authenticated' => [\n        'App\\Listeners\\LogAuthenticated',\n    ],\n\n    'Illuminate\\Auth\\Events\\Login' => [\n        'App\\Listeners\\LogSuccessfulLogin',\n    ],\n\n    'Illuminate\\Auth\\Events\\Failed' => [\n        'App\\Listeners\\LogFailedLogin',\n    ],\n\n    'Illuminate\\Auth\\Events\\Logout' => [\n        'App\\Listeners\\LogSuccessfulLogout',\n    ],\n\n    'Illuminate\\Auth\\Events\\Lockout' => [\n        'App\\Listeners\\LogLockout',\n    ],\n\n    'Illuminate\\Auth\\Events\\PasswordReset' => [\n        'App\\Listeners\\LogPasswordReset',\n    ],\n];\n```\n\n这里就只使用登录事件。\n修改 EventServiceProvider：\n\n```php\n'Illuminate\\Auth\\Events\\Login' => [\n    'App\\Listeners\\LoginListener'\n]\n```\n\n再改改 listener：\n```php\npublic function handle($guard) {\n    info('user login event', ['username'=>$guard->user->name]);\n    dd($guard);\n}\n```\n\n#### 触发事件\n退出帐号重新登录，可以看到以下内容：\n![输出结果](laravel-events/out.png)\n\n可以再优化一下：\n```php\npublic function handle($guard) {\n    $log = [\n        'name' => $guard->user->name,\n        'email'=> $guard->user->email,\n        'ip'=> \\Request::getClientIp(true),\n        'datetime' => Carbon::now()\n    ];\n    info('user login event', $log);\n}\n```\n\n这里可以选中用 log 存储还是用 mysql 存储。\n\n事件的学习就是这些了，平时开发要经常使用避免遗忘。","slug":"laravel-events","published":1,"updated":"2019-09-30T05:50:46.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m1r000d9sv78xzcivyf","content":"<p>学习下 laravel 的事件系统。<br><img src=\"/2019/04/03/laravel-events/laravel.jpg\" alt></p>\n<a id=\"more\"></a>\n\n<p>Laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。</p>\n<p>先以一个登陆日志来作为例子开始事件的学习吧。</p>\n<h4 id=\"注册事件-amp-amp-监听器\"><a href=\"#注册事件-amp-amp-监听器\" class=\"headerlink\" title=\"注册事件 &amp;&amp; 监听器\"></a>注册事件 &amp;&amp; 监听器</h4><p>在 app\\Providers\\EventServiceProvider.php 中，添加以下内容：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [</span><br><span class=\"line\">    Registered::class =&gt; [</span><br><span class=\"line\">        SendEmailVerificationNotification::class,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'App\\Events\\LoginEvent'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LoginListener'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令，生成事件和监听器：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan event:generate</span><br></pre></td></tr></table></figure>\n\n<p>运行结束后，事件和监听器都会被自动创建好。<br><img src=\"/2019/04/03/laravel-events/new-event.png\" alt></p>\n<p>在监听中打个 log： info(‘user login event’)</p>\n<p>然后找个控制器触发事件。</p>\n<p><code>event(new LoginEvent());</code></p>\n<p>可以看到 log 文件中有一条新纪录：</p>\n<blockquote>\n<p>[2019-03-27 08:16:21] local.INFO: user login event</p>\n</blockquote>\n<p>走到这里，理论上已经可以做很多事情了，但是对于登录日志来说，这样处理并不完美，因为 larave 内置已经写好了登录事件，只需要去调用就可以了。</p>\n<h4 id=\"改造事件\"><a href=\"#改造事件\" class=\"headerlink\" title=\"改造事件\"></a>改造事件</h4><p>在身份验证处理过程中 Laravel 引发了多种事件 。<br>可以在 EventServiceProvider 中附着这些事件的监听器。<br><a href=\"https://laravel.com/docs/5.8/authentication#events\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 应用的事件监听器映射。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [</span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Registered'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogRegisteredUser'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Attempting'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogAuthenticationAttempt'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Authenticated'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogAuthenticated'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Login'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogSuccessfulLogin'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Failed'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogFailedLogin'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Logout'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogSuccessfulLogout'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Lockout'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogLockout'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\PasswordReset'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogPasswordReset'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>这里就只使用登录事件。<br>修改 EventServiceProvider：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Illuminate\\Auth\\Events\\Login'</span> =&gt; [</span><br><span class=\"line\">    <span class=\"string\">'App\\Listeners\\LoginListener'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>再改改 listener：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($guard)</span> </span>&#123;</span><br><span class=\"line\">    info(<span class=\"string\">'user login event'</span>, [<span class=\"string\">'username'</span>=&gt;$guard-&gt;user-&gt;name]);</span><br><span class=\"line\">    dd($guard);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发事件\"><a href=\"#触发事件\" class=\"headerlink\" title=\"触发事件\"></a>触发事件</h4><p>退出帐号重新登录，可以看到以下内容：<br><img src=\"/2019/04/03/laravel-events/out.png\" alt=\"输出结果\"></p>\n<p>可以再优化一下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($guard)</span> </span>&#123;</span><br><span class=\"line\">    $log = [</span><br><span class=\"line\">        <span class=\"string\">'name'</span> =&gt; $guard-&gt;user-&gt;name,</span><br><span class=\"line\">        <span class=\"string\">'email'</span>=&gt; $guard-&gt;user-&gt;email,</span><br><span class=\"line\">        <span class=\"string\">'ip'</span>=&gt; \\Request::getClientIp(<span class=\"keyword\">true</span>),</span><br><span class=\"line\">        <span class=\"string\">'datetime'</span> =&gt; Carbon::now()</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    info(<span class=\"string\">'user login event'</span>, $log);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以选中用 log 存储还是用 mysql 存储。</p>\n<p>事件的学习就是这些了，平时开发要经常使用避免遗忘。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>学习下 laravel 的事件系统。<br><img src=\"/2019/04/03/laravel-events/laravel.jpg\" alt></p>","more":"<p>Laravel 的事件提供了一个简单的观察者实现，能够订阅和监听应用中发生的各种事件。</p>\n<p>先以一个登陆日志来作为例子开始事件的学习吧。</p>\n<h4 id=\"注册事件-amp-amp-监听器\"><a href=\"#注册事件-amp-amp-监听器\" class=\"headerlink\" title=\"注册事件 &amp;&amp; 监听器\"></a>注册事件 &amp;&amp; 监听器</h4><p>在 app\\Providers\\EventServiceProvider.php 中，添加以下内容：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [</span><br><span class=\"line\">    Registered::class =&gt; [</span><br><span class=\"line\">        SendEmailVerificationNotification::class,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'App\\Events\\LoginEvent'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LoginListener'</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>然后运行命令，生成事件和监听器：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan event:generate</span><br></pre></td></tr></table></figure>\n\n<p>运行结束后，事件和监听器都会被自动创建好。<br><img src=\"/2019/04/03/laravel-events/new-event.png\" alt></p>\n<p>在监听中打个 log： info(‘user login event’)</p>\n<p>然后找个控制器触发事件。</p>\n<p><code>event(new LoginEvent());</code></p>\n<p>可以看到 log 文件中有一条新纪录：</p>\n<blockquote>\n<p>[2019-03-27 08:16:21] local.INFO: user login event</p>\n</blockquote>\n<p>走到这里，理论上已经可以做很多事情了，但是对于登录日志来说，这样处理并不完美，因为 larave 内置已经写好了登录事件，只需要去调用就可以了。</p>\n<h4 id=\"改造事件\"><a href=\"#改造事件\" class=\"headerlink\" title=\"改造事件\"></a>改造事件</h4><p>在身份验证处理过程中 Laravel 引发了多种事件 。<br>可以在 EventServiceProvider 中附着这些事件的监听器。<br><a href=\"https://laravel.com/docs/5.8/authentication#events\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 应用的事件监听器映射。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@var</span> array</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> $listen = [</span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Registered'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogRegisteredUser'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Attempting'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogAuthenticationAttempt'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Authenticated'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogAuthenticated'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Login'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogSuccessfulLogin'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Failed'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogFailedLogin'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Logout'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogSuccessfulLogout'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\Lockout'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogLockout'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Illuminate\\Auth\\Events\\PasswordReset'</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">'App\\Listeners\\LogPasswordReset'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>这里就只使用登录事件。<br>修改 EventServiceProvider：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'Illuminate\\Auth\\Events\\Login'</span> =&gt; [</span><br><span class=\"line\">    <span class=\"string\">'App\\Listeners\\LoginListener'</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>再改改 listener：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($guard)</span> </span>&#123;</span><br><span class=\"line\">    info(<span class=\"string\">'user login event'</span>, [<span class=\"string\">'username'</span>=&gt;$guard-&gt;user-&gt;name]);</span><br><span class=\"line\">    dd($guard);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"触发事件\"><a href=\"#触发事件\" class=\"headerlink\" title=\"触发事件\"></a>触发事件</h4><p>退出帐号重新登录，可以看到以下内容：<br><img src=\"/2019/04/03/laravel-events/out.png\" alt=\"输出结果\"></p>\n<p>可以再优化一下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">($guard)</span> </span>&#123;</span><br><span class=\"line\">    $log = [</span><br><span class=\"line\">        <span class=\"string\">'name'</span> =&gt; $guard-&gt;user-&gt;name,</span><br><span class=\"line\">        <span class=\"string\">'email'</span>=&gt; $guard-&gt;user-&gt;email,</span><br><span class=\"line\">        <span class=\"string\">'ip'</span>=&gt; \\Request::getClientIp(<span class=\"keyword\">true</span>),</span><br><span class=\"line\">        <span class=\"string\">'datetime'</span> =&gt; Carbon::now()</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    info(<span class=\"string\">'user login event'</span>, $log);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以选中用 log 存储还是用 mysql 存储。</p>\n<p>事件的学习就是这些了，平时开发要经常使用避免遗忘。</p>"},{"title":"在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用","date":"2019-08-23T01:20:00.000Z","_content":"\n在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用。\n![](laravel-swoole-in-laradock/laradock.png)\n<!-- more -->\n\n#### 安装laravel-swoole\n```\ncomposer require swooletw/laravel-swoole\nphp artisan vendor:publish --tag=laravel-swoole\n```\n\n#### 开放 workspace 端口\n在 `laradock/workspace/Dockerfile` 最后添加一行：\n```\nEXPOSE 1215\n```\n\n然后重新 build workspace 容器。\n\n\n#### 修改 nginx 配置\n```\nupstream swoole-http {\n    server workspace:1215;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    listen 80;\n    listen [::]:80;\n\n    # For https\n    # listen 443 ssl;\n    # listen [::]:443 ssl ipv6only=on;\n    # ssl_certificate /etc/nginx/ssl/default.crt;\n    # ssl_certificate_key /etc/nginx/ssl/default.key;\n\n\n    server_name study.test;\n    root /var/www/laravel-learn/public;\n    index index.php index.html index.htm;\n\n    location = /index.php {\n            # Ensure that there is no such file named \"not_exists\"\n            # in your \"public\" directory.\n            try_files /not_exists @swoole;\n    }\n\n    location / {\n        try_files $uri $uri/ @swoole;\n    }\n\n    location @swoole {\n        set $suffix \"\";\n\n        if ($uri = /index.php) {\n            set $suffix \"/\";\n        }\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header SERVER_PORT $server_port;\n        proxy_set_header REMOTE_ADDR $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        # IF https\n        # proxy_set_header HTTPS \"on\";\n\n        charset utf-8;\n\n        proxy_pass http://swoole-http$suffix;\n    }\n}\n```\n\n然后重启 nginx\n\n#### 修改 laravel env\n```\nSWOOLE_HTTP_HOST=workspace\nSWOOLE_HTTP_DAEMONIZE=true\nSWOOLE_HOT_RELOAD_ENABLE=true\n```\n\n#### 启动 swoole\n```\nphp artisan swoole:http start | stop | restart | resload\n```\n\n# 开发环境热更新\n调整 swoole_http 中 `max_request = 1`\n","source":"_posts/laravel-swoole-in-laradock.md","raw":"---\ntitle: 在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用\ndate: 2019-08-23 09:20:00\ntags: [laravel, swoole, docker]\ncategories: 南瓜\n---\n\n在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用。\n![](laravel-swoole-in-laradock/laradock.png)\n<!-- more -->\n\n#### 安装laravel-swoole\n```\ncomposer require swooletw/laravel-swoole\nphp artisan vendor:publish --tag=laravel-swoole\n```\n\n#### 开放 workspace 端口\n在 `laradock/workspace/Dockerfile` 最后添加一行：\n```\nEXPOSE 1215\n```\n\n然后重新 build workspace 容器。\n\n\n#### 修改 nginx 配置\n```\nupstream swoole-http {\n    server workspace:1215;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    ''      close;\n}\n\nserver {\n\n    listen 80;\n    listen [::]:80;\n\n    # For https\n    # listen 443 ssl;\n    # listen [::]:443 ssl ipv6only=on;\n    # ssl_certificate /etc/nginx/ssl/default.crt;\n    # ssl_certificate_key /etc/nginx/ssl/default.key;\n\n\n    server_name study.test;\n    root /var/www/laravel-learn/public;\n    index index.php index.html index.htm;\n\n    location = /index.php {\n            # Ensure that there is no such file named \"not_exists\"\n            # in your \"public\" directory.\n            try_files /not_exists @swoole;\n    }\n\n    location / {\n        try_files $uri $uri/ @swoole;\n    }\n\n    location @swoole {\n        set $suffix \"\";\n\n        if ($uri = /index.php) {\n            set $suffix \"/\";\n        }\n        proxy_set_header Host $http_host;\n        proxy_set_header Scheme $scheme;\n        proxy_set_header SERVER_PORT $server_port;\n        proxy_set_header REMOTE_ADDR $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        # IF https\n        # proxy_set_header HTTPS \"on\";\n\n        charset utf-8;\n\n        proxy_pass http://swoole-http$suffix;\n    }\n}\n```\n\n然后重启 nginx\n\n#### 修改 laravel env\n```\nSWOOLE_HTTP_HOST=workspace\nSWOOLE_HTTP_DAEMONIZE=true\nSWOOLE_HOT_RELOAD_ENABLE=true\n```\n\n#### 启动 swoole\n```\nphp artisan swoole:http start | stop | restart | resload\n```\n\n# 开发环境热更新\n调整 swoole_http 中 `max_request = 1`\n","slug":"laravel-swoole-in-laradock","published":1,"updated":"2019-09-30T05:50:53.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m1w000g9sv7gp6wsup7","content":"<p>在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用。<br><img src=\"/2019/08/23/laravel-swoole-in-laradock/laradock.png\" alt></p>\n<a id=\"more\"></a>\n\n<h4 id=\"安装laravel-swoole\"><a href=\"#安装laravel-swoole\" class=\"headerlink\" title=\"安装laravel-swoole\"></a>安装laravel-swoole</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require swooletw/laravel-swoole</span><br><span class=\"line\">php artisan vendor:publish --tag=laravel-swoole</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放-workspace-端口\"><a href=\"#开放-workspace-端口\" class=\"headerlink\" title=\"开放 workspace 端口\"></a>开放 workspace 端口</h4><p>在 <code>laradock/workspace/Dockerfile</code> 最后添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE 1215</span><br></pre></td></tr></table></figure>\n\n<p>然后重新 build workspace 容器。</p>\n<h4 id=\"修改-nginx-配置\"><a href=\"#修改-nginx-配置\" class=\"headerlink\" title=\"修改 nginx 配置\"></a>修改 nginx 配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream swoole-http &#123;</span><br><span class=\"line\">    server workspace:1215;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos;      close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # For https</span><br><span class=\"line\">    # listen 443 ssl;</span><br><span class=\"line\">    # listen [::]:443 ssl ipv6only=on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/default.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/default.key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server_name study.test;</span><br><span class=\"line\">    root /var/www/laravel-learn/public;</span><br><span class=\"line\">    index index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /index.php &#123;</span><br><span class=\"line\">            # Ensure that there is no such file named &quot;not_exists&quot;</span><br><span class=\"line\">            # in your &quot;public&quot; directory.</span><br><span class=\"line\">            try_files /not_exists @swoole;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ @swoole;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location @swoole &#123;</span><br><span class=\"line\">        set $suffix &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ($uri = /index.php) &#123;</span><br><span class=\"line\">            set $suffix &quot;/&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header Scheme $scheme;</span><br><span class=\"line\">        proxy_set_header SERVER_PORT $server_port;</span><br><span class=\"line\">        proxy_set_header REMOTE_ADDR $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        # IF https</span><br><span class=\"line\">        # proxy_set_header HTTPS &quot;on&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://swoole-http$suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重启 nginx</p>\n<h4 id=\"修改-laravel-env\"><a href=\"#修改-laravel-env\" class=\"headerlink\" title=\"修改 laravel env\"></a>修改 laravel env</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SWOOLE_HTTP_HOST=workspace</span><br><span class=\"line\">SWOOLE_HTTP_DAEMONIZE=true</span><br><span class=\"line\">SWOOLE_HOT_RELOAD_ENABLE=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-swoole\"><a href=\"#启动-swoole\" class=\"headerlink\" title=\"启动 swoole\"></a>启动 swoole</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan swoole:http start | stop | restart | resload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开发环境热更新\"><a href=\"#开发环境热更新\" class=\"headerlink\" title=\"开发环境热更新\"></a>开发环境热更新</h1><p>调整 swoole_http 中 <code>max_request = 1</code></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用。<br><img src=\"/2019/08/23/laravel-swoole-in-laradock/laradock.png\" alt></p>","more":"<h4 id=\"安装laravel-swoole\"><a href=\"#安装laravel-swoole\" class=\"headerlink\" title=\"安装laravel-swoole\"></a>安装laravel-swoole</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require swooletw/laravel-swoole</span><br><span class=\"line\">php artisan vendor:publish --tag=laravel-swoole</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开放-workspace-端口\"><a href=\"#开放-workspace-端口\" class=\"headerlink\" title=\"开放 workspace 端口\"></a>开放 workspace 端口</h4><p>在 <code>laradock/workspace/Dockerfile</code> 最后添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPOSE 1215</span><br></pre></td></tr></table></figure>\n\n<p>然后重新 build workspace 容器。</p>\n<h4 id=\"修改-nginx-配置\"><a href=\"#修改-nginx-配置\" class=\"headerlink\" title=\"修改 nginx 配置\"></a>修改 nginx 配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream swoole-http &#123;</span><br><span class=\"line\">    server workspace:1215;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">map $http_upgrade $connection_upgrade &#123;</span><br><span class=\"line\">    default upgrade;</span><br><span class=\"line\">    &apos;&apos;      close;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    listen [::]:80;</span><br><span class=\"line\"></span><br><span class=\"line\">    # For https</span><br><span class=\"line\">    # listen 443 ssl;</span><br><span class=\"line\">    # listen [::]:443 ssl ipv6only=on;</span><br><span class=\"line\">    # ssl_certificate /etc/nginx/ssl/default.crt;</span><br><span class=\"line\">    # ssl_certificate_key /etc/nginx/ssl/default.key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    server_name study.test;</span><br><span class=\"line\">    root /var/www/laravel-learn/public;</span><br><span class=\"line\">    index index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    location = /index.php &#123;</span><br><span class=\"line\">            # Ensure that there is no such file named &quot;not_exists&quot;</span><br><span class=\"line\">            # in your &quot;public&quot; directory.</span><br><span class=\"line\">            try_files /not_exists @swoole;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        try_files $uri $uri/ @swoole;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location @swoole &#123;</span><br><span class=\"line\">        set $suffix &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        if ($uri = /index.php) &#123;</span><br><span class=\"line\">            set $suffix &quot;/&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        proxy_set_header Host $http_host;</span><br><span class=\"line\">        proxy_set_header Scheme $scheme;</span><br><span class=\"line\">        proxy_set_header SERVER_PORT $server_port;</span><br><span class=\"line\">        proxy_set_header REMOTE_ADDR $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection $connection_upgrade;</span><br><span class=\"line\"></span><br><span class=\"line\">        # IF https</span><br><span class=\"line\">        # proxy_set_header HTTPS &quot;on&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy_pass http://swoole-http$suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重启 nginx</p>\n<h4 id=\"修改-laravel-env\"><a href=\"#修改-laravel-env\" class=\"headerlink\" title=\"修改 laravel env\"></a>修改 laravel env</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SWOOLE_HTTP_HOST=workspace</span><br><span class=\"line\">SWOOLE_HTTP_DAEMONIZE=true</span><br><span class=\"line\">SWOOLE_HOT_RELOAD_ENABLE=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动-swoole\"><a href=\"#启动-swoole\" class=\"headerlink\" title=\"启动 swoole\"></a>启动 swoole</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan swoole:http start | stop | restart | resload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开发环境热更新\"><a href=\"#开发环境热更新\" class=\"headerlink\" title=\"开发环境热更新\"></a>开发环境热更新</h1><p>调整 swoole_http 中 <code>max_request = 1</code></p>"},{"title":"Hello World","date":"2018-02-13T10:44:28.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n```csharp\npublic void SanHa()\n{\n    private int id;\n    private string name;\n}\n```","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-02-13 18:44:28\ntags: test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n```csharp\npublic void SanHa()\n{\n    private int id;\n    private string name;\n}\n```","slug":"hello-world","published":1,"updated":"2019-08-30T06:32:42.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m20000h9sv7axlp8zjo","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SanHa</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SanHa</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用 laravel mix 编译资源","date":"2019-03-15T15:00:00.000Z","_content":"\n学习下如何在 laravel 框架中，用 laravel mix 编译前端资源。\n\n![](laravel-mix/laravel-mix.png)\n<!-- more -->\n\n#### 使用\n本次操作的环境依然是 laradock，如果没用特殊说明，以后应该默认 laradock。\n\nworkspace 容器中，已经提前装好了 node 环境，而在项目根目录中，package.json 和 webpack.mix.js 也已经为我们预设好了，所以laravel 项目建好后，直接在根目录安装即可：\n```bash\nnpm install\n```\n\n在 webpack.mix.js 中，已经加载了两个默认的文件：\n```javascript\nmix.js('resources/js/app.js', 'public/js')\n   .sass('resources/sass/app.scss', 'public/css');\n```\n\n我们只需要把自己的资源文件，按照同样的格式写入进去，然后开始运行，就可以生成编译后的资源了。\n\n虽然示例中只写了 sass 一种样式文件，但是其实可以支持常见的以及不常见的很多中格式，只需要调用对应的接口即可。而且还可以把多个资源文件合并成一个。\n\n举个🌰：\n```javascript\nmix.less('resources/assets/less/app.less', 'public/stylesheets/styles.css');\n\nmix.styles([\n    'public/css/vendor/normalize.css',\n    'public/css/vendor/videojs.css'\n], 'public/css/all.css');\n```\n\n#### 运行\n```bash\nnpm run dev\nnpm run watch\n```\n在上一篇中，我们修改视图后使之生效的命令，其实就是通知 mix 开始工作的。\n\n#### 单独使用\n在 laravel 框架之外也是可以使用 mix 的，具体教程请参考 [[ learnku ]](https://learnku.com/docs/laravel-mix/4.0)\n\n其实不难，挺简单的。😎","source":"_posts/laravel-mix.md","raw":"---\ntitle: 使用 laravel mix 编译资源\ndate: 2019-03-15 23:00:00\ntags: laravel\ncategories: 南瓜\n---\n\n学习下如何在 laravel 框架中，用 laravel mix 编译前端资源。\n\n![](laravel-mix/laravel-mix.png)\n<!-- more -->\n\n#### 使用\n本次操作的环境依然是 laradock，如果没用特殊说明，以后应该默认 laradock。\n\nworkspace 容器中，已经提前装好了 node 环境，而在项目根目录中，package.json 和 webpack.mix.js 也已经为我们预设好了，所以laravel 项目建好后，直接在根目录安装即可：\n```bash\nnpm install\n```\n\n在 webpack.mix.js 中，已经加载了两个默认的文件：\n```javascript\nmix.js('resources/js/app.js', 'public/js')\n   .sass('resources/sass/app.scss', 'public/css');\n```\n\n我们只需要把自己的资源文件，按照同样的格式写入进去，然后开始运行，就可以生成编译后的资源了。\n\n虽然示例中只写了 sass 一种样式文件，但是其实可以支持常见的以及不常见的很多中格式，只需要调用对应的接口即可。而且还可以把多个资源文件合并成一个。\n\n举个🌰：\n```javascript\nmix.less('resources/assets/less/app.less', 'public/stylesheets/styles.css');\n\nmix.styles([\n    'public/css/vendor/normalize.css',\n    'public/css/vendor/videojs.css'\n], 'public/css/all.css');\n```\n\n#### 运行\n```bash\nnpm run dev\nnpm run watch\n```\n在上一篇中，我们修改视图后使之生效的命令，其实就是通知 mix 开始工作的。\n\n#### 单独使用\n在 laravel 框架之外也是可以使用 mix 的，具体教程请参考 [[ learnku ]](https://learnku.com/docs/laravel-mix/4.0)\n\n其实不难，挺简单的。😎","slug":"laravel-mix","published":1,"updated":"2019-09-30T05:50:48.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m22000i9sv7hiueiqcs","content":"<p>学习下如何在 laravel 框架中，用 laravel mix 编译前端资源。</p>\n<p><img src=\"/2019/03/15/laravel-mix/laravel-mix.png\" alt></p>\n<a id=\"more\"></a>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>本次操作的环境依然是 laradock，如果没用特殊说明，以后应该默认 laradock。</p>\n<p>workspace 容器中，已经提前装好了 node 环境，而在项目根目录中，package.json 和 webpack.mix.js 也已经为我们预设好了，所以laravel 项目建好后，直接在根目录安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>在 webpack.mix.js 中，已经加载了两个默认的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mix.js(<span class=\"string\">'resources/js/app.js'</span>, <span class=\"string\">'public/js'</span>)</span><br><span class=\"line\">   .sass(<span class=\"string\">'resources/sass/app.scss'</span>, <span class=\"string\">'public/css'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要把自己的资源文件，按照同样的格式写入进去，然后开始运行，就可以生成编译后的资源了。</p>\n<p>虽然示例中只写了 sass 一种样式文件，但是其实可以支持常见的以及不常见的很多中格式，只需要调用对应的接口即可。而且还可以把多个资源文件合并成一个。</p>\n<p>举个🌰：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mix.less(<span class=\"string\">'resources/assets/less/app.less'</span>, <span class=\"string\">'public/stylesheets/styles.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mix.styles([</span><br><span class=\"line\">    <span class=\"string\">'public/css/vendor/normalize.css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'public/css/vendor/videojs.css'</span></span><br><span class=\"line\">], <span class=\"string\">'public/css/all.css'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run watch</span><br></pre></td></tr></table></figure>\n\n<p>在上一篇中，我们修改视图后使之生效的命令，其实就是通知 mix 开始工作的。</p>\n<h4 id=\"单独使用\"><a href=\"#单独使用\" class=\"headerlink\" title=\"单独使用\"></a>单独使用</h4><p>在 laravel 框架之外也是可以使用 mix 的，具体教程请参考 <a href=\"https://learnku.com/docs/laravel-mix/4.0\" target=\"_blank\" rel=\"noopener\">[ learnku ]</a></p>\n<p>其实不难，挺简单的。😎</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>学习下如何在 laravel 框架中，用 laravel mix 编译前端资源。</p>\n<p><img src=\"/2019/03/15/laravel-mix/laravel-mix.png\" alt></p>","more":"<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>本次操作的环境依然是 laradock，如果没用特殊说明，以后应该默认 laradock。</p>\n<p>workspace 容器中，已经提前装好了 node 环境，而在项目根目录中，package.json 和 webpack.mix.js 也已经为我们预设好了，所以laravel 项目建好后，直接在根目录安装即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>在 webpack.mix.js 中，已经加载了两个默认的文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mix.js(<span class=\"string\">'resources/js/app.js'</span>, <span class=\"string\">'public/js'</span>)</span><br><span class=\"line\">   .sass(<span class=\"string\">'resources/sass/app.scss'</span>, <span class=\"string\">'public/css'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>我们只需要把自己的资源文件，按照同样的格式写入进去，然后开始运行，就可以生成编译后的资源了。</p>\n<p>虽然示例中只写了 sass 一种样式文件，但是其实可以支持常见的以及不常见的很多中格式，只需要调用对应的接口即可。而且还可以把多个资源文件合并成一个。</p>\n<p>举个🌰：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mix.less(<span class=\"string\">'resources/assets/less/app.less'</span>, <span class=\"string\">'public/stylesheets/styles.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mix.styles([</span><br><span class=\"line\">    <span class=\"string\">'public/css/vendor/normalize.css'</span>,</span><br><span class=\"line\">    <span class=\"string\">'public/css/vendor/videojs.css'</span></span><br><span class=\"line\">], <span class=\"string\">'public/css/all.css'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run watch</span><br></pre></td></tr></table></figure>\n\n<p>在上一篇中，我们修改视图后使之生效的命令，其实就是通知 mix 开始工作的。</p>\n<h4 id=\"单独使用\"><a href=\"#单独使用\" class=\"headerlink\" title=\"单独使用\"></a>单独使用</h4><p>在 laravel 框架之外也是可以使用 mix 的，具体教程请参考 <a href=\"https://learnku.com/docs/laravel-mix/4.0\" target=\"_blank\" rel=\"noopener\">[ learnku ]</a></p>\n<p>其实不难，挺简单的。😎</p>"},{"title":"在 laravel vue 中使用 svg 图标","date":"2019-10-28T13:21:59.000Z","_content":"\n#### 安装扩展组件：\n```\nnpm install laravel-mix-svg-vue\nor\nyarn add laravel-mix-svg-vue\n```\n\n#### 在 webpack.mix.js 中添加引用：\n```\nconst mix = require('laravel-mix');\nrequire('laravel-mix-svg-vue');\n\nmix.js('resources/js/app.js', 'public/js')\n    .svgVue();\n```\n\n#### 在 app.js 中引用组件\n```\nimport Vue from 'vue';\nimport SvgVue from 'svg-vue';\n\nVue.use(SvgVue);\n```\n\n#### svg 使用：\n```\n<svg-vue icon=\"avatar\"></svg-vue>\n```\n\n#### 默认配置\n```\n{\n    svgPath: 'resources/svg',\n    extract: false,\n    svgoSettings: [\n        { removeTitle: true },\n        { removeViewBox: false },\n        { removeDimensions: true }\n    ]\n}\n```\n\n\n参数 | 类型 | 默认值| 说明\n----  | ----    | -----   | ----\nsvgPath | String | resources/svg | svg 图标路径\nextract | Boolean | false |  将 svg 与主包分离\nsvgoSettings | Array | [{ removeTitle: true }, { removeViewBox: false }, { removeDimensions: true }] | svgo 相关设置\n\n#### 缺点\n好像是不能通过参数动态改变 svg 内容，没试出来，不知道什么原因。\n","source":"_posts/laravel-vue-svg.md","raw":"---\ntitle: 在 laravel vue 中使用 svg 图标\ndate: 2019-10-28 21:21:59\ntags: laravel\ncategories: 南瓜\n---\n\n#### 安装扩展组件：\n```\nnpm install laravel-mix-svg-vue\nor\nyarn add laravel-mix-svg-vue\n```\n\n#### 在 webpack.mix.js 中添加引用：\n```\nconst mix = require('laravel-mix');\nrequire('laravel-mix-svg-vue');\n\nmix.js('resources/js/app.js', 'public/js')\n    .svgVue();\n```\n\n#### 在 app.js 中引用组件\n```\nimport Vue from 'vue';\nimport SvgVue from 'svg-vue';\n\nVue.use(SvgVue);\n```\n\n#### svg 使用：\n```\n<svg-vue icon=\"avatar\"></svg-vue>\n```\n\n#### 默认配置\n```\n{\n    svgPath: 'resources/svg',\n    extract: false,\n    svgoSettings: [\n        { removeTitle: true },\n        { removeViewBox: false },\n        { removeDimensions: true }\n    ]\n}\n```\n\n\n参数 | 类型 | 默认值| 说明\n----  | ----    | -----   | ----\nsvgPath | String | resources/svg | svg 图标路径\nextract | Boolean | false |  将 svg 与主包分离\nsvgoSettings | Array | [{ removeTitle: true }, { removeViewBox: false }, { removeDimensions: true }] | svgo 相关设置\n\n#### 缺点\n好像是不能通过参数动态改变 svg 内容，没试出来，不知道什么原因。\n","slug":"laravel-vue-svg","published":1,"updated":"2019-10-29T02:25:58.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m25000m9sv7hl15y81v","content":"<h4 id=\"安装扩展组件：\"><a href=\"#安装扩展组件：\" class=\"headerlink\" title=\"安装扩展组件：\"></a>安装扩展组件：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install laravel-mix-svg-vue</span><br><span class=\"line\">or</span><br><span class=\"line\">yarn add laravel-mix-svg-vue</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-webpack-mix-js-中添加引用：\"><a href=\"#在-webpack-mix-js-中添加引用：\" class=\"headerlink\" title=\"在 webpack.mix.js 中添加引用：\"></a>在 webpack.mix.js 中添加引用：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mix = require(&apos;laravel-mix&apos;);</span><br><span class=\"line\">require(&apos;laravel-mix-svg-vue&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mix.js(&apos;resources/js/app.js&apos;, &apos;public/js&apos;)</span><br><span class=\"line\">    .svgVue();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-app-js-中引用组件\"><a href=\"#在-app-js-中引用组件\" class=\"headerlink\" title=\"在 app.js 中引用组件\"></a>在 app.js 中引用组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">import SvgVue from &apos;svg-vue&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(SvgVue);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"svg-使用：\"><a href=\"#svg-使用：\" class=\"headerlink\" title=\"svg 使用：\"></a>svg 使用：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg-vue icon=&quot;avatar&quot;&gt;&lt;/svg-vue&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    svgPath: &apos;resources/svg&apos;,</span><br><span class=\"line\">    extract: false,</span><br><span class=\"line\">    svgoSettings: [</span><br><span class=\"line\">        &#123; removeTitle: true &#125;,</span><br><span class=\"line\">        &#123; removeViewBox: false &#125;,</span><br><span class=\"line\">        &#123; removeDimensions: true &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>svgPath</td>\n<td>String</td>\n<td>resources/svg</td>\n<td>svg 图标路径</td>\n</tr>\n<tr>\n<td>extract</td>\n<td>Boolean</td>\n<td>false</td>\n<td>将 svg 与主包分离</td>\n</tr>\n<tr>\n<td>svgoSettings</td>\n<td>Array</td>\n<td>[{ removeTitle: true }, { removeViewBox: false }, { removeDimensions: true }]</td>\n<td>svgo 相关设置</td>\n</tr>\n</tbody></table>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>好像是不能通过参数动态改变 svg 内容，没试出来，不知道什么原因。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h4 id=\"安装扩展组件：\"><a href=\"#安装扩展组件：\" class=\"headerlink\" title=\"安装扩展组件：\"></a>安装扩展组件：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install laravel-mix-svg-vue</span><br><span class=\"line\">or</span><br><span class=\"line\">yarn add laravel-mix-svg-vue</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-webpack-mix-js-中添加引用：\"><a href=\"#在-webpack-mix-js-中添加引用：\" class=\"headerlink\" title=\"在 webpack.mix.js 中添加引用：\"></a>在 webpack.mix.js 中添加引用：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mix = require(&apos;laravel-mix&apos;);</span><br><span class=\"line\">require(&apos;laravel-mix-svg-vue&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">mix.js(&apos;resources/js/app.js&apos;, &apos;public/js&apos;)</span><br><span class=\"line\">    .svgVue();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在-app-js-中引用组件\"><a href=\"#在-app-js-中引用组件\" class=\"headerlink\" title=\"在 app.js 中引用组件\"></a>在 app.js 中引用组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;;</span><br><span class=\"line\">import SvgVue from &apos;svg-vue&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(SvgVue);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"svg-使用：\"><a href=\"#svg-使用：\" class=\"headerlink\" title=\"svg 使用：\"></a>svg 使用：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;svg-vue icon=&quot;avatar&quot;&gt;&lt;/svg-vue&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    svgPath: &apos;resources/svg&apos;,</span><br><span class=\"line\">    extract: false,</span><br><span class=\"line\">    svgoSettings: [</span><br><span class=\"line\">        &#123; removeTitle: true &#125;,</span><br><span class=\"line\">        &#123; removeViewBox: false &#125;,</span><br><span class=\"line\">        &#123; removeDimensions: true &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>svgPath</td>\n<td>String</td>\n<td>resources/svg</td>\n<td>svg 图标路径</td>\n</tr>\n<tr>\n<td>extract</td>\n<td>Boolean</td>\n<td>false</td>\n<td>将 svg 与主包分离</td>\n</tr>\n<tr>\n<td>svgoSettings</td>\n<td>Array</td>\n<td>[{ removeTitle: true }, { removeViewBox: false }, { removeDimensions: true }]</td>\n<td>svgo 相关设置</td>\n</tr>\n</tbody></table>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>好像是不能通过参数动态改变 svg 内容，没试出来，不知道什么原因。</p>\n"},{"title":"在 laradock 环境中使用 laravel-swoole 的 websocket","date":"2019-10-12T07:24:36.000Z","_content":"之前写了一篇 [在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用](https://www.m-finder.com/2019/08/23/laravel-swoole-in-laradock/) 的博客，算是敲开了 laravel-swoole 的大门，今天就继续研究下期中的 websocket 功能。\n\n![](laravel-swoole-in-laradock/laradock.png)\n<!-- more -->\n\n#### 安装 laravel-swoole\n这里就不写了，参考上篇。\n\n#### 配置 socket\n编辑 laravel  env 文件，写入如下一行：\n```env\nSWOOLE_HTTP_WEBSOCKET=true\n```\n\n然后执行 `php artisan swoole:http infos` 查看状态\n```shell\n+-----------------+-----------------------------------------------------+\n| Name            | Value                                               |\n+-----------------+-----------------------------------------------------+\n| PHP Version     | 7.2.21-1+ubuntu16.04.1+deb.sury.org+1               |\n| Swoole Version  | 4.4.4                                               |\n| Laravel Version | 5.8.33                                              |\n| Listen IP       | workspace                                           |\n| Listen Port     | 1215                                                |\n| Server Status   | Online                                              |\n| Reactor Num     | 2                                                   |\n| Worker Num      | 2                                                   |\n| Task Worker Num | 2                                                   |\n| Websocket Mode  | On                                                  |\n| Master PID      | 326                                                 |\n| Manager PID     | 327                                                 |\n| Log Path        | /var/www/laravel-learn/storage/logs/swoole_http.log |\n+-----------------+-----------------------------------------------------+\n```\n\n可以看到 `Websocket Mode` 一项已经打开了。\n#### 编辑 socket 路由\n在 `routes/websocket.php` 中:\n```php\nWebsocket::on('connect', function ($websocket, Request $request) {\n    // called while socket on connect\n    $websocket->emit('message', 'welcome');\n});\n\nWebsocket::on('disconnect', function ($websocket) {\n    // called while socket on disconnect\n    $websocket->emit('message', 'server is gone, bye~');\n});\n\nWebsocket::on('example', function ($websocket, $data) {\n    $websocket->emit('message', $data);\n});\n\n```\n此文件修改后需要重启 `swoole:http`。\n\n#### 前端连接 socket\n因为 laravel-swoole 使用的是 `Socket.io`，所以这里也采用这个。\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script>\n<script type=\"text/javascript\">\n    var socket = io('http://study.test:8080/', {transports: ['websocket'], reconnection: true});\n\n    socket.on('connect', function () {\n        socket.emit('example', 'hi');\n\n        socket.on('disconnect', function () {\n            console.log('disconnect');\n        });\n\n        socket.on('message', function (msg) {\n            console.log(msg)\n        });\n    });\n</script>\n```\n\n#### 配置 nginx\n如果你用的 swoole 版本为 ` 4.4.4`，那么还需要对上篇文章中的 nginx 配置做个小修改，即添加一行：\n```\n proxy_http_version 1.1;\n```\n\n完整配置就不贴了，把这一行加在 `proxy_pass http://swoole-http$suffix;` 这一行前后都行。\n\n如果没有这一行的话，而且怎么也没反应的话，记得去 log 中找具体报错。\n\nemmm，文档没写，在 issue 里扒出来的……\n\n![演示](laravel-swoole-socket-in-laradock/demo.png)\n","source":"_posts/laravel-swoole-socket-in-laradock.md","raw":"---\ntitle: 在 laradock 环境中使用 laravel-swoole 的 websocket\ndate: 2019-10-12 15:24:36\ntags: [laravel, swoole, docker]\ncategories: 南瓜\n---\n之前写了一篇 [在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用](https://www.m-finder.com/2019/08/23/laravel-swoole-in-laradock/) 的博客，算是敲开了 laravel-swoole 的大门，今天就继续研究下期中的 websocket 功能。\n\n![](laravel-swoole-in-laradock/laradock.png)\n<!-- more -->\n\n#### 安装 laravel-swoole\n这里就不写了，参考上篇。\n\n#### 配置 socket\n编辑 laravel  env 文件，写入如下一行：\n```env\nSWOOLE_HTTP_WEBSOCKET=true\n```\n\n然后执行 `php artisan swoole:http infos` 查看状态\n```shell\n+-----------------+-----------------------------------------------------+\n| Name            | Value                                               |\n+-----------------+-----------------------------------------------------+\n| PHP Version     | 7.2.21-1+ubuntu16.04.1+deb.sury.org+1               |\n| Swoole Version  | 4.4.4                                               |\n| Laravel Version | 5.8.33                                              |\n| Listen IP       | workspace                                           |\n| Listen Port     | 1215                                                |\n| Server Status   | Online                                              |\n| Reactor Num     | 2                                                   |\n| Worker Num      | 2                                                   |\n| Task Worker Num | 2                                                   |\n| Websocket Mode  | On                                                  |\n| Master PID      | 326                                                 |\n| Manager PID     | 327                                                 |\n| Log Path        | /var/www/laravel-learn/storage/logs/swoole_http.log |\n+-----------------+-----------------------------------------------------+\n```\n\n可以看到 `Websocket Mode` 一项已经打开了。\n#### 编辑 socket 路由\n在 `routes/websocket.php` 中:\n```php\nWebsocket::on('connect', function ($websocket, Request $request) {\n    // called while socket on connect\n    $websocket->emit('message', 'welcome');\n});\n\nWebsocket::on('disconnect', function ($websocket) {\n    // called while socket on disconnect\n    $websocket->emit('message', 'server is gone, bye~');\n});\n\nWebsocket::on('example', function ($websocket, $data) {\n    $websocket->emit('message', $data);\n});\n\n```\n此文件修改后需要重启 `swoole:http`。\n\n#### 前端连接 socket\n因为 laravel-swoole 使用的是 `Socket.io`，所以这里也采用这个。\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"></script>\n<script type=\"text/javascript\">\n    var socket = io('http://study.test:8080/', {transports: ['websocket'], reconnection: true});\n\n    socket.on('connect', function () {\n        socket.emit('example', 'hi');\n\n        socket.on('disconnect', function () {\n            console.log('disconnect');\n        });\n\n        socket.on('message', function (msg) {\n            console.log(msg)\n        });\n    });\n</script>\n```\n\n#### 配置 nginx\n如果你用的 swoole 版本为 ` 4.4.4`，那么还需要对上篇文章中的 nginx 配置做个小修改，即添加一行：\n```\n proxy_http_version 1.1;\n```\n\n完整配置就不贴了，把这一行加在 `proxy_pass http://swoole-http$suffix;` 这一行前后都行。\n\n如果没有这一行的话，而且怎么也没反应的话，记得去 log 中找具体报错。\n\nemmm，文档没写，在 issue 里扒出来的……\n\n![演示](laravel-swoole-socket-in-laradock/demo.png)\n","slug":"laravel-swoole-socket-in-laradock","published":1,"updated":"2019-11-01T07:28:42.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m27000o9sv701f9th0x","content":"<p>之前写了一篇 <a href=\"https://www.m-finder.com/2019/08/23/laravel-swoole-in-laradock/\" target=\"_blank\" rel=\"noopener\">在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用</a> 的博客，算是敲开了 laravel-swoole 的大门，今天就继续研究下期中的 websocket 功能。</p>\n<p><img src=\"/2019/10/12/laravel-swoole-socket-in-laradock/laradock.png\" alt></p>\n<a id=\"more\"></a>\n\n<h4 id=\"安装-laravel-swoole\"><a href=\"#安装-laravel-swoole\" class=\"headerlink\" title=\"安装 laravel-swoole\"></a>安装 laravel-swoole</h4><p>这里就不写了，参考上篇。</p>\n<h4 id=\"配置-socket\"><a href=\"#配置-socket\" class=\"headerlink\" title=\"配置 socket\"></a>配置 socket</h4><p>编辑 laravel  env 文件，写入如下一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SWOOLE_HTTP_WEBSOCKET=true</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>php artisan swoole:http infos</code> 查看状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br><span class=\"line\">| Name            | Value                                               |</span><br><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br><span class=\"line\">| PHP Version     | 7.2.21-1+ubuntu16.04.1+deb.sury.org+1               |</span><br><span class=\"line\">| Swoole Version  | 4.4.4                                               |</span><br><span class=\"line\">| Laravel Version | 5.8.33                                              |</span><br><span class=\"line\">| Listen IP       | workspace                                           |</span><br><span class=\"line\">| Listen Port     | 1215                                                |</span><br><span class=\"line\">| Server Status   | Online                                              |</span><br><span class=\"line\">| Reactor Num     | 2                                                   |</span><br><span class=\"line\">| Worker Num      | 2                                                   |</span><br><span class=\"line\">| Task Worker Num | 2                                                   |</span><br><span class=\"line\">| Websocket Mode  | On                                                  |</span><br><span class=\"line\">| Master PID      | 326                                                 |</span><br><span class=\"line\">| Manager PID     | 327                                                 |</span><br><span class=\"line\">| Log Path        | /var/www/laravel-learn/storage/logs/swoole_http.log |</span><br><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>Websocket Mode</code> 一项已经打开了。</p>\n<h4 id=\"编辑-socket-路由\"><a href=\"#编辑-socket-路由\" class=\"headerlink\" title=\"编辑 socket 路由\"></a>编辑 socket 路由</h4><p>在 <code>routes/websocket.php</code> 中:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Websocket::on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket, Request $request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// called while socket on connect</span></span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, <span class=\"string\">'welcome'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Websocket::on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// called while socket on disconnect</span></span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, <span class=\"string\">'server is gone, bye~'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Websocket::on(<span class=\"string\">'example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket, $data)</span> </span>&#123;</span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, $data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此文件修改后需要重启 <code>swoole:http</code>。</p>\n<h4 id=\"前端连接-socket\"><a href=\"#前端连接-socket\" class=\"headerlink\" title=\"前端连接 socket\"></a>前端连接 socket</h4><p>因为 laravel-swoole 使用的是 <code>Socket.io</code>，所以这里也采用这个。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> socket = io(<span class=\"string\">'http://study.test:8080/'</span>, &#123;<span class=\"attr\">transports</span>: [<span class=\"string\">'websocket'</span>], <span class=\"attr\">reconnection</span>: <span class=\"literal\">true</span>&#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    socket.on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        socket.emit(<span class=\"string\">'example'</span>, <span class=\"string\">'hi'</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        socket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'disconnect'</span>);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        socket.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(msg)</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h4><p>如果你用的 swoole 版本为 <code>4.4.4</code>，那么还需要对上篇文章中的 nginx 配置做个小修改，即添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_http_version 1.1;</span><br></pre></td></tr></table></figure>\n\n<p>完整配置就不贴了，把这一行加在 <code>proxy_pass http://swoole-http$suffix;</code> 这一行前后都行。</p>\n<p>如果没有这一行的话，而且怎么也没反应的话，记得去 log 中找具体报错。</p>\n<p>emmm，文档没写，在 issue 里扒出来的……</p>\n<p><img src=\"/2019/10/12/laravel-swoole-socket-in-laradock/demo.png\" alt=\"演示\"></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>之前写了一篇 <a href=\"https://www.m-finder.com/2019/08/23/laravel-swoole-in-laradock/\" target=\"_blank\" rel=\"noopener\">在 laradock 环境中使用 laravel-swoole 加速你的 laravel 应用</a> 的博客，算是敲开了 laravel-swoole 的大门，今天就继续研究下期中的 websocket 功能。</p>\n<p><img src=\"/2019/10/12/laravel-swoole-socket-in-laradock/laradock.png\" alt></p>","more":"<h4 id=\"安装-laravel-swoole\"><a href=\"#安装-laravel-swoole\" class=\"headerlink\" title=\"安装 laravel-swoole\"></a>安装 laravel-swoole</h4><p>这里就不写了，参考上篇。</p>\n<h4 id=\"配置-socket\"><a href=\"#配置-socket\" class=\"headerlink\" title=\"配置 socket\"></a>配置 socket</h4><p>编辑 laravel  env 文件，写入如下一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SWOOLE_HTTP_WEBSOCKET=true</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>php artisan swoole:http infos</code> 查看状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br><span class=\"line\">| Name            | Value                                               |</span><br><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br><span class=\"line\">| PHP Version     | 7.2.21-1+ubuntu16.04.1+deb.sury.org+1               |</span><br><span class=\"line\">| Swoole Version  | 4.4.4                                               |</span><br><span class=\"line\">| Laravel Version | 5.8.33                                              |</span><br><span class=\"line\">| Listen IP       | workspace                                           |</span><br><span class=\"line\">| Listen Port     | 1215                                                |</span><br><span class=\"line\">| Server Status   | Online                                              |</span><br><span class=\"line\">| Reactor Num     | 2                                                   |</span><br><span class=\"line\">| Worker Num      | 2                                                   |</span><br><span class=\"line\">| Task Worker Num | 2                                                   |</span><br><span class=\"line\">| Websocket Mode  | On                                                  |</span><br><span class=\"line\">| Master PID      | 326                                                 |</span><br><span class=\"line\">| Manager PID     | 327                                                 |</span><br><span class=\"line\">| Log Path        | /var/www/laravel-learn/storage/logs/swoole_http.log |</span><br><span class=\"line\">+-----------------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>Websocket Mode</code> 一项已经打开了。</p>\n<h4 id=\"编辑-socket-路由\"><a href=\"#编辑-socket-路由\" class=\"headerlink\" title=\"编辑 socket 路由\"></a>编辑 socket 路由</h4><p>在 <code>routes/websocket.php</code> 中:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Websocket::on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket, Request $request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// called while socket on connect</span></span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, <span class=\"string\">'welcome'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Websocket::on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// called while socket on disconnect</span></span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, <span class=\"string\">'server is gone, bye~'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Websocket::on(<span class=\"string\">'example'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($websocket, $data)</span> </span>&#123;</span><br><span class=\"line\">    $websocket-&gt;emit(<span class=\"string\">'message'</span>, $data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此文件修改后需要重启 <code>swoole:http</code>。</p>\n<h4 id=\"前端连接-socket\"><a href=\"#前端连接-socket\" class=\"headerlink\" title=\"前端连接 socket\"></a>前端连接 socket</h4><p>因为 laravel-swoole 使用的是 <code>Socket.io</code>，所以这里也采用这个。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> socket = io(<span class=\"string\">'http://study.test:8080/'</span>, &#123;<span class=\"attr\">transports</span>: [<span class=\"string\">'websocket'</span>], <span class=\"attr\">reconnection</span>: <span class=\"literal\">true</span>&#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    socket.on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        socket.emit(<span class=\"string\">'example'</span>, <span class=\"string\">'hi'</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        socket.on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'disconnect'</span>);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">        socket.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(msg)</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h4><p>如果你用的 swoole 版本为 <code>4.4.4</code>，那么还需要对上篇文章中的 nginx 配置做个小修改，即添加一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_http_version 1.1;</span><br></pre></td></tr></table></figure>\n\n<p>完整配置就不贴了，把这一行加在 <code>proxy_pass http://swoole-http$suffix;</code> 这一行前后都行。</p>\n<p>如果没有这一行的话，而且怎么也没反应的话，记得去 log 中找具体报错。</p>\n<p>emmm，文档没写，在 issue 里扒出来的……</p>\n<p><img src=\"/2019/10/12/laravel-swoole-socket-in-laradock/demo.png\" alt=\"演示\"></p>"},{"title":"net core WebApi——公用库April.Util公开及发布","date":"2019-11-07T07:18:21.000Z","_content":"\n### 前言\n在之前鼓捣过一次基础工程**April.WebApi**后，就考虑把常用的类库打包做成一个公共类库，这样既方便维护也方便后续做快速开发使用，仓库地址：[April.Util_github](https://github.com/AprilBlank/April.Util.Public)，[April.Util_gitee](https://gitee.com/AprilBlank/April.Util.Public)，后续会继续推出基于Util的基础工程（包含权限相关）以及如果代码生成器觉得可以了也会推出，先mark不错过。\n\n### April.Util\n首先，我们创建一个类库工程，当然新建之后就是删掉默认的类，我这里的版本是netstandard 2.0。\n![创建](net-core-april-util/1.png)\n然后我们先缕下之前我做基础工程时候需要用到的通用型类库（当然后续会一直跟进补充）。\n\n- 通用配置 **AprilConfig，AprilEnums**\n- 缓存相关 **CacheUtil，CookieUtil，SessionUtil，RedisUtil**\n- 日志相关 **LogUtil**\n- 路径请求相关 **UriUtil**\n- 回调相关 **ResponseUtil**\n- 时间处理相关 **DateUtil**\n- 验证码相关 **CodeUtil**\n- 管理员相关 **TokenUtil**\n- 加密相关 **EncrypUtil**\n- Aop相关 **AprilLogAttribute**\n- 其他扩展类\n- *未完待续*\n\n我们所需要引入的NuGet包，尽可能的节省新工程需要引入的类库，这样统一类库环境，方便多工程简单部署问题，当然也可以只引入dll文件，自己在工程中引入需要的环境类库，引入类库列表。\n\n- log4net\n- Microsoft.AspNetCore.Http.Abstractions\n- Microsoft.AspNetCore.Http.Extensions\n- Microsoft.AspNetCore.Mvc.Abstractions\n- Microsoft.AspNetCore.Mvc.Core\n- Microsoft.AspNetCore.Session\n- Microsoft.Extensions.Caching.Memory\n- Microsoft.Extensions.Configuration\n- Newtonsoft.Json\n- QRCoder\n- StackExchange.Redis\n- System.Drawing.Common\n- *未完待续*\n\n当然其中可能大多在WebApi工程中已经存在或是需要引用，这里存在重复引入的可能，所以需要关注版本问题，但是目前是会根据新版本的稳定版来统一版本问题。\n\n代码可直接从仓库拉取，地址也在开头给出，生成工程之后我们可以得到一个dll文件，就如我前面所说，你可以引入dll文件然后在自己工程打入需要的环境包，也可以发布一个NuGet包，直接引入**April.Util**。\n\n### 打包带走\n首先，右键Util选择属性，切换到打包界面。\n![打包](net-core-april-util/2.png)\n之后我们来发布当前类库工程，发布的过程这里就不再多说了，之后我们根据路径来找到我们发布的类库。\n![发布](net-core-april-util/3.png)\n#### 本地使用\n如果只是本地自己用的话，也不想发布为公开，可以通过配置NuGet包的地址来获取我们自己的NuGet包。\n![配置](net-core-april-util/4.png)\n![配置](net-core-april-util/5.png)\n之后，我们就可以获取我们自己的NuGet了。\n![获取](net-core-april-util/6.png)\n\n#### 发布NuGet\n当然你可以选择发布到NuGet仓库，登录[NuGet官网](https://www.nuget.org/users/account/LogOn?returnUrl=%2F)，如果没有账号需要注册个google账号。\n\n登录之后，在我们头像下选择上传包。\n![上传](net-core-april-util/7.png)\n选择文件，拉到最下面（当然你可以一路看看相关的参数），然后最终的Submit，之后我们就可以看到已经上传成功，但是检索需要等待个把小时，**上传的包应该是没法删除，所以这点儿需要注意**。\n![上传](net-core-april-util/8.png)\n\n### 示例\n在代码仓库中我连带有个Simple的WebApi，里面引入了Util，包括一些其他的常规使用方法，特别注意下入口文件**Startup**，当然这个工程后续也是会不断的完善的，至于更新的力度以及代码规范度，emm，个人的力量还是有限，希望也能有更多的人可以一起探讨。\n\n**Startup**\n\n```csharp\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n\n            AprilConfig.Configuration = configuration;\n            LogUtil.InitLog();\n\n            RedisUtil.InitRedis();\n        }\n\t\t\n\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            AprilConfig.ServiceProvider = app.ApplicationServices;\n            \n        }\n```\n\n![示例](net-core-april-util/9.png)\n```csharp\n/// <summary>\n        /// 示例获取\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet]\n        [AprilLog]\n        public ResponseDataEntity Get()\n        {\n            var rng = new Random();\n            var data = Enumerable.Range(1, 2).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)],\n                Timestamp = (int)DateUtil.ConvertToUnixTimestamp(DateTime.Now.AddDays(index))\n            })\n            .ToList();\n            return ResponseUtil.Success(\"\", data);\n        }\n\n        /// <summary>\n        /// 验证码\n        /// </summary>\n        /// <param name=\"type\">是否画线</param>\n        /// <returns></returns>\n        [HttpGet]\n        [Route(\"Code\")]\n        public FileContentResult Code(int type)\n        {\n            string code = CodeUtil.GetSingleObj().CreateVerifyCode(CodeUtil.VerifyCodeType.MixVerifyCode, 6);\n            //LogUtil.Info($\"生成6位验证码:{code}\");\n            bool isAddLines = false;\n            if (type == 1)\n            {\n                isAddLines = true;\n            }\n            var bitmap = CodeUtil.GetSingleObj().CreateBitmapByImgVerifyCode(code, 100, 40, isAddLines);\n            code = EncryptUtil.EncryptDES(code, AprilConfig.SecurityKey);\n            CookieUtil.AddString(\"code\", code, 5);\n            MemoryStream stream = new MemoryStream();\n            bitmap.Save(stream, ImageFormat.Gif);\n            return File(stream.ToArray(), \"image/gif\");\n        }\n```\n\n### 小结\n路漫漫，小半天的整理，但是前前后后的基础工程的路淌了好几版，从netframework到net core，想做一套通用的基础工程以减少开发工作量，但是这种确实没有十全十美的，根据业务来设计才是最合适的，但是规范化这点儿不可缺失，就先从Util开始，一点点的领出来，组件化的来开发，相信往后会越来越好，**如果有哪些地方不合适，也希望能有大佬给出指点，一人摸索过河，也请见谅**。\n","source":"_posts/net-core-april-util.md","raw":"---\ntitle: net core WebApi——公用库April.Util公开及发布\ndate: 2019-11-07 15:18:21\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n在之前鼓捣过一次基础工程**April.WebApi**后，就考虑把常用的类库打包做成一个公共类库，这样既方便维护也方便后续做快速开发使用，仓库地址：[April.Util_github](https://github.com/AprilBlank/April.Util.Public)，[April.Util_gitee](https://gitee.com/AprilBlank/April.Util.Public)，后续会继续推出基于Util的基础工程（包含权限相关）以及如果代码生成器觉得可以了也会推出，先mark不错过。\n\n### April.Util\n首先，我们创建一个类库工程，当然新建之后就是删掉默认的类，我这里的版本是netstandard 2.0。\n![创建](net-core-april-util/1.png)\n然后我们先缕下之前我做基础工程时候需要用到的通用型类库（当然后续会一直跟进补充）。\n\n- 通用配置 **AprilConfig，AprilEnums**\n- 缓存相关 **CacheUtil，CookieUtil，SessionUtil，RedisUtil**\n- 日志相关 **LogUtil**\n- 路径请求相关 **UriUtil**\n- 回调相关 **ResponseUtil**\n- 时间处理相关 **DateUtil**\n- 验证码相关 **CodeUtil**\n- 管理员相关 **TokenUtil**\n- 加密相关 **EncrypUtil**\n- Aop相关 **AprilLogAttribute**\n- 其他扩展类\n- *未完待续*\n\n我们所需要引入的NuGet包，尽可能的节省新工程需要引入的类库，这样统一类库环境，方便多工程简单部署问题，当然也可以只引入dll文件，自己在工程中引入需要的环境类库，引入类库列表。\n\n- log4net\n- Microsoft.AspNetCore.Http.Abstractions\n- Microsoft.AspNetCore.Http.Extensions\n- Microsoft.AspNetCore.Mvc.Abstractions\n- Microsoft.AspNetCore.Mvc.Core\n- Microsoft.AspNetCore.Session\n- Microsoft.Extensions.Caching.Memory\n- Microsoft.Extensions.Configuration\n- Newtonsoft.Json\n- QRCoder\n- StackExchange.Redis\n- System.Drawing.Common\n- *未完待续*\n\n当然其中可能大多在WebApi工程中已经存在或是需要引用，这里存在重复引入的可能，所以需要关注版本问题，但是目前是会根据新版本的稳定版来统一版本问题。\n\n代码可直接从仓库拉取，地址也在开头给出，生成工程之后我们可以得到一个dll文件，就如我前面所说，你可以引入dll文件然后在自己工程打入需要的环境包，也可以发布一个NuGet包，直接引入**April.Util**。\n\n### 打包带走\n首先，右键Util选择属性，切换到打包界面。\n![打包](net-core-april-util/2.png)\n之后我们来发布当前类库工程，发布的过程这里就不再多说了，之后我们根据路径来找到我们发布的类库。\n![发布](net-core-april-util/3.png)\n#### 本地使用\n如果只是本地自己用的话，也不想发布为公开，可以通过配置NuGet包的地址来获取我们自己的NuGet包。\n![配置](net-core-april-util/4.png)\n![配置](net-core-april-util/5.png)\n之后，我们就可以获取我们自己的NuGet了。\n![获取](net-core-april-util/6.png)\n\n#### 发布NuGet\n当然你可以选择发布到NuGet仓库，登录[NuGet官网](https://www.nuget.org/users/account/LogOn?returnUrl=%2F)，如果没有账号需要注册个google账号。\n\n登录之后，在我们头像下选择上传包。\n![上传](net-core-april-util/7.png)\n选择文件，拉到最下面（当然你可以一路看看相关的参数），然后最终的Submit，之后我们就可以看到已经上传成功，但是检索需要等待个把小时，**上传的包应该是没法删除，所以这点儿需要注意**。\n![上传](net-core-april-util/8.png)\n\n### 示例\n在代码仓库中我连带有个Simple的WebApi，里面引入了Util，包括一些其他的常规使用方法，特别注意下入口文件**Startup**，当然这个工程后续也是会不断的完善的，至于更新的力度以及代码规范度，emm，个人的力量还是有限，希望也能有更多的人可以一起探讨。\n\n**Startup**\n\n```csharp\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n\n            AprilConfig.Configuration = configuration;\n            LogUtil.InitLog();\n\n            RedisUtil.InitRedis();\n        }\n\t\t\n\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            AprilConfig.ServiceProvider = app.ApplicationServices;\n            \n        }\n```\n\n![示例](net-core-april-util/9.png)\n```csharp\n/// <summary>\n        /// 示例获取\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet]\n        [AprilLog]\n        public ResponseDataEntity Get()\n        {\n            var rng = new Random();\n            var data = Enumerable.Range(1, 2).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)],\n                Timestamp = (int)DateUtil.ConvertToUnixTimestamp(DateTime.Now.AddDays(index))\n            })\n            .ToList();\n            return ResponseUtil.Success(\"\", data);\n        }\n\n        /// <summary>\n        /// 验证码\n        /// </summary>\n        /// <param name=\"type\">是否画线</param>\n        /// <returns></returns>\n        [HttpGet]\n        [Route(\"Code\")]\n        public FileContentResult Code(int type)\n        {\n            string code = CodeUtil.GetSingleObj().CreateVerifyCode(CodeUtil.VerifyCodeType.MixVerifyCode, 6);\n            //LogUtil.Info($\"生成6位验证码:{code}\");\n            bool isAddLines = false;\n            if (type == 1)\n            {\n                isAddLines = true;\n            }\n            var bitmap = CodeUtil.GetSingleObj().CreateBitmapByImgVerifyCode(code, 100, 40, isAddLines);\n            code = EncryptUtil.EncryptDES(code, AprilConfig.SecurityKey);\n            CookieUtil.AddString(\"code\", code, 5);\n            MemoryStream stream = new MemoryStream();\n            bitmap.Save(stream, ImageFormat.Gif);\n            return File(stream.ToArray(), \"image/gif\");\n        }\n```\n\n### 小结\n路漫漫，小半天的整理，但是前前后后的基础工程的路淌了好几版，从netframework到net core，想做一套通用的基础工程以减少开发工作量，但是这种确实没有十全十美的，根据业务来设计才是最合适的，但是规范化这点儿不可缺失，就先从Util开始，一点点的领出来，组件化的来开发，相信往后会越来越好，**如果有哪些地方不合适，也希望能有大佬给出指点，一人摸索过河，也请见谅**。\n","slug":"net-core-april-util","published":1,"updated":"2019-11-22T02:56:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2a000t9sv7ehyhy460","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前鼓捣过一次基础工程<strong>April.WebApi</strong>后，就考虑把常用的类库打包做成一个公共类库，这样既方便维护也方便后续做快速开发使用，仓库地址：<a href=\"https://github.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_github</a>，<a href=\"https://gitee.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_gitee</a>，后续会继续推出基于Util的基础工程（包含权限相关）以及如果代码生成器觉得可以了也会推出，先mark不错过。</p>\n<h3 id=\"April-Util\"><a href=\"#April-Util\" class=\"headerlink\" title=\"April.Util\"></a>April.Util</h3><p>首先，我们创建一个类库工程，当然新建之后就是删掉默认的类，我这里的版本是netstandard 2.0。<br><img src=\"/2019/11/07/net-core-april-util/1.png\" alt=\"创建\"><br>然后我们先缕下之前我做基础工程时候需要用到的通用型类库（当然后续会一直跟进补充）。</p>\n<ul>\n<li>通用配置 <strong>AprilConfig，AprilEnums</strong></li>\n<li>缓存相关 <strong>CacheUtil，CookieUtil，SessionUtil，RedisUtil</strong></li>\n<li>日志相关 <strong>LogUtil</strong></li>\n<li>路径请求相关 <strong>UriUtil</strong></li>\n<li>回调相关 <strong>ResponseUtil</strong></li>\n<li>时间处理相关 <strong>DateUtil</strong></li>\n<li>验证码相关 <strong>CodeUtil</strong></li>\n<li>管理员相关 <strong>TokenUtil</strong></li>\n<li>加密相关 <strong>EncrypUtil</strong></li>\n<li>Aop相关 <strong>AprilLogAttribute</strong></li>\n<li>其他扩展类</li>\n<li><em>未完待续</em></li>\n</ul>\n<p>我们所需要引入的NuGet包，尽可能的节省新工程需要引入的类库，这样统一类库环境，方便多工程简单部署问题，当然也可以只引入dll文件，自己在工程中引入需要的环境类库，引入类库列表。</p>\n<ul>\n<li>log4net</li>\n<li>Microsoft.AspNetCore.Http.Abstractions</li>\n<li>Microsoft.AspNetCore.Http.Extensions</li>\n<li>Microsoft.AspNetCore.Mvc.Abstractions</li>\n<li>Microsoft.AspNetCore.Mvc.Core</li>\n<li>Microsoft.AspNetCore.Session</li>\n<li>Microsoft.Extensions.Caching.Memory</li>\n<li>Microsoft.Extensions.Configuration</li>\n<li>Newtonsoft.Json</li>\n<li>QRCoder</li>\n<li>StackExchange.Redis</li>\n<li>System.Drawing.Common</li>\n<li><em>未完待续</em></li>\n</ul>\n<p>当然其中可能大多在WebApi工程中已经存在或是需要引用，这里存在重复引入的可能，所以需要关注版本问题，但是目前是会根据新版本的稳定版来统一版本问题。</p>\n<p>代码可直接从仓库拉取，地址也在开头给出，生成工程之后我们可以得到一个dll文件，就如我前面所说，你可以引入dll文件然后在自己工程打入需要的环境包，也可以发布一个NuGet包，直接引入<strong>April.Util</strong>。</p>\n<h3 id=\"打包带走\"><a href=\"#打包带走\" class=\"headerlink\" title=\"打包带走\"></a>打包带走</h3><p>首先，右键Util选择属性，切换到打包界面。<br><img src=\"/2019/11/07/net-core-april-util/2.png\" alt=\"打包\"><br>之后我们来发布当前类库工程，发布的过程这里就不再多说了，之后我们根据路径来找到我们发布的类库。<br><img src=\"/2019/11/07/net-core-april-util/3.png\" alt=\"发布\"></p>\n<h4 id=\"本地使用\"><a href=\"#本地使用\" class=\"headerlink\" title=\"本地使用\"></a>本地使用</h4><p>如果只是本地自己用的话，也不想发布为公开，可以通过配置NuGet包的地址来获取我们自己的NuGet包。<br><img src=\"/2019/11/07/net-core-april-util/4.png\" alt=\"配置\"><br><img src=\"/2019/11/07/net-core-april-util/5.png\" alt=\"配置\"><br>之后，我们就可以获取我们自己的NuGet了。<br><img src=\"/2019/11/07/net-core-april-util/6.png\" alt=\"获取\"></p>\n<h4 id=\"发布NuGet\"><a href=\"#发布NuGet\" class=\"headerlink\" title=\"发布NuGet\"></a>发布NuGet</h4><p>当然你可以选择发布到NuGet仓库，登录<a href=\"https://www.nuget.org/users/account/LogOn?returnUrl=%2F\" target=\"_blank\" rel=\"noopener\">NuGet官网</a>，如果没有账号需要注册个google账号。</p>\n<p>登录之后，在我们头像下选择上传包。<br><img src=\"/2019/11/07/net-core-april-util/7.png\" alt=\"上传\"><br>选择文件，拉到最下面（当然你可以一路看看相关的参数），然后最终的Submit，之后我们就可以看到已经上传成功，但是检索需要等待个把小时，<strong>上传的包应该是没法删除，所以这点儿需要注意</strong>。<br><img src=\"/2019/11/07/net-core-april-util/8.png\" alt=\"上传\"></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在代码仓库中我连带有个Simple的WebApi，里面引入了Util，包括一些其他的常规使用方法，特别注意下入口文件<strong>Startup</strong>，当然这个工程后续也是会不断的完善的，至于更新的力度以及代码规范度，emm，个人的力量还是有限，希望也能有更多的人可以一起探讨。</p>\n<p><strong>Startup</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          Configuration = configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">          AprilConfig.Configuration = configuration;</span><br><span class=\"line\">          LogUtil.InitLog();</span><br><span class=\"line\"></span><br><span class=\"line\">          RedisUtil.InitRedis();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          AprilConfig.ServiceProvider = app.ApplicationServices;</span><br><span class=\"line\">          </span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/11/07/net-core-april-util/9.png\" alt=\"示例\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 示例获取</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        [<span class=\"meta\">AprilLog</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ResponseDataEntity <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">2</span>).Select(index =&gt; <span class=\"keyword\">new</span> WeatherForecast</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Date = DateTime.Now.AddDays(index),</span><br><span class=\"line\">                TemperatureC = rng.Next(<span class=\"number\">-20</span>, <span class=\"number\">55</span>),</span><br><span class=\"line\">                Summary = Summaries[rng.Next(Summaries.Length)],</span><br><span class=\"line\">                Timestamp = (<span class=\"keyword\">int</span>)DateUtil.ConvertToUnixTimestamp(DateTime.Now.AddDays(index))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .ToList();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>是否画线<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        [<span class=\"meta\">Route(<span class=\"meta-string\">\"Code\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> FileContentResult <span class=\"title\">Code</span>(<span class=\"params\"><span class=\"keyword\">int</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> code = CodeUtil.GetSingleObj().CreateVerifyCode(CodeUtil.VerifyCodeType.MixVerifyCode, <span class=\"number\">6</span>);</span><br><span class=\"line\">            <span class=\"comment\">//LogUtil.Info($\"生成6位验证码:&#123;code&#125;\");</span></span><br><span class=\"line\">            <span class=\"keyword\">bool</span> isAddLines = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                isAddLines = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bitmap = CodeUtil.GetSingleObj().CreateBitmapByImgVerifyCode(code, <span class=\"number\">100</span>, <span class=\"number\">40</span>, isAddLines);</span><br><span class=\"line\">            code = EncryptUtil.EncryptDES(code, AprilConfig.SecurityKey);</span><br><span class=\"line\">            CookieUtil.AddString(<span class=\"string\">\"code\"</span>, code, <span class=\"number\">5</span>);</span><br><span class=\"line\">            MemoryStream stream = <span class=\"keyword\">new</span> MemoryStream();</span><br><span class=\"line\">            bitmap.Save(stream, ImageFormat.Gif);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> File(stream.ToArray(), <span class=\"string\">\"image/gif\"</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>路漫漫，小半天的整理，但是前前后后的基础工程的路淌了好几版，从netframework到net core，想做一套通用的基础工程以减少开发工作量，但是这种确实没有十全十美的，根据业务来设计才是最合适的，但是规范化这点儿不可缺失，就先从Util开始，一点点的领出来，组件化的来开发，相信往后会越来越好，<strong>如果有哪些地方不合适，也希望能有大佬给出指点，一人摸索过河，也请见谅</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前鼓捣过一次基础工程<strong>April.WebApi</strong>后，就考虑把常用的类库打包做成一个公共类库，这样既方便维护也方便后续做快速开发使用，仓库地址：<a href=\"https://github.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_github</a>，<a href=\"https://gitee.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_gitee</a>，后续会继续推出基于Util的基础工程（包含权限相关）以及如果代码生成器觉得可以了也会推出，先mark不错过。</p>\n<h3 id=\"April-Util\"><a href=\"#April-Util\" class=\"headerlink\" title=\"April.Util\"></a>April.Util</h3><p>首先，我们创建一个类库工程，当然新建之后就是删掉默认的类，我这里的版本是netstandard 2.0。<br><img src=\"/2019/11/07/net-core-april-util/1.png\" alt=\"创建\"><br>然后我们先缕下之前我做基础工程时候需要用到的通用型类库（当然后续会一直跟进补充）。</p>\n<ul>\n<li>通用配置 <strong>AprilConfig，AprilEnums</strong></li>\n<li>缓存相关 <strong>CacheUtil，CookieUtil，SessionUtil，RedisUtil</strong></li>\n<li>日志相关 <strong>LogUtil</strong></li>\n<li>路径请求相关 <strong>UriUtil</strong></li>\n<li>回调相关 <strong>ResponseUtil</strong></li>\n<li>时间处理相关 <strong>DateUtil</strong></li>\n<li>验证码相关 <strong>CodeUtil</strong></li>\n<li>管理员相关 <strong>TokenUtil</strong></li>\n<li>加密相关 <strong>EncrypUtil</strong></li>\n<li>Aop相关 <strong>AprilLogAttribute</strong></li>\n<li>其他扩展类</li>\n<li><em>未完待续</em></li>\n</ul>\n<p>我们所需要引入的NuGet包，尽可能的节省新工程需要引入的类库，这样统一类库环境，方便多工程简单部署问题，当然也可以只引入dll文件，自己在工程中引入需要的环境类库，引入类库列表。</p>\n<ul>\n<li>log4net</li>\n<li>Microsoft.AspNetCore.Http.Abstractions</li>\n<li>Microsoft.AspNetCore.Http.Extensions</li>\n<li>Microsoft.AspNetCore.Mvc.Abstractions</li>\n<li>Microsoft.AspNetCore.Mvc.Core</li>\n<li>Microsoft.AspNetCore.Session</li>\n<li>Microsoft.Extensions.Caching.Memory</li>\n<li>Microsoft.Extensions.Configuration</li>\n<li>Newtonsoft.Json</li>\n<li>QRCoder</li>\n<li>StackExchange.Redis</li>\n<li>System.Drawing.Common</li>\n<li><em>未完待续</em></li>\n</ul>\n<p>当然其中可能大多在WebApi工程中已经存在或是需要引用，这里存在重复引入的可能，所以需要关注版本问题，但是目前是会根据新版本的稳定版来统一版本问题。</p>\n<p>代码可直接从仓库拉取，地址也在开头给出，生成工程之后我们可以得到一个dll文件，就如我前面所说，你可以引入dll文件然后在自己工程打入需要的环境包，也可以发布一个NuGet包，直接引入<strong>April.Util</strong>。</p>\n<h3 id=\"打包带走\"><a href=\"#打包带走\" class=\"headerlink\" title=\"打包带走\"></a>打包带走</h3><p>首先，右键Util选择属性，切换到打包界面。<br><img src=\"/2019/11/07/net-core-april-util/2.png\" alt=\"打包\"><br>之后我们来发布当前类库工程，发布的过程这里就不再多说了，之后我们根据路径来找到我们发布的类库。<br><img src=\"/2019/11/07/net-core-april-util/3.png\" alt=\"发布\"></p>\n<h4 id=\"本地使用\"><a href=\"#本地使用\" class=\"headerlink\" title=\"本地使用\"></a>本地使用</h4><p>如果只是本地自己用的话，也不想发布为公开，可以通过配置NuGet包的地址来获取我们自己的NuGet包。<br><img src=\"/2019/11/07/net-core-april-util/4.png\" alt=\"配置\"><br><img src=\"/2019/11/07/net-core-april-util/5.png\" alt=\"配置\"><br>之后，我们就可以获取我们自己的NuGet了。<br><img src=\"/2019/11/07/net-core-april-util/6.png\" alt=\"获取\"></p>\n<h4 id=\"发布NuGet\"><a href=\"#发布NuGet\" class=\"headerlink\" title=\"发布NuGet\"></a>发布NuGet</h4><p>当然你可以选择发布到NuGet仓库，登录<a href=\"https://www.nuget.org/users/account/LogOn?returnUrl=%2F\" target=\"_blank\" rel=\"noopener\">NuGet官网</a>，如果没有账号需要注册个google账号。</p>\n<p>登录之后，在我们头像下选择上传包。<br><img src=\"/2019/11/07/net-core-april-util/7.png\" alt=\"上传\"><br>选择文件，拉到最下面（当然你可以一路看看相关的参数），然后最终的Submit，之后我们就可以看到已经上传成功，但是检索需要等待个把小时，<strong>上传的包应该是没法删除，所以这点儿需要注意</strong>。<br><img src=\"/2019/11/07/net-core-april-util/8.png\" alt=\"上传\"></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在代码仓库中我连带有个Simple的WebApi，里面引入了Util，包括一些其他的常规使用方法，特别注意下入口文件<strong>Startup</strong>，当然这个工程后续也是会不断的完善的，至于更新的力度以及代码规范度，emm，个人的力量还是有限，希望也能有更多的人可以一起探讨。</p>\n<p><strong>Startup</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          Configuration = configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">          AprilConfig.Configuration = configuration;</span><br><span class=\"line\">          LogUtil.InitLog();</span><br><span class=\"line\"></span><br><span class=\"line\">          RedisUtil.InitRedis();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          AprilConfig.ServiceProvider = app.ApplicationServices;</span><br><span class=\"line\">          </span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/11/07/net-core-april-util/9.png\" alt=\"示例\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 示例获取</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        [<span class=\"meta\">AprilLog</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ResponseDataEntity <span class=\"title\">Get</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rng = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> data = Enumerable.Range(<span class=\"number\">1</span>, <span class=\"number\">2</span>).Select(index =&gt; <span class=\"keyword\">new</span> WeatherForecast</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Date = DateTime.Now.AddDays(index),</span><br><span class=\"line\">                TemperatureC = rng.Next(<span class=\"number\">-20</span>, <span class=\"number\">55</span>),</span><br><span class=\"line\">                Summary = Summaries[rng.Next(Summaries.Length)],</span><br><span class=\"line\">                Timestamp = (<span class=\"keyword\">int</span>)DateUtil.ConvertToUnixTimestamp(DateTime.Now.AddDays(index))</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .ToList();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 验证码</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>是否画线<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">        [<span class=\"meta\">Route(<span class=\"meta-string\">\"Code\"</span>)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> FileContentResult <span class=\"title\">Code</span>(<span class=\"params\"><span class=\"keyword\">int</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> code = CodeUtil.GetSingleObj().CreateVerifyCode(CodeUtil.VerifyCodeType.MixVerifyCode, <span class=\"number\">6</span>);</span><br><span class=\"line\">            <span class=\"comment\">//LogUtil.Info($\"生成6位验证码:&#123;code&#125;\");</span></span><br><span class=\"line\">            <span class=\"keyword\">bool</span> isAddLines = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                isAddLines = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> bitmap = CodeUtil.GetSingleObj().CreateBitmapByImgVerifyCode(code, <span class=\"number\">100</span>, <span class=\"number\">40</span>, isAddLines);</span><br><span class=\"line\">            code = EncryptUtil.EncryptDES(code, AprilConfig.SecurityKey);</span><br><span class=\"line\">            CookieUtil.AddString(<span class=\"string\">\"code\"</span>, code, <span class=\"number\">5</span>);</span><br><span class=\"line\">            MemoryStream stream = <span class=\"keyword\">new</span> MemoryStream();</span><br><span class=\"line\">            bitmap.Save(stream, ImageFormat.Gif);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> File(stream.ToArray(), <span class=\"string\">\"image/gif\"</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>路漫漫，小半天的整理，但是前前后后的基础工程的路淌了好几版，从netframework到net core，想做一套通用的基础工程以减少开发工作量，但是这种确实没有十全十美的，根据业务来设计才是最合适的，但是规范化这点儿不可缺失，就先从Util开始，一点点的领出来，组件化的来开发，相信往后会越来越好，<strong>如果有哪些地方不合适，也希望能有大佬给出指点，一人摸索过河，也请见谅</strong>。</p>\n"},{"title":"net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2","date":"2019-08-01T03:18:22.000Z","_content":"\n### 前言\n前一篇讲到了中间层的使用，可能不是那么AOP，今天主要来说下一个轻量级的AOP第三方类库**AspectoCore**。\n\n简单介绍下这个类库，AspectCore Project 是适用于 net core 平台的轻量级 Aop(Aspect-oriented programming) 解决方案，它更好的遵循 net core 的模块化开发理念，使用AspectCore可以更容易构建低耦合、易扩展的Web应用程序。\n\n### 引入\n首先，我们在Util层直接引入相关的类库。\n![引入](net-core-aop-2/1.png)\n然后我们还是先在Startup注册下，将ConfigureServices方法从void更改为IServiceProvider，目的就是，这个管道给别人了，不再由默认的来了。\n```csharp\n\tpublic IServiceProvider ConfigureServices(IServiceCollection services)\n\t{\n\t\t//...之前的\n\t\tservices.AddAspectCoreContainer();\n        return services.BuildAspectInjectorProvider();\n\t}\n```\n\n### 自定义属性\n写完之后，我们就可以来试试这个玩意儿怎么玩了，不多说，Util来个文件夹**Attributes**，然后新建一个类**AprilLogAttribute**，继承**AbstractInterceptorAttribute**。\n```csharp\n    public class AprilLogAttribute : AbstractInterceptorAttribute\n    {\n        public async override Task Invoke(AspectContext context, AspectDelegate next)\n        {\n            LogUtil.Debug(\"AprilLogAttribute begin\");\n            await next(context);\n            LogUtil.Debug(\"AprilLogAttribute end\");\n        }\n    }\n```\n没啥具体的使用注解，就是加个前后注释的作用。然后我们在之前的Student这个接口中加上一个测试方法。\n```csharp\n    public interface IStudentService : IBaseService<StudentEntity>\n    {\n        [AprilLog]\n        void Test();\n    }\n```\nStudentService我们来实现这个方法。\n```csharp\n    public class StudentService : BaseService<StudentEntity>, IStudentService\n    {\n        public void Test()\n        {\n            LogUtil.Debug(\"StudentService Test\");\n        }\n    }\n```\n\n### 测试\n全部搞定之后，我们继续Values开刀，注释掉之前的代码之后，只留一个Test方法。\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n            _service.Test();\n            return new string[] { \"value1\", \"value2\" };\n        }\n```\n\n别忘了运行前在application.json里面加上接口白名单。\n```json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"CommonSettings\": {\n    \"FilePath\": \"/uploads/files/\"\n  },\n  \"DefaultSqlConnectionString\": {\n    \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"\n  },\n  \"AllowUrl\": \"/api/Values\" //这个如果没有那一直是返回未登录\n}\n```\n\n![测试](net-core-aop-2/2.png)\n运行没问题，我们来看下日志记录。\n![日志](net-core-aop-2/3.png)\n另外也补充下这个记录的问题，如果需要监视接口调用的情况，我们可以加上断点看下这个context，这个对象里面本身已经包含了我们调用了哪个接口的哪个方法等等信息，这里只举个简单的例子，我们可以知道我们调用的接口及方法，包括实现及方法，然后可以记录下是谁访问，哪个接口，执行时间等等。\n![示例](net-core-aop-2/4.png)\n\n### 小结\n写到这里，net core webapi的基础工程基本上已经完工了，通过这些记录我本身又对之前的工程进行了小量的改动，每次的一版写完都有一个新的感受，可能当时写一版的时候没有想太多，一遍一遍的过完之后发现有些地方可以优化，并且优化的效果也是挺明显，后续如果有新的功能实现或者业务需要的时候，也会同步更新的这个示例工程。\n","source":"_posts/net-core-aop-2.md","raw":"---\ntitle: net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2\ndate: 2019-08-01 11:18:22\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n前一篇讲到了中间层的使用，可能不是那么AOP，今天主要来说下一个轻量级的AOP第三方类库**AspectoCore**。\n\n简单介绍下这个类库，AspectCore Project 是适用于 net core 平台的轻量级 Aop(Aspect-oriented programming) 解决方案，它更好的遵循 net core 的模块化开发理念，使用AspectCore可以更容易构建低耦合、易扩展的Web应用程序。\n\n### 引入\n首先，我们在Util层直接引入相关的类库。\n![引入](net-core-aop-2/1.png)\n然后我们还是先在Startup注册下，将ConfigureServices方法从void更改为IServiceProvider，目的就是，这个管道给别人了，不再由默认的来了。\n```csharp\n\tpublic IServiceProvider ConfigureServices(IServiceCollection services)\n\t{\n\t\t//...之前的\n\t\tservices.AddAspectCoreContainer();\n        return services.BuildAspectInjectorProvider();\n\t}\n```\n\n### 自定义属性\n写完之后，我们就可以来试试这个玩意儿怎么玩了，不多说，Util来个文件夹**Attributes**，然后新建一个类**AprilLogAttribute**，继承**AbstractInterceptorAttribute**。\n```csharp\n    public class AprilLogAttribute : AbstractInterceptorAttribute\n    {\n        public async override Task Invoke(AspectContext context, AspectDelegate next)\n        {\n            LogUtil.Debug(\"AprilLogAttribute begin\");\n            await next(context);\n            LogUtil.Debug(\"AprilLogAttribute end\");\n        }\n    }\n```\n没啥具体的使用注解，就是加个前后注释的作用。然后我们在之前的Student这个接口中加上一个测试方法。\n```csharp\n    public interface IStudentService : IBaseService<StudentEntity>\n    {\n        [AprilLog]\n        void Test();\n    }\n```\nStudentService我们来实现这个方法。\n```csharp\n    public class StudentService : BaseService<StudentEntity>, IStudentService\n    {\n        public void Test()\n        {\n            LogUtil.Debug(\"StudentService Test\");\n        }\n    }\n```\n\n### 测试\n全部搞定之后，我们继续Values开刀，注释掉之前的代码之后，只留一个Test方法。\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n            _service.Test();\n            return new string[] { \"value1\", \"value2\" };\n        }\n```\n\n别忘了运行前在application.json里面加上接口白名单。\n```json\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"CommonSettings\": {\n    \"FilePath\": \"/uploads/files/\"\n  },\n  \"DefaultSqlConnectionString\": {\n    \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"\n  },\n  \"AllowUrl\": \"/api/Values\" //这个如果没有那一直是返回未登录\n}\n```\n\n![测试](net-core-aop-2/2.png)\n运行没问题，我们来看下日志记录。\n![日志](net-core-aop-2/3.png)\n另外也补充下这个记录的问题，如果需要监视接口调用的情况，我们可以加上断点看下这个context，这个对象里面本身已经包含了我们调用了哪个接口的哪个方法等等信息，这里只举个简单的例子，我们可以知道我们调用的接口及方法，包括实现及方法，然后可以记录下是谁访问，哪个接口，执行时间等等。\n![示例](net-core-aop-2/4.png)\n\n### 小结\n写到这里，net core webapi的基础工程基本上已经完工了，通过这些记录我本身又对之前的工程进行了小量的改动，每次的一版写完都有一个新的感受，可能当时写一版的时候没有想太多，一遍一遍的过完之后发现有些地方可以优化，并且优化的效果也是挺明显，后续如果有新的功能实现或者业务需要的时候，也会同步更新的这个示例工程。\n","slug":"net-core-aop-2","published":1,"updated":"2019-09-30T05:46:00.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2e000w9sv70srinq8d","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前一篇讲到了中间层的使用，可能不是那么AOP，今天主要来说下一个轻量级的AOP第三方类库<strong>AspectoCore</strong>。</p>\n<p>简单介绍下这个类库，AspectCore Project 是适用于 net core 平台的轻量级 Aop(Aspect-oriented programming) 解决方案，它更好的遵循 net core 的模块化开发理念，使用AspectCore可以更容易构建低耦合、易扩展的Web应用程序。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>首先，我们在Util层直接引入相关的类库。<br><img src=\"/2019/08/01/net-core-aop-2/1.png\" alt=\"引入\"><br>然后我们还是先在Startup注册下，将ConfigureServices方法从void更改为IServiceProvider，目的就是，这个管道给别人了，不再由默认的来了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...之前的</span></span><br><span class=\"line\">\tservices.AddAspectCoreContainer();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> services.BuildAspectInjectorProvider();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h3><p>写完之后，我们就可以来试试这个玩意儿怎么玩了，不多说，Util来个文件夹<strong>Attributes</strong>，然后新建一个类<strong>AprilLogAttribute</strong>，继承<strong>AbstractInterceptorAttribute</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilLogAttribute</span> : <span class=\"title\">AbstractInterceptorAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"keyword\">override</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">AspectContext context, AspectDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilLogAttribute begin\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(context);</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilLogAttribute end\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没啥具体的使用注解，就是加个前后注释的作用。然后我们在之前的Student这个接口中加上一个测试方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentService : IBaseService&lt;StudentEntity&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AprilLog</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>StudentService我们来实现这个方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StudentService : BaseService&lt;StudentEntity&gt;, IStudentService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"StudentService Test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>全部搞定之后，我们继续Values开刀，注释掉之前的代码之后，只留一个Test方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _service.Test();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>别忘了运行前在application.json里面加上接口白名单。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Logging\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"LogLevel\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"Default\"</span>: <span class=\"string\">\"Warning\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"AllowedHosts\"</span>: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"CommonSettings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"FilePath\"</span>: <span class=\"string\">\"/uploads/files/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"DefaultSqlConnectionString\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"MySql\"</span>: <span class=\"string\">\"server=127.0.0.1;userid=root;password=root;database=test;\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"AllowUrl\"</span>: <span class=\"string\">\"/api/Values\"</span> //这个如果没有那一直是返回未登录</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/08/01/net-core-aop-2/2.png\" alt=\"测试\"><br>运行没问题，我们来看下日志记录。<br><img src=\"/2019/08/01/net-core-aop-2/3.png\" alt=\"日志\"><br>另外也补充下这个记录的问题，如果需要监视接口调用的情况，我们可以加上断点看下这个context，这个对象里面本身已经包含了我们调用了哪个接口的哪个方法等等信息，这里只举个简单的例子，我们可以知道我们调用的接口及方法，包括实现及方法，然后可以记录下是谁访问，哪个接口，执行时间等等。<br><img src=\"/2019/08/01/net-core-aop-2/4.png\" alt=\"示例\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里，net core webapi的基础工程基本上已经完工了，通过这些记录我本身又对之前的工程进行了小量的改动，每次的一版写完都有一个新的感受，可能当时写一版的时候没有想太多，一遍一遍的过完之后发现有些地方可以优化，并且优化的效果也是挺明显，后续如果有新的功能实现或者业务需要的时候，也会同步更新的这个示例工程。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前一篇讲到了中间层的使用，可能不是那么AOP，今天主要来说下一个轻量级的AOP第三方类库<strong>AspectoCore</strong>。</p>\n<p>简单介绍下这个类库，AspectCore Project 是适用于 net core 平台的轻量级 Aop(Aspect-oriented programming) 解决方案，它更好的遵循 net core 的模块化开发理念，使用AspectCore可以更容易构建低耦合、易扩展的Web应用程序。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>首先，我们在Util层直接引入相关的类库。<br><img src=\"/2019/08/01/net-core-aop-2/1.png\" alt=\"引入\"><br>然后我们还是先在Startup注册下，将ConfigureServices方法从void更改为IServiceProvider，目的就是，这个管道给别人了，不再由默认的来了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...之前的</span></span><br><span class=\"line\">\tservices.AddAspectCoreContainer();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> services.BuildAspectInjectorProvider();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h3><p>写完之后，我们就可以来试试这个玩意儿怎么玩了，不多说，Util来个文件夹<strong>Attributes</strong>，然后新建一个类<strong>AprilLogAttribute</strong>，继承<strong>AbstractInterceptorAttribute</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilLogAttribute</span> : <span class=\"title\">AbstractInterceptorAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"keyword\">override</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">AspectContext context, AspectDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilLogAttribute begin\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(context);</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilLogAttribute end\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没啥具体的使用注解，就是加个前后注释的作用。然后我们在之前的Student这个接口中加上一个测试方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentService : IBaseService&lt;StudentEntity&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">AprilLog</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>StudentService我们来实现这个方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StudentService : BaseService&lt;StudentEntity&gt;, IStudentService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"StudentService Test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>全部搞定之后，我们继续Values开刀，注释掉之前的代码之后，只留一个Test方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _service.Test();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>别忘了运行前在application.json里面加上接口白名单。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Logging\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"LogLevel\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"Default\"</span>: <span class=\"string\">\"Warning\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"AllowedHosts\"</span>: <span class=\"string\">\"*\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"CommonSettings\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"FilePath\"</span>: <span class=\"string\">\"/uploads/files/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"DefaultSqlConnectionString\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"MySql\"</span>: <span class=\"string\">\"server=127.0.0.1;userid=root;password=root;database=test;\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"AllowUrl\"</span>: <span class=\"string\">\"/api/Values\"</span> //这个如果没有那一直是返回未登录</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/08/01/net-core-aop-2/2.png\" alt=\"测试\"><br>运行没问题，我们来看下日志记录。<br><img src=\"/2019/08/01/net-core-aop-2/3.png\" alt=\"日志\"><br>另外也补充下这个记录的问题，如果需要监视接口调用的情况，我们可以加上断点看下这个context，这个对象里面本身已经包含了我们调用了哪个接口的哪个方法等等信息，这里只举个简单的例子，我们可以知道我们调用的接口及方法，包括实现及方法，然后可以记录下是谁访问，哪个接口，执行时间等等。<br><img src=\"/2019/08/01/net-core-aop-2/4.png\" alt=\"示例\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里，net core webapi的基础工程基本上已经完工了，通过这些记录我本身又对之前的工程进行了小量的改动，每次的一版写完都有一个新的感受，可能当时写一版的时候没有想太多，一遍一遍的过完之后发现有些地方可以优化，并且优化的效果也是挺明显，后续如果有新的功能实现或者业务需要的时候，也会同步更新的这个示例工程。</p>\n"},{"title":"net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1","date":"2019-07-30T10:31:10.000Z","_content":"\n### 前言\n一天天不知道怎么过的，但确实挺忙，事赶事不带停那种，让我感觉跟在流水线干活一样，忙活的事差不多了就喘口气继续补充这一系列的内容，前面几篇基本上把一个常规的后端服务搭建差不多了，后面的会时不时根据自己需要或者常规的测试内容来一点点完善更新。\n\n### 拦截器\n这里先不提AOP的内容，其实在我个人之前的理解，AOP开发的思想就是，我们做的某些操作例如身份验证，日志记录，异常抓捕等等这些操作，可以单独拎出来放那，谁用了加个头部标识就可以了，剩余的交给代码来处理，这样我们开发就只需要关心业务功能，而其他的全都可以不用考虑，这就是框架的好处，别人封装集成好，就可以省去很大的开发工作量。\n\n好，开始说拦截器，其实也是中间层，个人感觉跟AOP的概念类似，就放到这里写上了。\n\n### 异常拦截器\n在我们**Api**的工程目录下新建文件夹Filters用于存放拦截器，之后我们新建**ExceptionFilter**这个异常的拦截器，用于记录工程抛异常并做对应回调处理。\n\n代码如下，具体不过多解释，因为实在觉得这个没啥说的，只是注意异步调用的问题即可。\n```csharp\n    public class ExceptionFilter\n    {\n        private readonly RequestDelegate _next;\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"next\"></param>\n        public ExceptionFilter(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <returns></returns>\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context);\n            }\n            catch (Exception ex) //发生异常\n            {\n                context.Response.StatusCode = 500;\n                LogUtil.Error($\"response exception:{ex.Message}\");// {ex.StackTrace}\n                await ResponseUtil.HandleExceptionAsync(500, \"服务器错误\");\n            }\n        }\n    }\n```\n\n这个地方的**ResponseUtil**是单独在Util层创建的（公共类尽量扔到同一个工程类库下，以后一键打包，各种复用）。\n\n```csharp\n    public class ResponseUtil\n    {\n        /// <summary>\n        /// 回调\n        /// </summary>\n        /// <param name=\"statusCode\">html状态码</param>\n        /// <param name=\"msg\">消息</param>\n        /// <returns></returns>\n        public static Task HandleExceptionAsync(int statusCode, string msg)\n        {\n            var data = new { code = statusCode, msg = msg };\n            string text = JsonConvert.SerializeObject(data);\n            var response = AprilConfig.HttpCurrent.Response;\n            if (string.IsNullOrEmpty(response.ContentType))\n            {\n                //跨域的时候注意，不带header没法接收回调\n                response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\");\n                response.Headers.Add(\"Access-Control-Allow-Credentials\", \"true\");\n                //因为这个是json\n                response.ContentType = \"application/json;charset=utf-8\";\n                response.StatusCode = 200;\n                response.ContentLength = text.Length;\n                return response.WriteAsync(text);\n            }\n            else\n            {\n                return response.WriteAsync(text);\n            }\n        }\n    }\n```\n\n之后我们依然要在Startup中注册我们这个中间层。\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            app.UseMiddleware<ExceptionFilter>();\n\t\t\t…\n        }\n```\n\n这样我们在全局如果出现异常的时候，可以统一捕获到问题，然后做记录，当然在测试环境下注意，如果这个错误帮助页打开的时候，那上面的拦截器将毫无乱用。\n![Startup](net-core-aop-1/1.png)\n### 测试结果\n![测试](net-core-aop-1/2.png)\n![日志记录](net-core-aop-1/3.png)\n这样如果真是哪个地方没有做异常捕获，全局最终都会一个不漏的抓住然后告诉你，好处是如果懒那就所有地方都不写了，问题是有些异常即使捕获但是不需要告知用户也不需要做记录（比如文件上传下载的线程中断异常之类的），所以这个只是为了保险起见而不是为了省事。\n\n### 身份验证拦截器\n接下来我们继续创建一个**AuthFilter**，目的是做身份验证的判断，如果没通过就没必要再进入具体的控制器了。\n```csharp\n    public class AuthFilter\n    {\n        private readonly RequestDelegate _next;\n\n        public AuthFilter(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public Task Invoke(HttpContext context)\n        {\n            if (context.Request.Method == \"OPTIONS\")\n            {\n                return _next(context);\n            }\n            var headers = context.Request.Headers;\n            //检查头文件是否有jwt token\n            if (!headers.ContainsKey(\"Authorization\"))\n            {\n                string path = context.Request.Path.Value;\n                if (!AprilConfig.AllowUrl.Contains(path) && path.IndexOf(\"swagger\") < 0)\n                {\n                    //这里做下相关的身份校验\n                    return ResponseUtil.HandleExceptionAsync(401, \"请登录\");\n                    \n                    //判断是否有权限查看(在身份验证后判断对应的权限，这个方法后续再写)\n                    return ResponseUtil.HandleExceptionAsync(-2, \"无权访问\");\n\n                }\n            }\n            return _next(context);\n        }\n    }\n```\n\n同样我们需要在Startup注册使用中间层。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            app.UseMiddleware<ExceptionFilter>();\n            app.UseMiddleware<AuthFilter>();\n\t\t\t…\n        }\n```\n\n### 测试\n![测试](net-core-aop-1/4.png)\n然后访问我们的Swagger，效果就很明显了。\n![Swagger](net-core-aop-1/5.png)\n\n### 小结\n这一篇主要就是引入中间层的使用，个人认为什么AOP开发OOP开发完全因人而异，没必要为了追求新技术而去整体大功能改造，新技术确实使用起来方便，也有很好的前景，但是对于企业来讲，稳定是最重要的，不会为了1%的性能速度而去冒30%甚至更高的风险，但是我还是要说一句，**net core到目前为止已经历过一个大版本的更新，虽然3.0没有正式发布，但是一个个版本的更新之后，稳定性已经很ok了，所以该吃螃蟹都可以动手了**。\n下一篇，继续引入AOP的开发，主要用的第三方的组件**AspectCore**，将针对接口调用的时候做一些常规操作。\n\n***\n\n### 补充 2019-07-31\n今天在做调试的时候发现一个问题，现状如下\n![问题](net-core-aop-1/6.png)\n发现这个问题我的第一反应是，**字符编码**，但是看到我回调的时候明显已经设置了ContentType，所以这个应该不是错误的原因，但是多次刷新的测试结果是偶尔正常，怪异的情况总是伴随着bug，于是比对了正确的回调信息和错误的回调信息（这里是通过chrome浏览器调试然后获取的回调信息，具体调试方法后续前端介绍，当然基本上都知道）。\n\n![比对结果](net-core-aop-1/7.png)\n这样一看发现了问题所在，所以这个地方决定不再自主去设置Length了。\n\n![解决](net-core-aop-1/8.png)","source":"_posts/net-core-aop-1.md","raw":"---\ntitle: net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1\ndate: 2019-07-30 18:31:10\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n一天天不知道怎么过的，但确实挺忙，事赶事不带停那种，让我感觉跟在流水线干活一样，忙活的事差不多了就喘口气继续补充这一系列的内容，前面几篇基本上把一个常规的后端服务搭建差不多了，后面的会时不时根据自己需要或者常规的测试内容来一点点完善更新。\n\n### 拦截器\n这里先不提AOP的内容，其实在我个人之前的理解，AOP开发的思想就是，我们做的某些操作例如身份验证，日志记录，异常抓捕等等这些操作，可以单独拎出来放那，谁用了加个头部标识就可以了，剩余的交给代码来处理，这样我们开发就只需要关心业务功能，而其他的全都可以不用考虑，这就是框架的好处，别人封装集成好，就可以省去很大的开发工作量。\n\n好，开始说拦截器，其实也是中间层，个人感觉跟AOP的概念类似，就放到这里写上了。\n\n### 异常拦截器\n在我们**Api**的工程目录下新建文件夹Filters用于存放拦截器，之后我们新建**ExceptionFilter**这个异常的拦截器，用于记录工程抛异常并做对应回调处理。\n\n代码如下，具体不过多解释，因为实在觉得这个没啥说的，只是注意异步调用的问题即可。\n```csharp\n    public class ExceptionFilter\n    {\n        private readonly RequestDelegate _next;\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"next\"></param>\n        public ExceptionFilter(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"context\"></param>\n        /// <returns></returns>\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context);\n            }\n            catch (Exception ex) //发生异常\n            {\n                context.Response.StatusCode = 500;\n                LogUtil.Error($\"response exception:{ex.Message}\");// {ex.StackTrace}\n                await ResponseUtil.HandleExceptionAsync(500, \"服务器错误\");\n            }\n        }\n    }\n```\n\n这个地方的**ResponseUtil**是单独在Util层创建的（公共类尽量扔到同一个工程类库下，以后一键打包，各种复用）。\n\n```csharp\n    public class ResponseUtil\n    {\n        /// <summary>\n        /// 回调\n        /// </summary>\n        /// <param name=\"statusCode\">html状态码</param>\n        /// <param name=\"msg\">消息</param>\n        /// <returns></returns>\n        public static Task HandleExceptionAsync(int statusCode, string msg)\n        {\n            var data = new { code = statusCode, msg = msg };\n            string text = JsonConvert.SerializeObject(data);\n            var response = AprilConfig.HttpCurrent.Response;\n            if (string.IsNullOrEmpty(response.ContentType))\n            {\n                //跨域的时候注意，不带header没法接收回调\n                response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\");\n                response.Headers.Add(\"Access-Control-Allow-Credentials\", \"true\");\n                //因为这个是json\n                response.ContentType = \"application/json;charset=utf-8\";\n                response.StatusCode = 200;\n                response.ContentLength = text.Length;\n                return response.WriteAsync(text);\n            }\n            else\n            {\n                return response.WriteAsync(text);\n            }\n        }\n    }\n```\n\n之后我们依然要在Startup中注册我们这个中间层。\n\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            app.UseMiddleware<ExceptionFilter>();\n\t\t\t…\n        }\n```\n\n这样我们在全局如果出现异常的时候，可以统一捕获到问题，然后做记录，当然在测试环境下注意，如果这个错误帮助页打开的时候，那上面的拦截器将毫无乱用。\n![Startup](net-core-aop-1/1.png)\n### 测试结果\n![测试](net-core-aop-1/2.png)\n![日志记录](net-core-aop-1/3.png)\n这样如果真是哪个地方没有做异常捕获，全局最终都会一个不漏的抓住然后告诉你，好处是如果懒那就所有地方都不写了，问题是有些异常即使捕获但是不需要告知用户也不需要做记录（比如文件上传下载的线程中断异常之类的），所以这个只是为了保险起见而不是为了省事。\n\n### 身份验证拦截器\n接下来我们继续创建一个**AuthFilter**，目的是做身份验证的判断，如果没通过就没必要再进入具体的控制器了。\n```csharp\n    public class AuthFilter\n    {\n        private readonly RequestDelegate _next;\n\n        public AuthFilter(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public Task Invoke(HttpContext context)\n        {\n            if (context.Request.Method == \"OPTIONS\")\n            {\n                return _next(context);\n            }\n            var headers = context.Request.Headers;\n            //检查头文件是否有jwt token\n            if (!headers.ContainsKey(\"Authorization\"))\n            {\n                string path = context.Request.Path.Value;\n                if (!AprilConfig.AllowUrl.Contains(path) && path.IndexOf(\"swagger\") < 0)\n                {\n                    //这里做下相关的身份校验\n                    return ResponseUtil.HandleExceptionAsync(401, \"请登录\");\n                    \n                    //判断是否有权限查看(在身份验证后判断对应的权限，这个方法后续再写)\n                    return ResponseUtil.HandleExceptionAsync(-2, \"无权访问\");\n\n                }\n            }\n            return _next(context);\n        }\n    }\n```\n\n同样我们需要在Startup注册使用中间层。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            app.UseMiddleware<ExceptionFilter>();\n            app.UseMiddleware<AuthFilter>();\n\t\t\t…\n        }\n```\n\n### 测试\n![测试](net-core-aop-1/4.png)\n然后访问我们的Swagger，效果就很明显了。\n![Swagger](net-core-aop-1/5.png)\n\n### 小结\n这一篇主要就是引入中间层的使用，个人认为什么AOP开发OOP开发完全因人而异，没必要为了追求新技术而去整体大功能改造，新技术确实使用起来方便，也有很好的前景，但是对于企业来讲，稳定是最重要的，不会为了1%的性能速度而去冒30%甚至更高的风险，但是我还是要说一句，**net core到目前为止已经历过一个大版本的更新，虽然3.0没有正式发布，但是一个个版本的更新之后，稳定性已经很ok了，所以该吃螃蟹都可以动手了**。\n下一篇，继续引入AOP的开发，主要用的第三方的组件**AspectCore**，将针对接口调用的时候做一些常规操作。\n\n***\n\n### 补充 2019-07-31\n今天在做调试的时候发现一个问题，现状如下\n![问题](net-core-aop-1/6.png)\n发现这个问题我的第一反应是，**字符编码**，但是看到我回调的时候明显已经设置了ContentType，所以这个应该不是错误的原因，但是多次刷新的测试结果是偶尔正常，怪异的情况总是伴随着bug，于是比对了正确的回调信息和错误的回调信息（这里是通过chrome浏览器调试然后获取的回调信息，具体调试方法后续前端介绍，当然基本上都知道）。\n\n![比对结果](net-core-aop-1/7.png)\n这样一看发现了问题所在，所以这个地方决定不再自主去设置Length了。\n\n![解决](net-core-aop-1/8.png)","slug":"net-core-aop-1","published":1,"updated":"2019-09-30T05:45:57.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2g00109sv7q0kk6866","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一天天不知道怎么过的，但确实挺忙，事赶事不带停那种，让我感觉跟在流水线干活一样，忙活的事差不多了就喘口气继续补充这一系列的内容，前面几篇基本上把一个常规的后端服务搭建差不多了，后面的会时不时根据自己需要或者常规的测试内容来一点点完善更新。</p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>这里先不提AOP的内容，其实在我个人之前的理解，AOP开发的思想就是，我们做的某些操作例如身份验证，日志记录，异常抓捕等等这些操作，可以单独拎出来放那，谁用了加个头部标识就可以了，剩余的交给代码来处理，这样我们开发就只需要关心业务功能，而其他的全都可以不用考虑，这就是框架的好处，别人封装集成好，就可以省去很大的开发工作量。</p>\n<p>好，开始说拦截器，其实也是中间层，个人感觉跟AOP的概念类似，就放到这里写上了。</p>\n<h3 id=\"异常拦截器\"><a href=\"#异常拦截器\" class=\"headerlink\" title=\"异常拦截器\"></a>异常拦截器</h3><p>在我们<strong>Api</strong>的工程目录下新建文件夹Filters用于存放拦截器，之后我们新建<strong>ExceptionFilter</strong>这个异常的拦截器，用于记录工程抛异常并做对应回调处理。</p>\n<p>代码如下，具体不过多解释，因为实在觉得这个没啥说的，只是注意异步调用的问题即可。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"next\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionFilter</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"context\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) <span class=\"comment\">//发生异常</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">500</span>;</span><br><span class=\"line\">            LogUtil.Error(<span class=\"string\">$\"response exception:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);<span class=\"comment\">// &#123;ex.StackTrace&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">500</span>, <span class=\"string\">\"服务器错误\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个地方的<strong>ResponseUtil</strong>是单独在Util层创建的（公共类尽量扔到同一个工程类库下，以后一键打包，各种复用）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResponseUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 回调</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"statusCode\"&gt;</span>html状态码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span>消息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">HandleExceptionAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> statusCode, <span class=\"keyword\">string</span> msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> &#123; code = statusCode, msg = msg &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> text = JsonConvert.SerializeObject(data);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> response = AprilConfig.HttpCurrent.Response;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(response.ContentType))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//跨域的时候注意，不带header没法接收回调</span></span><br><span class=\"line\">            response.Headers.Add(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">            response.Headers.Add(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//因为这个是json</span></span><br><span class=\"line\">            response.ContentType = <span class=\"string\">\"application/json;charset=utf-8\"</span>;</span><br><span class=\"line\">            response.StatusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">            response.ContentLength = text.Length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.WriteAsync(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.WriteAsync(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们依然要在Startup中注册我们这个中间层。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>     &#123;</span><br><span class=\"line\">         app.UseMiddleware&lt;ExceptionFilter&gt;();</span><br><span class=\"line\">…</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们在全局如果出现异常的时候，可以统一捕获到问题，然后做记录，当然在测试环境下注意，如果这个错误帮助页打开的时候，那上面的拦截器将毫无乱用。<br><img src=\"/2019/07/30/net-core-aop-1/1.png\" alt=\"Startup\"></p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><img src=\"/2019/07/30/net-core-aop-1/2.png\" alt=\"测试\"><br><img src=\"/2019/07/30/net-core-aop-1/3.png\" alt=\"日志记录\"><br>这样如果真是哪个地方没有做异常捕获，全局最终都会一个不漏的抓住然后告诉你，好处是如果懒那就所有地方都不写了，问题是有些异常即使捕获但是不需要告知用户也不需要做记录（比如文件上传下载的线程中断异常之类的），所以这个只是为了保险起见而不是为了省事。</p>\n<h3 id=\"身份验证拦截器\"><a href=\"#身份验证拦截器\" class=\"headerlink\" title=\"身份验证拦截器\"></a>身份验证拦截器</h3><p>接下来我们继续创建一个<strong>AuthFilter</strong>，目的是做身份验证的判断，如果没通过就没必要再进入具体的控制器了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuthFilter</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.Request.Method == <span class=\"string\">\"OPTIONS\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> headers = context.Request.Headers;</span><br><span class=\"line\">        <span class=\"comment\">//检查头文件是否有jwt token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!headers.ContainsKey(<span class=\"string\">\"Authorization\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> path = context.Request.Path.Value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!AprilConfig.AllowUrl.Contains(path) &amp;&amp; path.IndexOf(<span class=\"string\">\"swagger\"</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里做下相关的身份校验</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">401</span>, <span class=\"string\">\"请登录\"</span>);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//判断是否有权限查看(在身份验证后判断对应的权限，这个方法后续再写)</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">-2</span>, <span class=\"string\">\"无权访问\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _next(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样我们需要在Startup注册使用中间层。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>     &#123;</span><br><span class=\"line\">         app.UseMiddleware&lt;ExceptionFilter&gt;();</span><br><span class=\"line\">         app.UseMiddleware&lt;AuthFilter&gt;();</span><br><span class=\"line\">…</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/2019/07/30/net-core-aop-1/4.png\" alt=\"测试\"><br>然后访问我们的Swagger，效果就很明显了。<br><img src=\"/2019/07/30/net-core-aop-1/5.png\" alt=\"Swagger\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这一篇主要就是引入中间层的使用，个人认为什么AOP开发OOP开发完全因人而异，没必要为了追求新技术而去整体大功能改造，新技术确实使用起来方便，也有很好的前景，但是对于企业来讲，稳定是最重要的，不会为了1%的性能速度而去冒30%甚至更高的风险，但是我还是要说一句，<strong>net core到目前为止已经历过一个大版本的更新，虽然3.0没有正式发布，但是一个个版本的更新之后，稳定性已经很ok了，所以该吃螃蟹都可以动手了</strong>。<br>下一篇，继续引入AOP的开发，主要用的第三方的组件<strong>AspectCore</strong>，将针对接口调用的时候做一些常规操作。</p>\n<hr>\n<h3 id=\"补充-2019-07-31\"><a href=\"#补充-2019-07-31\" class=\"headerlink\" title=\"补充 2019-07-31\"></a>补充 2019-07-31</h3><p>今天在做调试的时候发现一个问题，现状如下<br><img src=\"/2019/07/30/net-core-aop-1/6.png\" alt=\"问题\"><br>发现这个问题我的第一反应是，<strong>字符编码</strong>，但是看到我回调的时候明显已经设置了ContentType，所以这个应该不是错误的原因，但是多次刷新的测试结果是偶尔正常，怪异的情况总是伴随着bug，于是比对了正确的回调信息和错误的回调信息（这里是通过chrome浏览器调试然后获取的回调信息，具体调试方法后续前端介绍，当然基本上都知道）。</p>\n<p><img src=\"/2019/07/30/net-core-aop-1/7.png\" alt=\"比对结果\"><br>这样一看发现了问题所在，所以这个地方决定不再自主去设置Length了。</p>\n<p><img src=\"/2019/07/30/net-core-aop-1/8.png\" alt=\"解决\"></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一天天不知道怎么过的，但确实挺忙，事赶事不带停那种，让我感觉跟在流水线干活一样，忙活的事差不多了就喘口气继续补充这一系列的内容，前面几篇基本上把一个常规的后端服务搭建差不多了，后面的会时不时根据自己需要或者常规的测试内容来一点点完善更新。</p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>这里先不提AOP的内容，其实在我个人之前的理解，AOP开发的思想就是，我们做的某些操作例如身份验证，日志记录，异常抓捕等等这些操作，可以单独拎出来放那，谁用了加个头部标识就可以了，剩余的交给代码来处理，这样我们开发就只需要关心业务功能，而其他的全都可以不用考虑，这就是框架的好处，别人封装集成好，就可以省去很大的开发工作量。</p>\n<p>好，开始说拦截器，其实也是中间层，个人感觉跟AOP的概念类似，就放到这里写上了。</p>\n<h3 id=\"异常拦截器\"><a href=\"#异常拦截器\" class=\"headerlink\" title=\"异常拦截器\"></a>异常拦截器</h3><p>在我们<strong>Api</strong>的工程目录下新建文件夹Filters用于存放拦截器，之后我们新建<strong>ExceptionFilter</strong>这个异常的拦截器，用于记录工程抛异常并做对应回调处理。</p>\n<p>代码如下，具体不过多解释，因为实在觉得这个没啥说的，只是注意异步调用的问题即可。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExceptionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"next\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionFilter</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"context\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) <span class=\"comment\">//发生异常</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Response.StatusCode = <span class=\"number\">500</span>;</span><br><span class=\"line\">            LogUtil.Error(<span class=\"string\">$\"response exception:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);<span class=\"comment\">// &#123;ex.StackTrace&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">500</span>, <span class=\"string\">\"服务器错误\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个地方的<strong>ResponseUtil</strong>是单独在Util层创建的（公共类尽量扔到同一个工程类库下，以后一键打包，各种复用）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ResponseUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 回调</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"statusCode\"&gt;</span>html状态码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span>消息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task <span class=\"title\">HandleExceptionAsync</span>(<span class=\"params\"><span class=\"keyword\">int</span> statusCode, <span class=\"keyword\">string</span> msg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> &#123; code = statusCode, msg = msg &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> text = JsonConvert.SerializeObject(data);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> response = AprilConfig.HttpCurrent.Response;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(response.ContentType))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//跨域的时候注意，不带header没法接收回调</span></span><br><span class=\"line\">            response.Headers.Add(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">            response.Headers.Add(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//因为这个是json</span></span><br><span class=\"line\">            response.ContentType = <span class=\"string\">\"application/json;charset=utf-8\"</span>;</span><br><span class=\"line\">            response.StatusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">            response.ContentLength = text.Length;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.WriteAsync(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response.WriteAsync(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们依然要在Startup中注册我们这个中间层。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>     &#123;</span><br><span class=\"line\">         app.UseMiddleware&lt;ExceptionFilter&gt;();</span><br><span class=\"line\">…</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们在全局如果出现异常的时候，可以统一捕获到问题，然后做记录，当然在测试环境下注意，如果这个错误帮助页打开的时候，那上面的拦截器将毫无乱用。<br><img src=\"/2019/07/30/net-core-aop-1/1.png\" alt=\"Startup\"></p>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p><img src=\"/2019/07/30/net-core-aop-1/2.png\" alt=\"测试\"><br><img src=\"/2019/07/30/net-core-aop-1/3.png\" alt=\"日志记录\"><br>这样如果真是哪个地方没有做异常捕获，全局最终都会一个不漏的抓住然后告诉你，好处是如果懒那就所有地方都不写了，问题是有些异常即使捕获但是不需要告知用户也不需要做记录（比如文件上传下载的线程中断异常之类的），所以这个只是为了保险起见而不是为了省事。</p>\n<h3 id=\"身份验证拦截器\"><a href=\"#身份验证拦截器\" class=\"headerlink\" title=\"身份验证拦截器\"></a>身份验证拦截器</h3><p>接下来我们继续创建一个<strong>AuthFilter</strong>，目的是做身份验证的判断，如果没通过就没必要再进入具体的控制器了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuthFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate _next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuthFilter</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.Request.Method == <span class=\"string\">\"OPTIONS\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _next(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> headers = context.Request.Headers;</span><br><span class=\"line\">        <span class=\"comment\">//检查头文件是否有jwt token</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!headers.ContainsKey(<span class=\"string\">\"Authorization\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> path = context.Request.Path.Value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!AprilConfig.AllowUrl.Contains(path) &amp;&amp; path.IndexOf(<span class=\"string\">\"swagger\"</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里做下相关的身份校验</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">401</span>, <span class=\"string\">\"请登录\"</span>);</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//判断是否有权限查看(在身份验证后判断对应的权限，这个方法后续再写)</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ResponseUtil.HandleExceptionAsync(<span class=\"number\">-2</span>, <span class=\"string\">\"无权访问\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _next(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样我们需要在Startup注册使用中间层。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>     &#123;</span><br><span class=\"line\">         app.UseMiddleware&lt;ExceptionFilter&gt;();</span><br><span class=\"line\">         app.UseMiddleware&lt;AuthFilter&gt;();</span><br><span class=\"line\">…</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/2019/07/30/net-core-aop-1/4.png\" alt=\"测试\"><br>然后访问我们的Swagger，效果就很明显了。<br><img src=\"/2019/07/30/net-core-aop-1/5.png\" alt=\"Swagger\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这一篇主要就是引入中间层的使用，个人认为什么AOP开发OOP开发完全因人而异，没必要为了追求新技术而去整体大功能改造，新技术确实使用起来方便，也有很好的前景，但是对于企业来讲，稳定是最重要的，不会为了1%的性能速度而去冒30%甚至更高的风险，但是我还是要说一句，<strong>net core到目前为止已经历过一个大版本的更新，虽然3.0没有正式发布，但是一个个版本的更新之后，稳定性已经很ok了，所以该吃螃蟹都可以动手了</strong>。<br>下一篇，继续引入AOP的开发，主要用的第三方的组件<strong>AspectCore</strong>，将针对接口调用的时候做一些常规操作。</p>\n<hr>\n<h3 id=\"补充-2019-07-31\"><a href=\"#补充-2019-07-31\" class=\"headerlink\" title=\"补充 2019-07-31\"></a>补充 2019-07-31</h3><p>今天在做调试的时候发现一个问题，现状如下<br><img src=\"/2019/07/30/net-core-aop-1/6.png\" alt=\"问题\"><br>发现这个问题我的第一反应是，<strong>字符编码</strong>，但是看到我回调的时候明显已经设置了ContentType，所以这个应该不是错误的原因，但是多次刷新的测试结果是偶尔正常，怪异的情况总是伴随着bug，于是比对了正确的回调信息和错误的回调信息（这里是通过chrome浏览器调试然后获取的回调信息，具体调试方法后续前端介绍，当然基本上都知道）。</p>\n<p><img src=\"/2019/07/30/net-core-aop-1/7.png\" alt=\"比对结果\"><br>这样一看发现了问题所在，所以这个地方决定不再自主去设置Length了。</p>\n<p><img src=\"/2019/07/30/net-core-aop-1/8.png\" alt=\"解决\"></p>\n"},{"title":"net core Webapi基础工程搭建（二）——创建工程","date":"2019-07-02T10:16:23.000Z","_content":"\n### 前言\n前面介绍了开发工具及net core版本，后端工程的框架结构[开发工具及环境](/2019/07/02/net-core-tools-and-environment/)，因为是基础工程，所以没考虑太复杂的框架，如果有架构师请勿喷。\n\n### 创建工程\n废话不多说，撸起袖子干。\n打开vs2019，左上角->文件->新建->项目\n![新建](net-core-createprogram/1.png)\n一般不需要检索，毕竟就几个，找到这个Web 应用程序，点击下一步。\n![新建](net-core-createprogram/2.png)\n自己起个名字，选个路径，点击创建。\n![新建](net-core-createprogram/3.png)\n基本上该标注的都标注了，启用HTTPS这个看自己需要，勾选了之后就可以通过https://访问，至于Docker支持这个，先挖个坑，后面鼓捣Docker的时候专门介绍，其实个人感觉跨平台主要得力于Docker这个说是虚拟机也不算，说是服务器也不算的工具。\n创建完成后基本上都可以看到这个工程的大概东西了。\n![新建](net-core-createprogram/4.png)\n### 工程文件概述（个人理解）\n- **Properties**\n这下面有个launchSettings.json，这是个系统配置文件，iis的端口，请求地址，默认地址等等的配置。\n- **Controllers**\n你的所有控制器（搞过mvc的不用多说）都在这里，其实说白了就是你的接口API，至于Method，Router都是你自己在每个Api控制器里编辑，具体业务逻辑也是在对应接口实现。\n- **appsettings.json**\n这个是配置项文件，net core的web.config，用json来配置个人感觉还是比较舒服的，最起码看着方便，参数什么的也都清楚。\n-  **Program.cs**\n入口文件，没啥说的，我鼓捣的也不多，说实话做了一个工程这个地方貌似没改动，这个地方可以选择使用哪个Startup（如果你有多个的话）。\n- **Startup.cs**\n这个文件就比较厉害了，后续做的Log，Swagger等等第三方类库或者其他有些配置还有你的Service，都需要（有些是最好）在这个文件下注册，先切出代码看下。\n![Startup.cs](net-core-createprogram/5.png)\n- Startup\n```csharp\n\t\tpublic Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n```\n- ConfigureServices\n\n构造函数这块儿就不多说了，实例化Configuration，这个就是系统整体的Config，AppKey的具体参数是在appsettings.json里配置的（.netframework的AppSettings -,-||）\n\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n```\n\n在Configure前由主机调用执行，services主要用来注册服务以及定义一些系统的配置信息，后续使用Swagger，Quartz等服务都是需要在这个地方注册下。\n\n- Configure\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n这个Configure个人感觉是在services注册过后，这个地方要告诉管道我要用，所以基本上都是Use，并且在这里可以添加中间层。\n\n### 运行\n简单介绍了下创建的工程内容后，一通Ctrl+F5，不出意外的话你看不到欢迎界面，就只要一个字符串数组，这就是你的ValuesController的GET请求返回的结果，如果需要更改默认启动页面，可以在Properties下面的json文件修改launchUrl。\n\n### 小结\n工程创建完成，下一步就要引入一些第三方的类库来完成一个基础工程常规的使用了。\n\n","source":"_posts/net-core-createprogram.md","raw":"---\ntitle: net core Webapi基础工程搭建（二）——创建工程\ndate: 2019-07-02 18:16:23\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n前面介绍了开发工具及net core版本，后端工程的框架结构[开发工具及环境](/2019/07/02/net-core-tools-and-environment/)，因为是基础工程，所以没考虑太复杂的框架，如果有架构师请勿喷。\n\n### 创建工程\n废话不多说，撸起袖子干。\n打开vs2019，左上角->文件->新建->项目\n![新建](net-core-createprogram/1.png)\n一般不需要检索，毕竟就几个，找到这个Web 应用程序，点击下一步。\n![新建](net-core-createprogram/2.png)\n自己起个名字，选个路径，点击创建。\n![新建](net-core-createprogram/3.png)\n基本上该标注的都标注了，启用HTTPS这个看自己需要，勾选了之后就可以通过https://访问，至于Docker支持这个，先挖个坑，后面鼓捣Docker的时候专门介绍，其实个人感觉跨平台主要得力于Docker这个说是虚拟机也不算，说是服务器也不算的工具。\n创建完成后基本上都可以看到这个工程的大概东西了。\n![新建](net-core-createprogram/4.png)\n### 工程文件概述（个人理解）\n- **Properties**\n这下面有个launchSettings.json，这是个系统配置文件，iis的端口，请求地址，默认地址等等的配置。\n- **Controllers**\n你的所有控制器（搞过mvc的不用多说）都在这里，其实说白了就是你的接口API，至于Method，Router都是你自己在每个Api控制器里编辑，具体业务逻辑也是在对应接口实现。\n- **appsettings.json**\n这个是配置项文件，net core的web.config，用json来配置个人感觉还是比较舒服的，最起码看着方便，参数什么的也都清楚。\n-  **Program.cs**\n入口文件，没啥说的，我鼓捣的也不多，说实话做了一个工程这个地方貌似没改动，这个地方可以选择使用哪个Startup（如果你有多个的话）。\n- **Startup.cs**\n这个文件就比较厉害了，后续做的Log，Swagger等等第三方类库或者其他有些配置还有你的Service，都需要（有些是最好）在这个文件下注册，先切出代码看下。\n![Startup.cs](net-core-createprogram/5.png)\n- Startup\n```csharp\n\t\tpublic Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n```\n- ConfigureServices\n\n构造函数这块儿就不多说了，实例化Configuration，这个就是系统整体的Config，AppKey的具体参数是在appsettings.json里配置的（.netframework的AppSettings -,-||）\n\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n        }\n```\n\n在Configure前由主机调用执行，services主要用来注册服务以及定义一些系统的配置信息，后续使用Swagger，Quartz等服务都是需要在这个地方注册下。\n\n- Configure\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n                app.UseHsts();\n            }\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n这个Configure个人感觉是在services注册过后，这个地方要告诉管道我要用，所以基本上都是Use，并且在这里可以添加中间层。\n\n### 运行\n简单介绍了下创建的工程内容后，一通Ctrl+F5，不出意外的话你看不到欢迎界面，就只要一个字符串数组，这就是你的ValuesController的GET请求返回的结果，如果需要更改默认启动页面，可以在Properties下面的json文件修改launchUrl。\n\n### 小结\n工程创建完成，下一步就要引入一些第三方的类库来完成一个基础工程常规的使用了。\n\n","slug":"net-core-createprogram","published":1,"updated":"2019-09-30T05:46:06.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2j00129sv71s68td3s","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前面介绍了开发工具及net core版本，后端工程的框架结构<a href=\"/2019/07/02/net-core-tools-and-environment/\">开发工具及环境</a>，因为是基础工程，所以没考虑太复杂的框架，如果有架构师请勿喷。</p>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><p>废话不多说，撸起袖子干。<br>打开vs2019，左上角-&gt;文件-&gt;新建-&gt;项目<br><img src=\"/2019/07/02/net-core-createprogram/1.png\" alt=\"新建\"><br>一般不需要检索，毕竟就几个，找到这个Web 应用程序，点击下一步。<br><img src=\"/2019/07/02/net-core-createprogram/2.png\" alt=\"新建\"><br>自己起个名字，选个路径，点击创建。<br><img src=\"/2019/07/02/net-core-createprogram/3.png\" alt=\"新建\"><br>基本上该标注的都标注了，启用HTTPS这个看自己需要，勾选了之后就可以通过https://访问，至于Docker支持这个，先挖个坑，后面鼓捣Docker的时候专门介绍，其实个人感觉跨平台主要得力于Docker这个说是虚拟机也不算，说是服务器也不算的工具。<br>创建完成后基本上都可以看到这个工程的大概东西了。<br><img src=\"/2019/07/02/net-core-createprogram/4.png\" alt=\"新建\"></p>\n<h3 id=\"工程文件概述（个人理解）\"><a href=\"#工程文件概述（个人理解）\" class=\"headerlink\" title=\"工程文件概述（个人理解）\"></a>工程文件概述（个人理解）</h3><ul>\n<li><p><strong>Properties</strong><br>这下面有个launchSettings.json，这是个系统配置文件，iis的端口，请求地址，默认地址等等的配置。</p>\n</li>\n<li><p><strong>Controllers</strong><br>你的所有控制器（搞过mvc的不用多说）都在这里，其实说白了就是你的接口API，至于Method，Router都是你自己在每个Api控制器里编辑，具体业务逻辑也是在对应接口实现。</p>\n</li>\n<li><p><strong>appsettings.json</strong><br>这个是配置项文件，net core的web.config，用json来配置个人感觉还是比较舒服的，最起码看着方便，参数什么的也都清楚。</p>\n</li>\n<li><p><strong>Program.cs</strong><br>入口文件，没啥说的，我鼓捣的也不多，说实话做了一个工程这个地方貌似没改动，这个地方可以选择使用哪个Startup（如果你有多个的话）。</p>\n</li>\n<li><p><strong>Startup.cs</strong><br>这个文件就比较厉害了，后续做的Log，Swagger等等第三方类库或者其他有些配置还有你的Service，都需要（有些是最好）在这个文件下注册，先切出代码看下。<br><img src=\"/2019/07/02/net-core-createprogram/5.png\" alt=\"Startup.cs\"></p>\n</li>\n<li><p>Startup</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          Configuration = configuration;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ConfigureServices</p>\n</li>\n</ul>\n<p>构造函数这块儿就不多说了，实例化Configuration，这个就是系统整体的Config，AppKey的具体参数是在appsettings.json里配置的（.netframework的AppSettings -,-||）</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Configure前由主机调用执行，services主要用来注册服务以及定义一些系统的配置信息，后续使用Swagger，Quartz等服务都是需要在这个地方注册下。</p>\n<ul>\n<li>Configure<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span></span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>这个Configure个人感觉是在services注册过后，这个地方要告诉管道我要用，所以基本上都是Use，并且在这里可以添加中间层。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>简单介绍了下创建的工程内容后，一通Ctrl+F5，不出意外的话你看不到欢迎界面，就只要一个字符串数组，这就是你的ValuesController的GET请求返回的结果，如果需要更改默认启动页面，可以在Properties下面的json文件修改launchUrl。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>工程创建完成，下一步就要引入一些第三方的类库来完成一个基础工程常规的使用了。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前面介绍了开发工具及net core版本，后端工程的框架结构<a href=\"/2019/07/02/net-core-tools-and-environment/\">开发工具及环境</a>，因为是基础工程，所以没考虑太复杂的框架，如果有架构师请勿喷。</p>\n<h3 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h3><p>废话不多说，撸起袖子干。<br>打开vs2019，左上角-&gt;文件-&gt;新建-&gt;项目<br><img src=\"/2019/07/02/net-core-createprogram/1.png\" alt=\"新建\"><br>一般不需要检索，毕竟就几个，找到这个Web 应用程序，点击下一步。<br><img src=\"/2019/07/02/net-core-createprogram/2.png\" alt=\"新建\"><br>自己起个名字，选个路径，点击创建。<br><img src=\"/2019/07/02/net-core-createprogram/3.png\" alt=\"新建\"><br>基本上该标注的都标注了，启用HTTPS这个看自己需要，勾选了之后就可以通过https://访问，至于Docker支持这个，先挖个坑，后面鼓捣Docker的时候专门介绍，其实个人感觉跨平台主要得力于Docker这个说是虚拟机也不算，说是服务器也不算的工具。<br>创建完成后基本上都可以看到这个工程的大概东西了。<br><img src=\"/2019/07/02/net-core-createprogram/4.png\" alt=\"新建\"></p>\n<h3 id=\"工程文件概述（个人理解）\"><a href=\"#工程文件概述（个人理解）\" class=\"headerlink\" title=\"工程文件概述（个人理解）\"></a>工程文件概述（个人理解）</h3><ul>\n<li><p><strong>Properties</strong><br>这下面有个launchSettings.json，这是个系统配置文件，iis的端口，请求地址，默认地址等等的配置。</p>\n</li>\n<li><p><strong>Controllers</strong><br>你的所有控制器（搞过mvc的不用多说）都在这里，其实说白了就是你的接口API，至于Method，Router都是你自己在每个Api控制器里编辑，具体业务逻辑也是在对应接口实现。</p>\n</li>\n<li><p><strong>appsettings.json</strong><br>这个是配置项文件，net core的web.config，用json来配置个人感觉还是比较舒服的，最起码看着方便，参数什么的也都清楚。</p>\n</li>\n<li><p><strong>Program.cs</strong><br>入口文件，没啥说的，我鼓捣的也不多，说实话做了一个工程这个地方貌似没改动，这个地方可以选择使用哪个Startup（如果你有多个的话）。</p>\n</li>\n<li><p><strong>Startup.cs</strong><br>这个文件就比较厉害了，后续做的Log，Swagger等等第三方类库或者其他有些配置还有你的Service，都需要（有些是最好）在这个文件下注册，先切出代码看下。<br><img src=\"/2019/07/02/net-core-createprogram/5.png\" alt=\"Startup.cs\"></p>\n</li>\n<li><p>Startup</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          Configuration = configuration;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ConfigureServices</p>\n</li>\n</ul>\n<p>构造函数这块儿就不多说了，实例化Configuration，这个就是系统整体的Config，AppKey的具体参数是在appsettings.json里配置的（.netframework的AppSettings -,-||）</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Configure前由主机调用执行，services主要用来注册服务以及定义一些系统的配置信息，后续使用Swagger，Quartz等服务都是需要在这个地方注册下。</p>\n<ul>\n<li>Configure<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span></span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>这个Configure个人感觉是在services注册过后，这个地方要告诉管道我要用，所以基本上都是Use，并且在这里可以添加中间层。</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>简单介绍了下创建的工程内容后，一通Ctrl+F5，不出意外的话你看不到欢迎界面，就只要一个字符串数组，这就是你的ValuesController的GET请求返回的结果，如果需要更改默认启动页面，可以在Properties下面的json文件修改launchUrl。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>工程创建完成，下一步就要引入一些第三方的类库来完成一个基础工程常规的使用了。</p>\n"},{"title":"laravel 队列学习","date":"2019-04-09T15:00:00.000Z","_content":"\n学习下 laravel 的队列系统。\n![](laravel-queues/laravel.jpg)\n\n队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。\n\n常用的队列后台有： Beanstalk，Amazon SQS，Redis 等。\n<!-- more -->\n\n#### 配置\nlaravel 为多种队列服务做了统一的API，在配置文件 `config/queue.php` 中可以找到每种队列驱动的配置。\n\n其中每种驱动都有一个默认的 queue 属性，用来存放使用时没有显示定义队列的任务。\n\n```php\n// 分发到默认队列\nJob::dispatch();\n\n// 分发到 emails 队列\nJob::dispatch()->onQueue('emails');\n```\n\n在项目的配置文件中，可以指定驱动，老版本中为 `QUEUE_DRIVER`，新版本中为`QUEUE_CONNECTION` , 驱动默认为 `sync`，这是一个本地的同步驱动，方便调试队列里的任务。\n\n先以 redis 为例做一个邮件发送队列。\n\n因为 laravel 的 redis 默认使用了 predis，所以先装下扩展：\n\n```composer\ncomposer require 'predis/predis'\n```\n\n邮件配置，最后两项是手动添加的，否则会报错：\n```env\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mxhichina.com\nMAIL_PORT=25\nMAIL_USERNAME=m@m-finder.com\nMAIL_PASSWORD=xxxxxx\nMAIL_ENCRYPTION=null\nMAIL_FROM_NAME=M-finder\nMAIL_FROM_ADDRESS=m@m-finder.com\n```\n\n#### 生成任务类\n命令行执行：`php artisan make:job EmailJob`，该命令会在 `app/jobs` 下自动创建文件。\n\n在任务类中发送邮件：\n```php\npublic function handle() {\n    $email = $this->email;\n    $content = '这是一封来自Laravel的队列测试邮件.';\n    Mail::raw($content, function ($message) use ($email) {\n        $message->subject('[ 测试 ] 测试邮件SendMail - ' . date('Y-m-d H:i:s'));\n        $message->to($email);\n    });\n}\n```\n\n#### 任务调度\n\n之前弄了登录事件和监听，就在监听里去触发吧。\n\n```php\nEmailJob::dispatch($guard->user)->onQueue('emails');\n```\n\n#### 开启队列\n```php\nphp artisan queue:work --tries=3 --timeout=30 --queue=emails \n```\n\n然后重新登录触发任务。\n可以看到邮箱已经有了提示：\n\n![邮件通知](laravel-queues/email.png)\n\n邮件已经成功发出，接下来就可以在实际的需求中使用了。\n","source":"_posts/laravel-queues.md","raw":"---\ntitle: laravel 队列学习\ndate: 2019-04-09 23:00:00\ntags: laravel\ncategories: 南瓜\n---\n\n学习下 laravel 的队列系统。\n![](laravel-queues/laravel.jpg)\n\n队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。\n\n常用的队列后台有： Beanstalk，Amazon SQS，Redis 等。\n<!-- more -->\n\n#### 配置\nlaravel 为多种队列服务做了统一的API，在配置文件 `config/queue.php` 中可以找到每种队列驱动的配置。\n\n其中每种驱动都有一个默认的 queue 属性，用来存放使用时没有显示定义队列的任务。\n\n```php\n// 分发到默认队列\nJob::dispatch();\n\n// 分发到 emails 队列\nJob::dispatch()->onQueue('emails');\n```\n\n在项目的配置文件中，可以指定驱动，老版本中为 `QUEUE_DRIVER`，新版本中为`QUEUE_CONNECTION` , 驱动默认为 `sync`，这是一个本地的同步驱动，方便调试队列里的任务。\n\n先以 redis 为例做一个邮件发送队列。\n\n因为 laravel 的 redis 默认使用了 predis，所以先装下扩展：\n\n```composer\ncomposer require 'predis/predis'\n```\n\n邮件配置，最后两项是手动添加的，否则会报错：\n```env\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.mxhichina.com\nMAIL_PORT=25\nMAIL_USERNAME=m@m-finder.com\nMAIL_PASSWORD=xxxxxx\nMAIL_ENCRYPTION=null\nMAIL_FROM_NAME=M-finder\nMAIL_FROM_ADDRESS=m@m-finder.com\n```\n\n#### 生成任务类\n命令行执行：`php artisan make:job EmailJob`，该命令会在 `app/jobs` 下自动创建文件。\n\n在任务类中发送邮件：\n```php\npublic function handle() {\n    $email = $this->email;\n    $content = '这是一封来自Laravel的队列测试邮件.';\n    Mail::raw($content, function ($message) use ($email) {\n        $message->subject('[ 测试 ] 测试邮件SendMail - ' . date('Y-m-d H:i:s'));\n        $message->to($email);\n    });\n}\n```\n\n#### 任务调度\n\n之前弄了登录事件和监听，就在监听里去触发吧。\n\n```php\nEmailJob::dispatch($guard->user)->onQueue('emails');\n```\n\n#### 开启队列\n```php\nphp artisan queue:work --tries=3 --timeout=30 --queue=emails \n```\n\n然后重新登录触发任务。\n可以看到邮箱已经有了提示：\n\n![邮件通知](laravel-queues/email.png)\n\n邮件已经成功发出，接下来就可以在实际的需求中使用了。\n","slug":"laravel-queues","published":1,"updated":"2019-09-30T05:50:50.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2k00159sv7y039seov","content":"<p>学习下 laravel 的队列系统。<br><img src=\"/2019/04/09/laravel-queues/laravel.jpg\" alt></p>\n<p>队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。</p>\n<p>常用的队列后台有： Beanstalk，Amazon SQS，Redis 等。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>laravel 为多种队列服务做了统一的API，在配置文件 <code>config/queue.php</code> 中可以找到每种队列驱动的配置。</p>\n<p>其中每种驱动都有一个默认的 queue 属性，用来存放使用时没有显示定义队列的任务。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分发到默认队列</span></span><br><span class=\"line\">Job::dispatch();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分发到 emails 队列</span></span><br><span class=\"line\">Job::dispatch()-&gt;onQueue(<span class=\"string\">'emails'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在项目的配置文件中，可以指定驱动，老版本中为 <code>QUEUE_DRIVER</code>，新版本中为<code>QUEUE_CONNECTION</code> , 驱动默认为 <code>sync</code>，这是一个本地的同步驱动，方便调试队列里的任务。</p>\n<p>先以 redis 为例做一个邮件发送队列。</p>\n<p>因为 laravel 的 redis 默认使用了 predis，所以先装下扩展：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require &apos;predis/predis&apos;</span><br></pre></td></tr></table></figure>\n\n<p>邮件配置，最后两项是手动添加的，否则会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.mxhichina.com</span><br><span class=\"line\">MAIL_PORT=25</span><br><span class=\"line\">MAIL_USERNAME=m@m-finder.com</span><br><span class=\"line\">MAIL_PASSWORD=xxxxxx</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\">MAIL_FROM_NAME=M-finder</span><br><span class=\"line\">MAIL_FROM_ADDRESS=m@m-finder.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成任务类\"><a href=\"#生成任务类\" class=\"headerlink\" title=\"生成任务类\"></a>生成任务类</h4><p>命令行执行：<code>php artisan make:job EmailJob</code>，该命令会在 <code>app/jobs</code> 下自动创建文件。</p>\n<p>在任务类中发送邮件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $email = <span class=\"keyword\">$this</span>-&gt;email;</span><br><span class=\"line\">    $content = <span class=\"string\">'这是一封来自Laravel的队列测试邮件.'</span>;</span><br><span class=\"line\">    Mail::raw($content, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($message)</span> <span class=\"title\">use</span> <span class=\"params\">($email)</span> </span>&#123;</span><br><span class=\"line\">        $message-&gt;subject(<span class=\"string\">'[ 测试 ] 测试邮件SendMail - '</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>));</span><br><span class=\"line\">        $message-&gt;to($email);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h4><p>之前弄了登录事件和监听，就在监听里去触发吧。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmailJob::dispatch($guard-&gt;user)-&gt;onQueue(<span class=\"string\">'emails'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启队列\"><a href=\"#开启队列\" class=\"headerlink\" title=\"开启队列\"></a>开启队列</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan queue:work --tries=<span class=\"number\">3</span> --timeout=<span class=\"number\">30</span> --queue=emails</span><br></pre></td></tr></table></figure>\n\n<p>然后重新登录触发任务。<br>可以看到邮箱已经有了提示：</p>\n<p><img src=\"/2019/04/09/laravel-queues/email.png\" alt=\"邮件通知\"></p>\n<p>邮件已经成功发出，接下来就可以在实际的需求中使用了。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"<p>学习下 laravel 的队列系统。<br><img src=\"/2019/04/09/laravel-queues/laravel.jpg\" alt></p>\n<p>队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短 Web 请求和相应的时间。</p>\n<p>常用的队列后台有： Beanstalk，Amazon SQS，Redis 等。</p>","more":"<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>laravel 为多种队列服务做了统一的API，在配置文件 <code>config/queue.php</code> 中可以找到每种队列驱动的配置。</p>\n<p>其中每种驱动都有一个默认的 queue 属性，用来存放使用时没有显示定义队列的任务。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分发到默认队列</span></span><br><span class=\"line\">Job::dispatch();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分发到 emails 队列</span></span><br><span class=\"line\">Job::dispatch()-&gt;onQueue(<span class=\"string\">'emails'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在项目的配置文件中，可以指定驱动，老版本中为 <code>QUEUE_DRIVER</code>，新版本中为<code>QUEUE_CONNECTION</code> , 驱动默认为 <code>sync</code>，这是一个本地的同步驱动，方便调试队列里的任务。</p>\n<p>先以 redis 为例做一个邮件发送队列。</p>\n<p>因为 laravel 的 redis 默认使用了 predis，所以先装下扩展：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require &apos;predis/predis&apos;</span><br></pre></td></tr></table></figure>\n\n<p>邮件配置，最后两项是手动添加的，否则会报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAIL_DRIVER=smtp</span><br><span class=\"line\">MAIL_HOST=smtp.mxhichina.com</span><br><span class=\"line\">MAIL_PORT=25</span><br><span class=\"line\">MAIL_USERNAME=m@m-finder.com</span><br><span class=\"line\">MAIL_PASSWORD=xxxxxx</span><br><span class=\"line\">MAIL_ENCRYPTION=null</span><br><span class=\"line\">MAIL_FROM_NAME=M-finder</span><br><span class=\"line\">MAIL_FROM_ADDRESS=m@m-finder.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成任务类\"><a href=\"#生成任务类\" class=\"headerlink\" title=\"生成任务类\"></a>生成任务类</h4><p>命令行执行：<code>php artisan make:job EmailJob</code>，该命令会在 <code>app/jobs</code> 下自动创建文件。</p>\n<p>在任务类中发送邮件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $email = <span class=\"keyword\">$this</span>-&gt;email;</span><br><span class=\"line\">    $content = <span class=\"string\">'这是一封来自Laravel的队列测试邮件.'</span>;</span><br><span class=\"line\">    Mail::raw($content, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($message)</span> <span class=\"title\">use</span> <span class=\"params\">($email)</span> </span>&#123;</span><br><span class=\"line\">        $message-&gt;subject(<span class=\"string\">'[ 测试 ] 测试邮件SendMail - '</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>));</span><br><span class=\"line\">        $message-&gt;to($email);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h4><p>之前弄了登录事件和监听，就在监听里去触发吧。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EmailJob::dispatch($guard-&gt;user)-&gt;onQueue(<span class=\"string\">'emails'</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"开启队列\"><a href=\"#开启队列\" class=\"headerlink\" title=\"开启队列\"></a>开启队列</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan queue:work --tries=<span class=\"number\">3</span> --timeout=<span class=\"number\">30</span> --queue=emails</span><br></pre></td></tr></table></figure>\n\n<p>然后重新登录触发任务。<br>可以看到邮箱已经有了提示：</p>\n<p><img src=\"/2019/04/09/laravel-queues/email.png\" alt=\"邮件通知\"></p>\n<p>邮件已经成功发出，接下来就可以在实际的需求中使用了。</p>"},{"title":"net core Webapi基础工程搭建（三）——在线接口文档Swagger","date":"2019-07-02T10:51:48.000Z","_content":"\n### 前言\n前后分离的好处，就是后端埋头做业务逻辑功能，不需要过多考虑用户体验，只专注于数据、性能开发，对于前端需要的数据可以通过组Json或者其他方式回调，但是前后两端需要确定好接口Api的规范，并且前端如果需要查看接口的相关信息，就需要文档的支撑了。那么问题来了，后端在开发过程中每次改动接口，都需要改动文档，累不累。\n### Swagger\nSwagger作为一个在线文档，通过后端的接口控制器生成一套Json串数据，实时展示后端的接口请求地址，参数，类型以及回调，很好的解决这个问题（后端可以给前端一个Swagger的地址，然后来句你自己看吧，当然还是需要多沟通的），这个在Java里用过之后，就马上看看有没有.net的版本，果然，语言都是相通的，废话不多说，开始**第三方类库的引用**。\n### NuGet引用第三方类库\n工具->NuGet包管理器->管理解决方案的NuGet程序包...\n在**浏览**中查找\"Swashbuckle.AspNetCore\"，选择项目工程，点击安装。\n![第三方引入](net-core-swagger/1.png)\n引入完成后，在Startup.cs文件ConfigureServices中，加入以下代码：\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n            \n           #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new Info\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"April WebAPI\",\n                    Description = \"后台框架\",\n                    TermsOfService = \"None\",\n                    Contact = new Contact { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = \"http://www.aprilblank.com\" }\n                });\n            });\n            #endregion \n        }\n```\n在Startup.cs类里编辑Configure方法，加入以下代码：\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n           …\n           \n            #region Swagger\n            app.UseSwagger();\n            app.UseSwaggerUI(options =>\n            {\n                options.SwaggerEndpoint(\"/net-core-swagger/v1/swagger.json\", \"ApiHelp V1\");\n            });\n            #endregion\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n\n重新生成工程后，访问你的端口/swagger就可以看到接口文档帮助界面了。\n![Swagger](net-core-swagger/2.png)\n### 别急，还有\n在线的接口文档是有了，可一个接口啥意思都不知道，前端还是得一脸懵逼问你，这个接口啥意思啊，这个参数啥意思啊什么的。\n\n### 没错，注释\n还是在Startup.cs文件ConfigureServices中，加入以下代码：\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new Info\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"April WebAPI\",\n                    Description = \"后台框架\",\n                    TermsOfService = \"None\",\n                    Contact = new Contact { Name = \"Blank\", Email = \"790048789@qq.com\", Url = \"http://www.aprilblank.com\" }\n                });\n                \n                // 为 Swagger JSON and UI设置xml文档注释路径\n                var basePath = Path.GetDirectoryName(AppContext.BaseDirectory);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）\n                var xmlPath = Path.Combine(basePath, \"April.xml\");\n                options.IncludeXmlComments(xmlPath);\n                \n            });\n            #endregion\n        }\n```\n\n右键WebApi这个项目工程，点击属性，在生成这一栏\n\n![生成XML文档](net-core-swagger/3.png)\n\n先拿Values这个控制器做实验\n![Values](net-core-swagger/4.png)\n重新生成后会在对应目录看到有Apirl.xml文档文件，运行之后查看/Swagger\n![Swagger](net-core-swagger/5.png)\n点开刚才单独注释参数的/api/Values/{id}\n![Swagger](net-core-swagger/6.png)\n#### 小结\n一个WebApi工程离不开文档，而一个在线文档可以省掉自己很多事，并且Swagger也支持在线调试，虽说我自己还是倾向于Postman（后续会介绍相关工具），这个在线文档不仅是方便了前端查看，总之在开发上确实是一个利器。\n\n下一篇，介绍后台核心之一，**Log日志**。","source":"_posts/net-core-swagger.md","raw":"---\ntitle: net core Webapi基础工程搭建（三）——在线接口文档Swagger\ndate: 2019-07-02 18:51:48\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n前后分离的好处，就是后端埋头做业务逻辑功能，不需要过多考虑用户体验，只专注于数据、性能开发，对于前端需要的数据可以通过组Json或者其他方式回调，但是前后两端需要确定好接口Api的规范，并且前端如果需要查看接口的相关信息，就需要文档的支撑了。那么问题来了，后端在开发过程中每次改动接口，都需要改动文档，累不累。\n### Swagger\nSwagger作为一个在线文档，通过后端的接口控制器生成一套Json串数据，实时展示后端的接口请求地址，参数，类型以及回调，很好的解决这个问题（后端可以给前端一个Swagger的地址，然后来句你自己看吧，当然还是需要多沟通的），这个在Java里用过之后，就马上看看有没有.net的版本，果然，语言都是相通的，废话不多说，开始**第三方类库的引用**。\n### NuGet引用第三方类库\n工具->NuGet包管理器->管理解决方案的NuGet程序包...\n在**浏览**中查找\"Swashbuckle.AspNetCore\"，选择项目工程，点击安装。\n![第三方引入](net-core-swagger/1.png)\n引入完成后，在Startup.cs文件ConfigureServices中，加入以下代码：\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n            \n           #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new Info\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"April WebAPI\",\n                    Description = \"后台框架\",\n                    TermsOfService = \"None\",\n                    Contact = new Contact { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = \"http://www.aprilblank.com\" }\n                });\n            });\n            #endregion \n        }\n```\n在Startup.cs类里编辑Configure方法，加入以下代码：\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n           …\n           \n            #region Swagger\n            app.UseSwagger();\n            app.UseSwaggerUI(options =>\n            {\n                options.SwaggerEndpoint(\"/net-core-swagger/v1/swagger.json\", \"ApiHelp V1\");\n            });\n            #endregion\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n\n重新生成工程后，访问你的端口/swagger就可以看到接口文档帮助界面了。\n![Swagger](net-core-swagger/2.png)\n### 别急，还有\n在线的接口文档是有了，可一个接口啥意思都不知道，前端还是得一脸懵逼问你，这个接口啥意思啊，这个参数啥意思啊什么的。\n\n### 没错，注释\n还是在Startup.cs文件ConfigureServices中，加入以下代码：\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new Info\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"April WebAPI\",\n                    Description = \"后台框架\",\n                    TermsOfService = \"None\",\n                    Contact = new Contact { Name = \"Blank\", Email = \"790048789@qq.com\", Url = \"http://www.aprilblank.com\" }\n                });\n                \n                // 为 Swagger JSON and UI设置xml文档注释路径\n                var basePath = Path.GetDirectoryName(AppContext.BaseDirectory);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）\n                var xmlPath = Path.Combine(basePath, \"April.xml\");\n                options.IncludeXmlComments(xmlPath);\n                \n            });\n            #endregion\n        }\n```\n\n右键WebApi这个项目工程，点击属性，在生成这一栏\n\n![生成XML文档](net-core-swagger/3.png)\n\n先拿Values这个控制器做实验\n![Values](net-core-swagger/4.png)\n重新生成后会在对应目录看到有Apirl.xml文档文件，运行之后查看/Swagger\n![Swagger](net-core-swagger/5.png)\n点开刚才单独注释参数的/api/Values/{id}\n![Swagger](net-core-swagger/6.png)\n#### 小结\n一个WebApi工程离不开文档，而一个在线文档可以省掉自己很多事，并且Swagger也支持在线调试，虽说我自己还是倾向于Postman（后续会介绍相关工具），这个在线文档不仅是方便了前端查看，总之在开发上确实是一个利器。\n\n下一篇，介绍后台核心之一，**Log日志**。","slug":"net-core-swagger","published":1,"updated":"2019-09-30T05:47:20.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2l00179sv7u7ejlici","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前后分离的好处，就是后端埋头做业务逻辑功能，不需要过多考虑用户体验，只专注于数据、性能开发，对于前端需要的数据可以通过组Json或者其他方式回调，但是前后两端需要确定好接口Api的规范，并且前端如果需要查看接口的相关信息，就需要文档的支撑了。那么问题来了，后端在开发过程中每次改动接口，都需要改动文档，累不累。</p>\n<h3 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h3><p>Swagger作为一个在线文档，通过后端的接口控制器生成一套Json串数据，实时展示后端的接口请求地址，参数，类型以及回调，很好的解决这个问题（后端可以给前端一个Swagger的地址，然后来句你自己看吧，当然还是需要多沟通的），这个在Java里用过之后，就马上看看有没有.net的版本，果然，语言都是相通的，废话不多说，开始<strong>第三方类库的引用</strong>。</p>\n<h3 id=\"NuGet引用第三方类库\"><a href=\"#NuGet引用第三方类库\" class=\"headerlink\" title=\"NuGet引用第三方类库\"></a>NuGet引用第三方类库</h3><p>工具-&gt;NuGet包管理器-&gt;管理解决方案的NuGet程序包…<br>在<strong>浏览</strong>中查找”Swashbuckle.AspNetCore”，选择项目工程，点击安装。<br><img src=\"/2019/07/02/net-core-swagger/1.png\" alt=\"第三方引入\"><br>引入完成后，在Startup.cs文件ConfigureServices中，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"April WebAPI\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact = <span class=\"keyword\">new</span> Contact &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"string\">\"http://www.aprilblank.com\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Startup.cs类里编辑Configure方法，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerEndpoint(<span class=\"string\">\"/net-core-swagger/v1/swagger.json\"</span>, <span class=\"string\">\"ApiHelp V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新生成工程后，访问你的端口/swagger就可以看到接口文档帮助界面了。<br><img src=\"/2019/07/02/net-core-swagger/2.png\" alt=\"Swagger\"></p>\n<h3 id=\"别急，还有\"><a href=\"#别急，还有\" class=\"headerlink\" title=\"别急，还有\"></a>别急，还有</h3><p>在线的接口文档是有了，可一个接口啥意思都不知道，前端还是得一脸懵逼问你，这个接口啥意思啊，这个参数啥意思啊什么的。</p>\n<h3 id=\"没错，注释\"><a href=\"#没错，注释\" class=\"headerlink\" title=\"没错，注释\"></a>没错，注释</h3><p>还是在Startup.cs文件ConfigureServices中，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"April WebAPI\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact = <span class=\"keyword\">new</span> Contact &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"790048789@qq.com\"</span>, Url = <span class=\"string\">\"http://www.aprilblank.com\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 为 Swagger JSON and UI设置xml文档注释路径</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = Path.GetDirectoryName(AppContext.BaseDirectory);<span class=\"comment\">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"April.xml\"</span>);</span><br><span class=\"line\">        options.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>右键WebApi这个项目工程，点击属性，在生成这一栏</p>\n<p><img src=\"/2019/07/02/net-core-swagger/3.png\" alt=\"生成XML文档\"></p>\n<p>先拿Values这个控制器做实验<br><img src=\"/2019/07/02/net-core-swagger/4.png\" alt=\"Values\"><br>重新生成后会在对应目录看到有Apirl.xml文档文件，运行之后查看/Swagger<br><img src=\"/2019/07/02/net-core-swagger/5.png\" alt=\"Swagger\"><br>点开刚才单独注释参数的/api/Values/{id}<br><img src=\"/2019/07/02/net-core-swagger/6.png\" alt=\"Swagger\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>一个WebApi工程离不开文档，而一个在线文档可以省掉自己很多事，并且Swagger也支持在线调试，虽说我自己还是倾向于Postman（后续会介绍相关工具），这个在线文档不仅是方便了前端查看，总之在开发上确实是一个利器。</p>\n<p>下一篇，介绍后台核心之一，<strong>Log日志</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前后分离的好处，就是后端埋头做业务逻辑功能，不需要过多考虑用户体验，只专注于数据、性能开发，对于前端需要的数据可以通过组Json或者其他方式回调，但是前后两端需要确定好接口Api的规范，并且前端如果需要查看接口的相关信息，就需要文档的支撑了。那么问题来了，后端在开发过程中每次改动接口，都需要改动文档，累不累。</p>\n<h3 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h3><p>Swagger作为一个在线文档，通过后端的接口控制器生成一套Json串数据，实时展示后端的接口请求地址，参数，类型以及回调，很好的解决这个问题（后端可以给前端一个Swagger的地址，然后来句你自己看吧，当然还是需要多沟通的），这个在Java里用过之后，就马上看看有没有.net的版本，果然，语言都是相通的，废话不多说，开始<strong>第三方类库的引用</strong>。</p>\n<h3 id=\"NuGet引用第三方类库\"><a href=\"#NuGet引用第三方类库\" class=\"headerlink\" title=\"NuGet引用第三方类库\"></a>NuGet引用第三方类库</h3><p>工具-&gt;NuGet包管理器-&gt;管理解决方案的NuGet程序包…<br>在<strong>浏览</strong>中查找”Swashbuckle.AspNetCore”，选择项目工程，点击安装。<br><img src=\"/2019/07/02/net-core-swagger/1.png\" alt=\"第三方引入\"><br>引入完成后，在Startup.cs文件ConfigureServices中，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"April WebAPI\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact = <span class=\"keyword\">new</span> Contact &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"string\">\"http://www.aprilblank.com\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span> </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Startup.cs类里编辑Configure方法，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   …</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    app.UseSwagger();</span><br><span class=\"line\">    app.UseSwaggerUI(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerEndpoint(<span class=\"string\">\"/net-core-swagger/v1/swagger.json\"</span>, <span class=\"string\">\"ApiHelp V1\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新生成工程后，访问你的端口/swagger就可以看到接口文档帮助界面了。<br><img src=\"/2019/07/02/net-core-swagger/2.png\" alt=\"Swagger\"></p>\n<h3 id=\"别急，还有\"><a href=\"#别急，还有\" class=\"headerlink\" title=\"别急，还有\"></a>别急，还有</h3><p>在线的接口文档是有了，可一个接口啥意思都不知道，前端还是得一脸懵逼问你，这个接口啥意思啊，这个参数啥意思啊什么的。</p>\n<h3 id=\"没错，注释\"><a href=\"#没错，注释\" class=\"headerlink\" title=\"没错，注释\"></a>没错，注释</h3><p>还是在Startup.cs文件ConfigureServices中，加入以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">    services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> Info</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">            Title = <span class=\"string\">\"April WebAPI\"</span>,</span><br><span class=\"line\">            Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">            TermsOfService = <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">            Contact = <span class=\"keyword\">new</span> Contact &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"790048789@qq.com\"</span>, Url = <span class=\"string\">\"http://www.aprilblank.com\"</span> &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 为 Swagger JSON and UI设置xml文档注释路径</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> basePath = Path.GetDirectoryName(AppContext.BaseDirectory);<span class=\"comment\">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"April.xml\"</span>);</span><br><span class=\"line\">        options.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>右键WebApi这个项目工程，点击属性，在生成这一栏</p>\n<p><img src=\"/2019/07/02/net-core-swagger/3.png\" alt=\"生成XML文档\"></p>\n<p>先拿Values这个控制器做实验<br><img src=\"/2019/07/02/net-core-swagger/4.png\" alt=\"Values\"><br>重新生成后会在对应目录看到有Apirl.xml文档文件，运行之后查看/Swagger<br><img src=\"/2019/07/02/net-core-swagger/5.png\" alt=\"Swagger\"><br>点开刚才单独注释参数的/api/Values/{id}<br><img src=\"/2019/07/02/net-core-swagger/6.png\" alt=\"Swagger\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>一个WebApi工程离不开文档，而一个在线文档可以省掉自己很多事，并且Swagger也支持在线调试，虽说我自己还是倾向于Postman（后续会介绍相关工具），这个在线文档不仅是方便了前端查看，总之在开发上确实是一个利器。</p>\n<p>下一篇，介绍后台核心之一，<strong>Log日志</strong>。</p>\n"},{"title":"net core Webapi基础工程搭建（四）——日志功能log4net","date":"2019-07-04T07:56:02.000Z","_content":"\n### 前言\n一个完整的项目工程离不开日志文件的记录，而记录文件的方法也有很多，可以自己通过Stream去实现文件的读写来完成日志记录，但是如果有个好的封装类库，那为什么不去用呢？\n\n.net日志记录，NLog，log4都可以，用什么都可以，根据自己喜好，我常用log4，所以这里还是介绍Log4的引用及用法。\n\n### log4net\n这个log4从开发到现在，从netframework开始用，一个config文件就够了，NLog没用过，但是应该都是大差不差，毕竟名字都这么相似嘛（手动滑稽）\n\n### 依然是，NuGet引用第三方类库\n工具->NuGet包管理器->管理解决方案的NuGet程序包…\n在浏览中查找\"log4\"，选择项目工程，点击安装。\n![log4](net-core-log4net/1.png)\n安装完成后，依然是来Startup.cs，这次在构造函数直接声明实例化。\n```csharp\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n\n            repository = LogManager.CreateRepository(\"AprilLog\");\n\n            XmlConfigurator.Configure(repository, new FileInfo(\"Config/log4net.config\"));//配置文件路径可以自定义\n            BasicConfigurator.Configure(repository);\n        }\n\n        //log4net日志\n        public static ILoggerRepository repository { get; set; }\n```\n\n配置文件的创建可以在工程目录下新建一个config文件，配置信息如下，需要标注的信息基本上都在文件注释中，不过多阐述：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <!-- This section contains the log4net configuration settings -->\n  <log4net debug=\"false\">\n    <appender name=\"RollingLogFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <lockingModel type=\"log4net.Appender.FileAppender+MinimalLock\" /><!--很关键的一句，让日志文件不被占用-->\n      <file value=\"logs/\" /> <!-- 日志生成文件路径 -->\n      <appendToFile value=\"true\" /> \n      <rollingStyle value=\"Composite\" />\n      <staticLogFileName value=\"false\" />\n      <datePattern value=\"yyyyMMdd'.log'\" /> <!-- 日志文件名称格式 -->\n      <maxSizeRollBackups value=\"10\" />\n      <maximumFileSize value=\"10MB\" /> <!-- 最大文件大小，达到后生成新文件 -->\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline\" /> <!-- 生成日志格式 -->\n      </layout>\n    </appender>\n\n    <!-- Setup the root category, add the appenders and set the default level -->\n    <root>\n      <level value=\"ALL\" />  <!-- 日志等级 -->\n      <appender-ref ref=\"RollingLogFileAppender\" /> \n    </root>\n\n  </log4net>\n</configuration>\n```\n创建完成后，还是要对比下你的配置文件目录与实际目录是否一致。\n![log4](net-core-log4net/2.png)\nOK，全部确认完成后，可以在需要用到Log的地方，添加以下代码：\n```csharp\n\tprivate ILog log = LogManager.GetLogger(Startup.repository.Name, \"Name\");\n\t…\n\tlog.Info(\"测试\");\n```\n\n例如我们继续拿Values这个控制器开刀。\n![测试](net-core-log4net/3.png)\n\n写好之后我们运行代码，运行后我们可以看到工程目录已经有了logs这个文件夹，打开日志文件。\n![log](net-core-log4net/4.png)\n这样我们就可以在日常使用中记录日志，方便调试记录，追踪问题所在。\n\n### 整合LogUtil\n我这个人比较懒，并且我也不需要关心它是在哪运行，我只想要记录的时候调用下方法，所以对日志记录做了封装调整。\n\n首先，新建类库工程，Apirl.Util（这个工程应该刚开始都创建的-,-||）。\n![新建工程](net-core-log4net/5.png)\n类库工程新建完成的第一件事，干掉Class.cs（我要这示例有何用）\n\n将log4net通过NuGet引入Util工程，过程不过多说了，引用的介绍已经可以了。\n\n引用完成后，在WebApi工程引入Util。\n![引用项目依赖](net-core-log4net/6.png)\n选中Util这个类库工程。\n![引用项目依赖](net-core-log4net/7.png)\n\n> 题外话，其实NuGet引入第三方类库在一个项目工程即可，其他工程只要引用对应的项目工程，也可以使用对应的第三方类库，即我在Util引入log4，我就没必要在WebApi工程再引入，这里只是为了讲解说明。\n\n新建LogUtil这个类，代码如下。\n```csharp\n\tpublic class LogUtil\n    {\n        private static readonly ILog log = LogManager.GetLogger(\"AprilLog\", typeof(LogUtil));\n\n        /// <summary>\n        /// 调试日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Debug(string msg, object obj = null)\n        {\n            if (log.IsDebugEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Debug(msg);\n                }\n                else\n                {\n                    log.DebugFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 日常日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Info(string msg, object obj = null)\n        {\n            if (log.IsInfoEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Info(msg);\n                }\n                else\n                {\n                    log.InfoFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 错误日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Error(string msg, object obj = null)\n        {\n            if (log.IsErrorEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Error(msg);\n                }\n                else\n                {\n                    log.ErrorFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 重要日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Fatal(string msg, object obj = null)\n        {\n            if (log.IsFatalEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Fatal(msg);\n                }\n                else\n                {\n                    log.FatalFormat(msg, obj);\n                }\n            }\n        }\n\n    }\n```\n\n下完之后，继续ValuesController（Why一直是这），更改代码如下：\n![Values](net-core-log4net/8.png)\n运行看下效果。\n![log](net-core-log4net/9.png)\n### 小结\n封装的好处是为了省事，哪里需要写（点）哪里，咳咳，日志的重要性在代码里面不言而喻，没有日志的工程是不健全的，程序猿可以不会写逻辑，不去考虑架构，不去优化性能，但是日志的记录，代码的注释是不可或缺的，毕竟如果想活着，这两个地方还是多注意吧。\n\n下一节，开始**缓存机制**。","source":"_posts/net-core-log4net.md","raw":"---\ntitle: net core Webapi基础工程搭建（四）——日志功能log4net\ndate: 2019-07-04 15:56:02\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n一个完整的项目工程离不开日志文件的记录，而记录文件的方法也有很多，可以自己通过Stream去实现文件的读写来完成日志记录，但是如果有个好的封装类库，那为什么不去用呢？\n\n.net日志记录，NLog，log4都可以，用什么都可以，根据自己喜好，我常用log4，所以这里还是介绍Log4的引用及用法。\n\n### log4net\n这个log4从开发到现在，从netframework开始用，一个config文件就够了，NLog没用过，但是应该都是大差不差，毕竟名字都这么相似嘛（手动滑稽）\n\n### 依然是，NuGet引用第三方类库\n工具->NuGet包管理器->管理解决方案的NuGet程序包…\n在浏览中查找\"log4\"，选择项目工程，点击安装。\n![log4](net-core-log4net/1.png)\n安装完成后，依然是来Startup.cs，这次在构造函数直接声明实例化。\n```csharp\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n\n            repository = LogManager.CreateRepository(\"AprilLog\");\n\n            XmlConfigurator.Configure(repository, new FileInfo(\"Config/log4net.config\"));//配置文件路径可以自定义\n            BasicConfigurator.Configure(repository);\n        }\n\n        //log4net日志\n        public static ILoggerRepository repository { get; set; }\n```\n\n配置文件的创建可以在工程目录下新建一个config文件，配置信息如下，需要标注的信息基本上都在文件注释中，不过多阐述：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <!-- This section contains the log4net configuration settings -->\n  <log4net debug=\"false\">\n    <appender name=\"RollingLogFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <lockingModel type=\"log4net.Appender.FileAppender+MinimalLock\" /><!--很关键的一句，让日志文件不被占用-->\n      <file value=\"logs/\" /> <!-- 日志生成文件路径 -->\n      <appendToFile value=\"true\" /> \n      <rollingStyle value=\"Composite\" />\n      <staticLogFileName value=\"false\" />\n      <datePattern value=\"yyyyMMdd'.log'\" /> <!-- 日志文件名称格式 -->\n      <maxSizeRollBackups value=\"10\" />\n      <maximumFileSize value=\"10MB\" /> <!-- 最大文件大小，达到后生成新文件 -->\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline\" /> <!-- 生成日志格式 -->\n      </layout>\n    </appender>\n\n    <!-- Setup the root category, add the appenders and set the default level -->\n    <root>\n      <level value=\"ALL\" />  <!-- 日志等级 -->\n      <appender-ref ref=\"RollingLogFileAppender\" /> \n    </root>\n\n  </log4net>\n</configuration>\n```\n创建完成后，还是要对比下你的配置文件目录与实际目录是否一致。\n![log4](net-core-log4net/2.png)\nOK，全部确认完成后，可以在需要用到Log的地方，添加以下代码：\n```csharp\n\tprivate ILog log = LogManager.GetLogger(Startup.repository.Name, \"Name\");\n\t…\n\tlog.Info(\"测试\");\n```\n\n例如我们继续拿Values这个控制器开刀。\n![测试](net-core-log4net/3.png)\n\n写好之后我们运行代码，运行后我们可以看到工程目录已经有了logs这个文件夹，打开日志文件。\n![log](net-core-log4net/4.png)\n这样我们就可以在日常使用中记录日志，方便调试记录，追踪问题所在。\n\n### 整合LogUtil\n我这个人比较懒，并且我也不需要关心它是在哪运行，我只想要记录的时候调用下方法，所以对日志记录做了封装调整。\n\n首先，新建类库工程，Apirl.Util（这个工程应该刚开始都创建的-,-||）。\n![新建工程](net-core-log4net/5.png)\n类库工程新建完成的第一件事，干掉Class.cs（我要这示例有何用）\n\n将log4net通过NuGet引入Util工程，过程不过多说了，引用的介绍已经可以了。\n\n引用完成后，在WebApi工程引入Util。\n![引用项目依赖](net-core-log4net/6.png)\n选中Util这个类库工程。\n![引用项目依赖](net-core-log4net/7.png)\n\n> 题外话，其实NuGet引入第三方类库在一个项目工程即可，其他工程只要引用对应的项目工程，也可以使用对应的第三方类库，即我在Util引入log4，我就没必要在WebApi工程再引入，这里只是为了讲解说明。\n\n新建LogUtil这个类，代码如下。\n```csharp\n\tpublic class LogUtil\n    {\n        private static readonly ILog log = LogManager.GetLogger(\"AprilLog\", typeof(LogUtil));\n\n        /// <summary>\n        /// 调试日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Debug(string msg, object obj = null)\n        {\n            if (log.IsDebugEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Debug(msg);\n                }\n                else\n                {\n                    log.DebugFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 日常日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Info(string msg, object obj = null)\n        {\n            if (log.IsInfoEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Info(msg);\n                }\n                else\n                {\n                    log.InfoFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 错误日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Error(string msg, object obj = null)\n        {\n            if (log.IsErrorEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Error(msg);\n                }\n                else\n                {\n                    log.ErrorFormat(msg, obj);\n                }\n            }\n        }\n        /// <summary>\n        /// 重要日志\n        /// </summary>\n        /// <param name=\"msg\"></param>\n        /// <param name=\"obj\"></param>\n        public static void Fatal(string msg, object obj = null)\n        {\n            if (log.IsFatalEnabled && !string.IsNullOrEmpty(msg))\n            {\n                if (obj == null)\n                {\n                    log.Fatal(msg);\n                }\n                else\n                {\n                    log.FatalFormat(msg, obj);\n                }\n            }\n        }\n\n    }\n```\n\n下完之后，继续ValuesController（Why一直是这），更改代码如下：\n![Values](net-core-log4net/8.png)\n运行看下效果。\n![log](net-core-log4net/9.png)\n### 小结\n封装的好处是为了省事，哪里需要写（点）哪里，咳咳，日志的重要性在代码里面不言而喻，没有日志的工程是不健全的，程序猿可以不会写逻辑，不去考虑架构，不去优化性能，但是日志的记录，代码的注释是不可或缺的，毕竟如果想活着，这两个地方还是多注意吧。\n\n下一节，开始**缓存机制**。","slug":"net-core-log4net","published":1,"updated":"2019-09-30T05:46:21.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2m001b9sv7ee53sshk","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一个完整的项目工程离不开日志文件的记录，而记录文件的方法也有很多，可以自己通过Stream去实现文件的读写来完成日志记录，但是如果有个好的封装类库，那为什么不去用呢？</p>\n<p>.net日志记录，NLog，log4都可以，用什么都可以，根据自己喜好，我常用log4，所以这里还是介绍Log4的引用及用法。</p>\n<h3 id=\"log4net\"><a href=\"#log4net\" class=\"headerlink\" title=\"log4net\"></a>log4net</h3><p>这个log4从开发到现在，从netframework开始用，一个config文件就够了，NLog没用过，但是应该都是大差不差，毕竟名字都这么相似嘛（手动滑稽）</p>\n<h3 id=\"依然是，NuGet引用第三方类库\"><a href=\"#依然是，NuGet引用第三方类库\" class=\"headerlink\" title=\"依然是，NuGet引用第三方类库\"></a>依然是，NuGet引用第三方类库</h3><p>工具-&gt;NuGet包管理器-&gt;管理解决方案的NuGet程序包…<br>在浏览中查找”log4”，选择项目工程，点击安装。<br><img src=\"/2019/07/04/net-core-log4net/1.png\" alt=\"log4\"><br>安装完成后，依然是来Startup.cs，这次在构造函数直接声明实例化。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Configuration = configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    repository = LogManager.CreateRepository(<span class=\"string\">\"AprilLog\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    XmlConfigurator.Configure(repository, <span class=\"keyword\">new</span> FileInfo(<span class=\"string\">\"Config/log4net.config\"</span>));<span class=\"comment\">//配置文件路径可以自定义</span></span><br><span class=\"line\">    BasicConfigurator.Configure(repository);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//log4net日志</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoggerRepository repository &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件的创建可以在工程目录下新建一个config文件，配置信息如下，需要标注的信息基本上都在文件注释中，不过多阐述：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- This section contains the log4net configuration settings --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingLogFileAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">lockingModel</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.FileAppender+MinimalLock\"</span> /&gt;</span><span class=\"comment\">&lt;!--很关键的一句，让日志文件不被占用--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logs/\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 日志生成文件路径 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appendToFile</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rollingStyle</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Composite\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">staticLogFileName</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">datePattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyyMMdd'.log'\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 日志文件名称格式 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maxSizeRollBackups</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maximumFileSize</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10MB\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 最大文件大小，达到后生成新文件 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conversionPattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%thread] %-5level %logger - %message%newline\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 生成日志格式 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Setup the root category, add the appenders and set the default level --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span> /&gt;</span>  <span class=\"comment\">&lt;!-- 日志等级 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"RollingLogFileAppender\"</span> /&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建完成后，还是要对比下你的配置文件目录与实际目录是否一致。<br><img src=\"/2019/07/04/net-core-log4net/2.png\" alt=\"log4\"><br>OK，全部确认完成后，可以在需要用到Log的地方，添加以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ILog log = LogManager.GetLogger(Startup.repository.Name, <span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">…</span><br><span class=\"line\">log.Info(<span class=\"string\">\"测试\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例如我们继续拿Values这个控制器开刀。<br><img src=\"/2019/07/04/net-core-log4net/3.png\" alt=\"测试\"></p>\n<p>写好之后我们运行代码，运行后我们可以看到工程目录已经有了logs这个文件夹，打开日志文件。<br><img src=\"/2019/07/04/net-core-log4net/4.png\" alt=\"log\"><br>这样我们就可以在日常使用中记录日志，方便调试记录，追踪问题所在。</p>\n<h3 id=\"整合LogUtil\"><a href=\"#整合LogUtil\" class=\"headerlink\" title=\"整合LogUtil\"></a>整合LogUtil</h3><p>我这个人比较懒，并且我也不需要关心它是在哪运行，我只想要记录的时候调用下方法，所以对日志记录做了封装调整。</p>\n<p>首先，新建类库工程，Apirl.Util（这个工程应该刚开始都创建的-,-||）。<br><img src=\"/2019/07/04/net-core-log4net/5.png\" alt=\"新建工程\"><br>类库工程新建完成的第一件事，干掉Class.cs（我要这示例有何用）</p>\n<p>将log4net通过NuGet引入Util工程，过程不过多说了，引用的介绍已经可以了。</p>\n<p>引用完成后，在WebApi工程引入Util。<br><img src=\"/2019/07/04/net-core-log4net/6.png\" alt=\"引用项目依赖\"><br>选中Util这个类库工程。<br><img src=\"/2019/07/04/net-core-log4net/7.png\" alt=\"引用项目依赖\"></p>\n<blockquote>\n<p>题外话，其实NuGet引入第三方类库在一个项目工程即可，其他工程只要引用对应的项目工程，也可以使用对应的第三方类库，即我在Util引入log4，我就没必要在WebApi工程再引入，这里只是为了讲解说明。</p>\n</blockquote>\n<p>新建LogUtil这个类，代码如下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LogUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> ILog log = LogManager.GetLogger(<span class=\"string\">\"AprilLog\"</span>, <span class=\"keyword\">typeof</span>(LogUtil));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 调试日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Debug</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsDebugEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Debug(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.DebugFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 日常日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsInfoEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Info(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.InfoFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 错误日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsErrorEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Error(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.ErrorFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 重要日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Fatal</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsFatalEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Fatal(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.FatalFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下完之后，继续ValuesController（Why一直是这），更改代码如下：<br><img src=\"/2019/07/04/net-core-log4net/8.png\" alt=\"Values\"><br>运行看下效果。<br><img src=\"/2019/07/04/net-core-log4net/9.png\" alt=\"log\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>封装的好处是为了省事，哪里需要写（点）哪里，咳咳，日志的重要性在代码里面不言而喻，没有日志的工程是不健全的，程序猿可以不会写逻辑，不去考虑架构，不去优化性能，但是日志的记录，代码的注释是不可或缺的，毕竟如果想活着，这两个地方还是多注意吧。</p>\n<p>下一节，开始<strong>缓存机制</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>一个完整的项目工程离不开日志文件的记录，而记录文件的方法也有很多，可以自己通过Stream去实现文件的读写来完成日志记录，但是如果有个好的封装类库，那为什么不去用呢？</p>\n<p>.net日志记录，NLog，log4都可以，用什么都可以，根据自己喜好，我常用log4，所以这里还是介绍Log4的引用及用法。</p>\n<h3 id=\"log4net\"><a href=\"#log4net\" class=\"headerlink\" title=\"log4net\"></a>log4net</h3><p>这个log4从开发到现在，从netframework开始用，一个config文件就够了，NLog没用过，但是应该都是大差不差，毕竟名字都这么相似嘛（手动滑稽）</p>\n<h3 id=\"依然是，NuGet引用第三方类库\"><a href=\"#依然是，NuGet引用第三方类库\" class=\"headerlink\" title=\"依然是，NuGet引用第三方类库\"></a>依然是，NuGet引用第三方类库</h3><p>工具-&gt;NuGet包管理器-&gt;管理解决方案的NuGet程序包…<br>在浏览中查找”log4”，选择项目工程，点击安装。<br><img src=\"/2019/07/04/net-core-log4net/1.png\" alt=\"log4\"><br>安装完成后，依然是来Startup.cs，这次在构造函数直接声明实例化。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Configuration = configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">    repository = LogManager.CreateRepository(<span class=\"string\">\"AprilLog\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    XmlConfigurator.Configure(repository, <span class=\"keyword\">new</span> FileInfo(<span class=\"string\">\"Config/log4net.config\"</span>));<span class=\"comment\">//配置文件路径可以自定义</span></span><br><span class=\"line\">    BasicConfigurator.Configure(repository);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//log4net日志</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ILoggerRepository repository &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件的创建可以在工程目录下新建一个config文件，配置信息如下，需要标注的信息基本上都在文件注释中，不过多阐述：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- This section contains the log4net configuration settings --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">log4net</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RollingLogFileAppender\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">lockingModel</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Appender.FileAppender+MinimalLock\"</span> /&gt;</span><span class=\"comment\">&lt;!--很关键的一句，让日志文件不被占用--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">file</span> <span class=\"attr\">value</span>=<span class=\"string\">\"logs/\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 日志生成文件路径 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appendToFile</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">rollingStyle</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Composite\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">staticLogFileName</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">datePattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyyMMdd'.log'\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 日志文件名称格式 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maxSizeRollBackups</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maximumFileSize</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10MB\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 最大文件大小，达到后生成新文件 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">type</span>=<span class=\"string\">\"log4net.Layout.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">conversionPattern</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%date [%thread] %-5level %logger - %message%newline\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 生成日志格式 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Setup the root category, add the appenders and set the default level --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ALL\"</span> /&gt;</span>  <span class=\"comment\">&lt;!-- 日志等级 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"RollingLogFileAppender\"</span> /&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">log4net</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建完成后，还是要对比下你的配置文件目录与实际目录是否一致。<br><img src=\"/2019/07/04/net-core-log4net/2.png\" alt=\"log4\"><br>OK，全部确认完成后，可以在需要用到Log的地方，添加以下代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ILog log = LogManager.GetLogger(Startup.repository.Name, <span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">…</span><br><span class=\"line\">log.Info(<span class=\"string\">\"测试\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>例如我们继续拿Values这个控制器开刀。<br><img src=\"/2019/07/04/net-core-log4net/3.png\" alt=\"测试\"></p>\n<p>写好之后我们运行代码，运行后我们可以看到工程目录已经有了logs这个文件夹，打开日志文件。<br><img src=\"/2019/07/04/net-core-log4net/4.png\" alt=\"log\"><br>这样我们就可以在日常使用中记录日志，方便调试记录，追踪问题所在。</p>\n<h3 id=\"整合LogUtil\"><a href=\"#整合LogUtil\" class=\"headerlink\" title=\"整合LogUtil\"></a>整合LogUtil</h3><p>我这个人比较懒，并且我也不需要关心它是在哪运行，我只想要记录的时候调用下方法，所以对日志记录做了封装调整。</p>\n<p>首先，新建类库工程，Apirl.Util（这个工程应该刚开始都创建的-,-||）。<br><img src=\"/2019/07/04/net-core-log4net/5.png\" alt=\"新建工程\"><br>类库工程新建完成的第一件事，干掉Class.cs（我要这示例有何用）</p>\n<p>将log4net通过NuGet引入Util工程，过程不过多说了，引用的介绍已经可以了。</p>\n<p>引用完成后，在WebApi工程引入Util。<br><img src=\"/2019/07/04/net-core-log4net/6.png\" alt=\"引用项目依赖\"><br>选中Util这个类库工程。<br><img src=\"/2019/07/04/net-core-log4net/7.png\" alt=\"引用项目依赖\"></p>\n<blockquote>\n<p>题外话，其实NuGet引入第三方类库在一个项目工程即可，其他工程只要引用对应的项目工程，也可以使用对应的第三方类库，即我在Util引入log4，我就没必要在WebApi工程再引入，这里只是为了讲解说明。</p>\n</blockquote>\n<p>新建LogUtil这个类，代码如下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LogUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> ILog log = LogManager.GetLogger(<span class=\"string\">\"AprilLog\"</span>, <span class=\"keyword\">typeof</span>(LogUtil));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 调试日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Debug</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsDebugEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Debug(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.DebugFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 日常日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Info</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsInfoEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Info(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.InfoFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 错误日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Error</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsErrorEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Error(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.ErrorFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 重要日志</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"msg\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"obj\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Fatal</span>(<span class=\"params\"><span class=\"keyword\">string</span> msg, <span class=\"keyword\">object</span> obj = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (log.IsFatalEnabled &amp;&amp; !<span class=\"keyword\">string</span>.IsNullOrEmpty(msg))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.Fatal(msg);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">else</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   log.FatalFormat(msg, obj);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下完之后，继续ValuesController（Why一直是这），更改代码如下：<br><img src=\"/2019/07/04/net-core-log4net/8.png\" alt=\"Values\"><br>运行看下效果。<br><img src=\"/2019/07/04/net-core-log4net/9.png\" alt=\"log\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>封装的好处是为了省事，哪里需要写（点）哪里，咳咳，日志的重要性在代码里面不言而喻，没有日志的工程是不健全的，程序猿可以不会写逻辑，不去考虑架构，不去优化性能，但是日志的记录，代码的注释是不可或缺的，毕竟如果想活着，这两个地方还是多注意吧。</p>\n<p>下一节，开始<strong>缓存机制</strong>。</p>\n"},{"title":"net core WebApi——使用xUnits来实现单元测试","date":"2019-11-05T09:19:26.000Z","_content":"\n### 前言\n从开始敲代码到现在，不停地都是在喊着记得做测试，记得自测，测试人员打回来扣你money之类的，刚开始因为心疼钱（当然还是为了代码质量），就老老实实自己写完自己跑一遍，没有流程没有规划没有测试文档，就是自己整理一组数据跑一遍，最后依然还是让测试人员老老实实把一大堆测试问题扔给你。\n\n### 单元测试\n首先，还是来聊聊为啥要搞测试吧。\n\n1. 测试有助于代码整体健壮性，覆盖测试、压力测试都是为了全方位多角度更快更好为用户服务。\n2. 测试有助于提高程序猿的积极性以及引起自身的重视，毕竟一个坑栽一遍就够了，两次也能容忍，再三再四再五怕是要被搞，同时这也是自我提高的一种手段吧。\n3. 软件开发流程收尾的工作就是测试，绕不过，毕竟验收才是最终目标，达到效果才能获得应有的。\n\n好了，聊完这些，当然我也不是专业测试人员，肯定不会给个测试文档模板，喏，照着这个规范起来，我主要是要鼓捣下我之前一直想试试的单元测试，这个自动化测试的手段之一，一直想试试但是一直都放着。\n\n在**MSTest**，**NUnit**，**xUint**这三个中让我稍微犹豫了下，不过三七二十八管他呢，随便来个吧，就选了**xUnit**，当然MSTest是官方的，支持度应该高点儿，但是这不是我们该犹豫抉择的地方。\n\n### xUnit\n首先，我们新建一个项目**April.Test**。\n![新建](net-core-unittest/1.png)\n#### Fact\n\n新建之后，我们看到有个默认的 **[Fact]**。\n\n这个就是测试的标准格式了，如果我们不需要测试数据的话，就是在这个标签下的方法做断言，简单举个例子吧。\n\n```csharp\n        [Fact]\n        public void TestEqual()\n        {\n            int a = 10, b = 20;\n            Assert.Equal(30, Add(a, b));\n        }\n\n        private int Add(int a, int b)\n        {\n            return a + b;\n        }\n```\n\n敲下Assert之后，发现断言好多方法，这里也就不一一说明了，感觉方法名起的都挺明白的，这里就不过多描述了，代码中也有些测试示例，地址在文末给出。\n\n#### Theory\n我们在上面的代码可以看到，所有的数据都是自己定好的，如果我想自己做参数传入测试怎么搞呢，这时候就要用到 **[Theory]** 这个标签以及 **[InlineData]** 了，标签是为了更好的区分方法的类型（个人理解），来看下这种参数传递的测试怎么搞吧。\n\n```csharp\n        [Theory]\n        [InlineData(new object[] { 1, 2, 3, 4 },1)]\n        [InlineData(new object[] { \"t\", \"e\", \"s\", \"t\" }, \"t\")]\n        public void TestContains(object[] objs,object obj)\n        {\n            Assert.Contains(obj, objs);\n        }\n```\n\n当然我们也可以使用自定义数组来做测试数据源，这里我起初以为可以传任意类型参数，但是MemberData只支持object[]。\n```csharp\n        [Theory]\n        [MemberData(nameof(tempDatas))]\n        public void TestData(int a, int b)\n        {\n            int result = a + b;\n            Assert.True(result == Add(a, b));\n        }\n        \n        public static IEnumerable<object[]> tempDatas\n        {\n            get\n            {\n                yield return new object[] { 1, 2 };\n                yield return new object[] { 5, 7 };\n                yield return new object[] { 12, 12 };\n            }\n        }\n```\n\n#### 控制器\n> 在之前鼓捣单元测试的时候，我一直想一个问题，如果只是这种操作的话，那测试有何意义，但是后来发现，原来单元测试比我以为能做的多得多，所以，学习是个不停的行程，走的多了，风景也就多了。\n\n这里可以引入一个流程，在我们测试自己的工程的时候，我们需要三步来做完单个的测试。\n- Arrange（准备工作）\n- Act（实现方法）\n- Assert（断言结果）\n\n在测试之前，我们需要在当前工程引入一个**Moq**，至于为什么用这个呢，就跟vue一样我们需要模拟（虽说mock跟Moq还不是那么类似），总不可能我们单元测试引入了orm来实际操作数据库吧（当然测试库这个也是可行的），所以我们需要模拟接口的实现类及方法。\n\n![引入](net-core-unittest/2.png)\n引入完，我们将April.WebApi引入到当前工程，之后我们创建一个Values的接口测试类**ValuesControllerTest**，然后测试方法如下：\n```csharp\n        [Fact]\n        public void TestGet()\n        {\n            // Arrange\n            var mockRepo = new Mock<IStudentService>();\n            var controller = new ValuesController(mockRepo.Object);\n            // Act\n            var result = controller.Get();\n            // Assert\n            Assert.Equal(new string[] { \"value1\", \"\" }, result.Value);\n        }\n```\n\n这里注意下，对应接口的方法我是都注释的，最终只有返回了字符串数组，因为对应接口中的方法都需要初始化，那么我们来测试下获取数据的接口，看下这个Moq的用法吧，首先我们需要初始化Mock来实现对应接口，然后我们通过实现对应方法来模拟获取数据。\n\n```csharp\n\t\t[Theory]\n        [InlineData(1)]\n        public void TestGetByID(int id)\n        {\n            var mockRepo = new Mock<IStudentService>();\n            mockRepo.Setup(repo => repo.GetList(s => s.ID == 38).ToList())\n                .Returns(GetList());\n\n            var controller = new ValuesController(mockRepo.Object);\n\n            var result = controller.Get(id);\n\n            Assert.NotNull(result);\n            Assert.Contains(\"大洛阳\", result.Value);\n        }\n\n        private List<StudentEntity> GetList()\n        {\n            List<StudentEntity> entities = new List<StudentEntity>();\n\n            entities.Add(new StudentEntity()\n            {\n                ID = 1,\n                Name = \"小明\",\n                Number = \"123456\",\n                Age = 19,\n                Sex = 1,\n                Address = \"大洛阳\"\n            });\n            entities.Add(new StudentEntity()\n            {\n                ID = 2,\n                Name = \"小红\",\n                Number = \"456789\",\n                Age = 18,\n                Sex = 0,\n                Address = \"大洛阳\"\n            });\n\n            return entities;\n        }\n```\n\n> 写到这我发现，我在引入WebApi的时候，好像已经把几个工程都已经引入进来，这个不知道合适不合适。\n\n### 小结\n写到这里，基本上单元测试这块儿也简单了走了一遍，至于具体在业务中如何实现，还是想着需要结合个小项目来实践下，东西走通个demo只能说明可行，走通不同体量的工程才能说明可用，包括后续的集成测试，压力测试，自动化测试也会一点点儿的开始鼓捣，**路漫漫**啊。\n\n### 附录\n代码地址：[April.WebApi](https://github.com/AprilBlank/April.WebApi/tree/3.0)","source":"_posts/net-core-unittest.md","raw":"---\ntitle: net core WebApi——使用xUnits来实现单元测试\ndate: 2019-11-05 17:19:26\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n从开始敲代码到现在，不停地都是在喊着记得做测试，记得自测，测试人员打回来扣你money之类的，刚开始因为心疼钱（当然还是为了代码质量），就老老实实自己写完自己跑一遍，没有流程没有规划没有测试文档，就是自己整理一组数据跑一遍，最后依然还是让测试人员老老实实把一大堆测试问题扔给你。\n\n### 单元测试\n首先，还是来聊聊为啥要搞测试吧。\n\n1. 测试有助于代码整体健壮性，覆盖测试、压力测试都是为了全方位多角度更快更好为用户服务。\n2. 测试有助于提高程序猿的积极性以及引起自身的重视，毕竟一个坑栽一遍就够了，两次也能容忍，再三再四再五怕是要被搞，同时这也是自我提高的一种手段吧。\n3. 软件开发流程收尾的工作就是测试，绕不过，毕竟验收才是最终目标，达到效果才能获得应有的。\n\n好了，聊完这些，当然我也不是专业测试人员，肯定不会给个测试文档模板，喏，照着这个规范起来，我主要是要鼓捣下我之前一直想试试的单元测试，这个自动化测试的手段之一，一直想试试但是一直都放着。\n\n在**MSTest**，**NUnit**，**xUint**这三个中让我稍微犹豫了下，不过三七二十八管他呢，随便来个吧，就选了**xUnit**，当然MSTest是官方的，支持度应该高点儿，但是这不是我们该犹豫抉择的地方。\n\n### xUnit\n首先，我们新建一个项目**April.Test**。\n![新建](net-core-unittest/1.png)\n#### Fact\n\n新建之后，我们看到有个默认的 **[Fact]**。\n\n这个就是测试的标准格式了，如果我们不需要测试数据的话，就是在这个标签下的方法做断言，简单举个例子吧。\n\n```csharp\n        [Fact]\n        public void TestEqual()\n        {\n            int a = 10, b = 20;\n            Assert.Equal(30, Add(a, b));\n        }\n\n        private int Add(int a, int b)\n        {\n            return a + b;\n        }\n```\n\n敲下Assert之后，发现断言好多方法，这里也就不一一说明了，感觉方法名起的都挺明白的，这里就不过多描述了，代码中也有些测试示例，地址在文末给出。\n\n#### Theory\n我们在上面的代码可以看到，所有的数据都是自己定好的，如果我想自己做参数传入测试怎么搞呢，这时候就要用到 **[Theory]** 这个标签以及 **[InlineData]** 了，标签是为了更好的区分方法的类型（个人理解），来看下这种参数传递的测试怎么搞吧。\n\n```csharp\n        [Theory]\n        [InlineData(new object[] { 1, 2, 3, 4 },1)]\n        [InlineData(new object[] { \"t\", \"e\", \"s\", \"t\" }, \"t\")]\n        public void TestContains(object[] objs,object obj)\n        {\n            Assert.Contains(obj, objs);\n        }\n```\n\n当然我们也可以使用自定义数组来做测试数据源，这里我起初以为可以传任意类型参数，但是MemberData只支持object[]。\n```csharp\n        [Theory]\n        [MemberData(nameof(tempDatas))]\n        public void TestData(int a, int b)\n        {\n            int result = a + b;\n            Assert.True(result == Add(a, b));\n        }\n        \n        public static IEnumerable<object[]> tempDatas\n        {\n            get\n            {\n                yield return new object[] { 1, 2 };\n                yield return new object[] { 5, 7 };\n                yield return new object[] { 12, 12 };\n            }\n        }\n```\n\n#### 控制器\n> 在之前鼓捣单元测试的时候，我一直想一个问题，如果只是这种操作的话，那测试有何意义，但是后来发现，原来单元测试比我以为能做的多得多，所以，学习是个不停的行程，走的多了，风景也就多了。\n\n这里可以引入一个流程，在我们测试自己的工程的时候，我们需要三步来做完单个的测试。\n- Arrange（准备工作）\n- Act（实现方法）\n- Assert（断言结果）\n\n在测试之前，我们需要在当前工程引入一个**Moq**，至于为什么用这个呢，就跟vue一样我们需要模拟（虽说mock跟Moq还不是那么类似），总不可能我们单元测试引入了orm来实际操作数据库吧（当然测试库这个也是可行的），所以我们需要模拟接口的实现类及方法。\n\n![引入](net-core-unittest/2.png)\n引入完，我们将April.WebApi引入到当前工程，之后我们创建一个Values的接口测试类**ValuesControllerTest**，然后测试方法如下：\n```csharp\n        [Fact]\n        public void TestGet()\n        {\n            // Arrange\n            var mockRepo = new Mock<IStudentService>();\n            var controller = new ValuesController(mockRepo.Object);\n            // Act\n            var result = controller.Get();\n            // Assert\n            Assert.Equal(new string[] { \"value1\", \"\" }, result.Value);\n        }\n```\n\n这里注意下，对应接口的方法我是都注释的，最终只有返回了字符串数组，因为对应接口中的方法都需要初始化，那么我们来测试下获取数据的接口，看下这个Moq的用法吧，首先我们需要初始化Mock来实现对应接口，然后我们通过实现对应方法来模拟获取数据。\n\n```csharp\n\t\t[Theory]\n        [InlineData(1)]\n        public void TestGetByID(int id)\n        {\n            var mockRepo = new Mock<IStudentService>();\n            mockRepo.Setup(repo => repo.GetList(s => s.ID == 38).ToList())\n                .Returns(GetList());\n\n            var controller = new ValuesController(mockRepo.Object);\n\n            var result = controller.Get(id);\n\n            Assert.NotNull(result);\n            Assert.Contains(\"大洛阳\", result.Value);\n        }\n\n        private List<StudentEntity> GetList()\n        {\n            List<StudentEntity> entities = new List<StudentEntity>();\n\n            entities.Add(new StudentEntity()\n            {\n                ID = 1,\n                Name = \"小明\",\n                Number = \"123456\",\n                Age = 19,\n                Sex = 1,\n                Address = \"大洛阳\"\n            });\n            entities.Add(new StudentEntity()\n            {\n                ID = 2,\n                Name = \"小红\",\n                Number = \"456789\",\n                Age = 18,\n                Sex = 0,\n                Address = \"大洛阳\"\n            });\n\n            return entities;\n        }\n```\n\n> 写到这我发现，我在引入WebApi的时候，好像已经把几个工程都已经引入进来，这个不知道合适不合适。\n\n### 小结\n写到这里，基本上单元测试这块儿也简单了走了一遍，至于具体在业务中如何实现，还是想着需要结合个小项目来实践下，东西走通个demo只能说明可行，走通不同体量的工程才能说明可用，包括后续的集成测试，压力测试，自动化测试也会一点点儿的开始鼓捣，**路漫漫**啊。\n\n### 附录\n代码地址：[April.WebApi](https://github.com/AprilBlank/April.WebApi/tree/3.0)","slug":"net-core-unittest","published":1,"updated":"2019-11-22T02:56:09.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2n001e9sv7sbbbydqs","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从开始敲代码到现在，不停地都是在喊着记得做测试，记得自测，测试人员打回来扣你money之类的，刚开始因为心疼钱（当然还是为了代码质量），就老老实实自己写完自己跑一遍，没有流程没有规划没有测试文档，就是自己整理一组数据跑一遍，最后依然还是让测试人员老老实实把一大堆测试问题扔给你。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>首先，还是来聊聊为啥要搞测试吧。</p>\n<ol>\n<li>测试有助于代码整体健壮性，覆盖测试、压力测试都是为了全方位多角度更快更好为用户服务。</li>\n<li>测试有助于提高程序猿的积极性以及引起自身的重视，毕竟一个坑栽一遍就够了，两次也能容忍，再三再四再五怕是要被搞，同时这也是自我提高的一种手段吧。</li>\n<li>软件开发流程收尾的工作就是测试，绕不过，毕竟验收才是最终目标，达到效果才能获得应有的。</li>\n</ol>\n<p>好了，聊完这些，当然我也不是专业测试人员，肯定不会给个测试文档模板，喏，照着这个规范起来，我主要是要鼓捣下我之前一直想试试的单元测试，这个自动化测试的手段之一，一直想试试但是一直都放着。</p>\n<p>在<strong>MSTest</strong>，<strong>NUnit</strong>，<strong>xUint</strong>这三个中让我稍微犹豫了下，不过三七二十八管他呢，随便来个吧，就选了<strong>xUnit</strong>，当然MSTest是官方的，支持度应该高点儿，但是这不是我们该犹豫抉择的地方。</p>\n<h3 id=\"xUnit\"><a href=\"#xUnit\" class=\"headerlink\" title=\"xUnit\"></a>xUnit</h3><p>首先，我们新建一个项目<strong>April.Test</strong>。<br><img src=\"/2019/11/05/net-core-unittest/1.png\" alt=\"新建\"></p>\n<h4 id=\"Fact\"><a href=\"#Fact\" class=\"headerlink\" title=\"Fact\"></a>Fact</h4><p>新建之后，我们看到有个默认的 <strong>[Fact]</strong>。</p>\n<p>这个就是测试的标准格式了，如果我们不需要测试数据的话，就是在这个标签下的方法做断言，简单举个例子吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestEqual</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    Assert.Equal(<span class=\"number\">30</span>, Add(a, b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>敲下Assert之后，发现断言好多方法，这里也就不一一说明了，感觉方法名起的都挺明白的，这里就不过多描述了，代码中也有些测试示例，地址在文末给出。</p>\n<h4 id=\"Theory\"><a href=\"#Theory\" class=\"headerlink\" title=\"Theory\"></a>Theory</h4><p>我们在上面的代码可以看到，所有的数据都是自己定好的，如果我想自己做参数传入测试怎么搞呢，这时候就要用到 <strong>[Theory]</strong> 这个标签以及 <strong>[InlineData]</strong> 了，标签是为了更好的区分方法的类型（个人理解），来看下这种参数传递的测试怎么搞吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(new object[</span>] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;,<span class=\"number\">1</span>)]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(new object[</span>] &#123; <span class=\"string\">\"t\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span> &#125;, <span class=\"string\">\"t\"</span>)]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestContains</span>(<span class=\"params\"><span class=\"keyword\">object</span>[] objs,<span class=\"keyword\">object</span> obj</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Assert.Contains(obj, objs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们也可以使用自定义数组来做测试数据源，这里我起初以为可以传任意类型参数，但是MemberData只支持object[]。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemberData(nameof(tempDatas))</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestData</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = a + b;</span><br><span class=\"line\">    Assert.True(result == Add(a, b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">object</span>[]&gt; tempDatas</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">5</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">12</span>, <span class=\"number\">12</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h4><blockquote>\n<p>在之前鼓捣单元测试的时候，我一直想一个问题，如果只是这种操作的话，那测试有何意义，但是后来发现，原来单元测试比我以为能做的多得多，所以，学习是个不停的行程，走的多了，风景也就多了。</p>\n</blockquote>\n<p>这里可以引入一个流程，在我们测试自己的工程的时候，我们需要三步来做完单个的测试。</p>\n<ul>\n<li>Arrange（准备工作）</li>\n<li>Act（实现方法）</li>\n<li>Assert（断言结果）</li>\n</ul>\n<p>在测试之前，我们需要在当前工程引入一个<strong>Moq</strong>，至于为什么用这个呢，就跟vue一样我们需要模拟（虽说mock跟Moq还不是那么类似），总不可能我们单元测试引入了orm来实际操作数据库吧（当然测试库这个也是可行的），所以我们需要模拟接口的实现类及方法。</p>\n<p><img src=\"/2019/11/05/net-core-unittest/2.png\" alt=\"引入\"><br>引入完，我们将April.WebApi引入到当前工程，之后我们创建一个Values的接口测试类<strong>ValuesControllerTest</strong>，然后测试方法如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestGet</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Arrange</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mockRepo = <span class=\"keyword\">new</span> Mock&lt;IStudentService&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> controller = <span class=\"keyword\">new</span> ValuesController(mockRepo.Object);</span><br><span class=\"line\">    <span class=\"comment\">// Act</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = controller.Get();</span><br><span class=\"line\">    <span class=\"comment\">// Assert</span></span><br><span class=\"line\">    Assert.Equal(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"\"</span> &#125;, result.Value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意下，对应接口的方法我是都注释的，最终只有返回了字符串数组，因为对应接口中的方法都需要初始化，那么我们来测试下获取数据的接口，看下这个Moq的用法吧，首先我们需要初始化Mock来实现对应接口，然后我们通过实现对应方法来模拟获取数据。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">      [<span class=\"meta\">InlineData(1)</span>]</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestGetByID</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> mockRepo = <span class=\"keyword\">new</span> Mock&lt;IStudentService&gt;();</span><br><span class=\"line\">          mockRepo.Setup(repo =&gt; repo.GetList(s =&gt; s.ID == <span class=\"number\">38</span>).ToList())</span><br><span class=\"line\">              .Returns(GetList());</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">var</span> controller = <span class=\"keyword\">new</span> ValuesController(mockRepo.Object);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">var</span> result = controller.Get(id);</span><br><span class=\"line\"></span><br><span class=\"line\">          Assert.NotNull(result);</span><br><span class=\"line\">          Assert.Contains(<span class=\"string\">\"大洛阳\"</span>, result.Value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> List&lt;StudentEntity&gt; <span class=\"title\">GetList</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          List&lt;StudentEntity&gt; entities = <span class=\"keyword\">new</span> List&lt;StudentEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          entities.Add(<span class=\"keyword\">new</span> StudentEntity()</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ID = <span class=\"number\">1</span>,</span><br><span class=\"line\">              Name = <span class=\"string\">\"小明\"</span>,</span><br><span class=\"line\">              Number = <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">              Age = <span class=\"number\">19</span>,</span><br><span class=\"line\">              Sex = <span class=\"number\">1</span>,</span><br><span class=\"line\">              Address = <span class=\"string\">\"大洛阳\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          entities.Add(<span class=\"keyword\">new</span> StudentEntity()</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ID = <span class=\"number\">2</span>,</span><br><span class=\"line\">              Name = <span class=\"string\">\"小红\"</span>,</span><br><span class=\"line\">              Number = <span class=\"string\">\"456789\"</span>,</span><br><span class=\"line\">              Age = <span class=\"number\">18</span>,</span><br><span class=\"line\">              Sex = <span class=\"number\">0</span>,</span><br><span class=\"line\">              Address = <span class=\"string\">\"大洛阳\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> entities;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>写到这我发现，我在引入WebApi的时候，好像已经把几个工程都已经引入进来，这个不知道合适不合适。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里，基本上单元测试这块儿也简单了走了一遍，至于具体在业务中如何实现，还是想着需要结合个小项目来实践下，东西走通个demo只能说明可行，走通不同体量的工程才能说明可用，包括后续的集成测试，压力测试，自动化测试也会一点点儿的开始鼓捣，<strong>路漫漫</strong>啊。</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>代码地址：<a href=\"https://github.com/AprilBlank/April.WebApi/tree/3.0\" target=\"_blank\" rel=\"noopener\">April.WebApi</a></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从开始敲代码到现在，不停地都是在喊着记得做测试，记得自测，测试人员打回来扣你money之类的，刚开始因为心疼钱（当然还是为了代码质量），就老老实实自己写完自己跑一遍，没有流程没有规划没有测试文档，就是自己整理一组数据跑一遍，最后依然还是让测试人员老老实实把一大堆测试问题扔给你。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>首先，还是来聊聊为啥要搞测试吧。</p>\n<ol>\n<li>测试有助于代码整体健壮性，覆盖测试、压力测试都是为了全方位多角度更快更好为用户服务。</li>\n<li>测试有助于提高程序猿的积极性以及引起自身的重视，毕竟一个坑栽一遍就够了，两次也能容忍，再三再四再五怕是要被搞，同时这也是自我提高的一种手段吧。</li>\n<li>软件开发流程收尾的工作就是测试，绕不过，毕竟验收才是最终目标，达到效果才能获得应有的。</li>\n</ol>\n<p>好了，聊完这些，当然我也不是专业测试人员，肯定不会给个测试文档模板，喏，照着这个规范起来，我主要是要鼓捣下我之前一直想试试的单元测试，这个自动化测试的手段之一，一直想试试但是一直都放着。</p>\n<p>在<strong>MSTest</strong>，<strong>NUnit</strong>，<strong>xUint</strong>这三个中让我稍微犹豫了下，不过三七二十八管他呢，随便来个吧，就选了<strong>xUnit</strong>，当然MSTest是官方的，支持度应该高点儿，但是这不是我们该犹豫抉择的地方。</p>\n<h3 id=\"xUnit\"><a href=\"#xUnit\" class=\"headerlink\" title=\"xUnit\"></a>xUnit</h3><p>首先，我们新建一个项目<strong>April.Test</strong>。<br><img src=\"/2019/11/05/net-core-unittest/1.png\" alt=\"新建\"></p>\n<h4 id=\"Fact\"><a href=\"#Fact\" class=\"headerlink\" title=\"Fact\"></a>Fact</h4><p>新建之后，我们看到有个默认的 <strong>[Fact]</strong>。</p>\n<p>这个就是测试的标准格式了，如果我们不需要测试数据的话，就是在这个标签下的方法做断言，简单举个例子吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestEqual</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    Assert.Equal(<span class=\"number\">30</span>, Add(a, b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>敲下Assert之后，发现断言好多方法，这里也就不一一说明了，感觉方法名起的都挺明白的，这里就不过多描述了，代码中也有些测试示例，地址在文末给出。</p>\n<h4 id=\"Theory\"><a href=\"#Theory\" class=\"headerlink\" title=\"Theory\"></a>Theory</h4><p>我们在上面的代码可以看到，所有的数据都是自己定好的，如果我想自己做参数传入测试怎么搞呢，这时候就要用到 <strong>[Theory]</strong> 这个标签以及 <strong>[InlineData]</strong> 了，标签是为了更好的区分方法的类型（个人理解），来看下这种参数传递的测试怎么搞吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(new object[</span>] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;,<span class=\"number\">1</span>)]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(new object[</span>] &#123; <span class=\"string\">\"t\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span> &#125;, <span class=\"string\">\"t\"</span>)]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestContains</span>(<span class=\"params\"><span class=\"keyword\">object</span>[] objs,<span class=\"keyword\">object</span> obj</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Assert.Contains(obj, objs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然我们也可以使用自定义数组来做测试数据源，这里我起初以为可以传任意类型参数，但是MemberData只支持object[]。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemberData(nameof(tempDatas))</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestData</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = a + b;</span><br><span class=\"line\">    Assert.True(result == Add(a, b));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">object</span>[]&gt; tempDatas</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">5</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[] &#123; <span class=\"number\">12</span>, <span class=\"number\">12</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h4><blockquote>\n<p>在之前鼓捣单元测试的时候，我一直想一个问题，如果只是这种操作的话，那测试有何意义，但是后来发现，原来单元测试比我以为能做的多得多，所以，学习是个不停的行程，走的多了，风景也就多了。</p>\n</blockquote>\n<p>这里可以引入一个流程，在我们测试自己的工程的时候，我们需要三步来做完单个的测试。</p>\n<ul>\n<li>Arrange（准备工作）</li>\n<li>Act（实现方法）</li>\n<li>Assert（断言结果）</li>\n</ul>\n<p>在测试之前，我们需要在当前工程引入一个<strong>Moq</strong>，至于为什么用这个呢，就跟vue一样我们需要模拟（虽说mock跟Moq还不是那么类似），总不可能我们单元测试引入了orm来实际操作数据库吧（当然测试库这个也是可行的），所以我们需要模拟接口的实现类及方法。</p>\n<p><img src=\"/2019/11/05/net-core-unittest/2.png\" alt=\"引入\"><br>引入完，我们将April.WebApi引入到当前工程，之后我们创建一个Values的接口测试类<strong>ValuesControllerTest</strong>，然后测试方法如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestGet</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Arrange</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mockRepo = <span class=\"keyword\">new</span> Mock&lt;IStudentService&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> controller = <span class=\"keyword\">new</span> ValuesController(mockRepo.Object);</span><br><span class=\"line\">    <span class=\"comment\">// Act</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = controller.Get();</span><br><span class=\"line\">    <span class=\"comment\">// Assert</span></span><br><span class=\"line\">    Assert.Equal(<span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"\"</span> &#125;, result.Value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里注意下，对应接口的方法我是都注释的，最终只有返回了字符串数组，因为对应接口中的方法都需要初始化，那么我们来测试下获取数据的接口，看下这个Moq的用法吧，首先我们需要初始化Mock来实现对应接口，然后我们通过实现对应方法来模拟获取数据。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">      [<span class=\"meta\">InlineData(1)</span>]</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestGetByID</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> mockRepo = <span class=\"keyword\">new</span> Mock&lt;IStudentService&gt;();</span><br><span class=\"line\">          mockRepo.Setup(repo =&gt; repo.GetList(s =&gt; s.ID == <span class=\"number\">38</span>).ToList())</span><br><span class=\"line\">              .Returns(GetList());</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">var</span> controller = <span class=\"keyword\">new</span> ValuesController(mockRepo.Object);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">var</span> result = controller.Get(id);</span><br><span class=\"line\"></span><br><span class=\"line\">          Assert.NotNull(result);</span><br><span class=\"line\">          Assert.Contains(<span class=\"string\">\"大洛阳\"</span>, result.Value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> List&lt;StudentEntity&gt; <span class=\"title\">GetList</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          List&lt;StudentEntity&gt; entities = <span class=\"keyword\">new</span> List&lt;StudentEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          entities.Add(<span class=\"keyword\">new</span> StudentEntity()</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ID = <span class=\"number\">1</span>,</span><br><span class=\"line\">              Name = <span class=\"string\">\"小明\"</span>,</span><br><span class=\"line\">              Number = <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">              Age = <span class=\"number\">19</span>,</span><br><span class=\"line\">              Sex = <span class=\"number\">1</span>,</span><br><span class=\"line\">              Address = <span class=\"string\">\"大洛阳\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          entities.Add(<span class=\"keyword\">new</span> StudentEntity()</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ID = <span class=\"number\">2</span>,</span><br><span class=\"line\">              Name = <span class=\"string\">\"小红\"</span>,</span><br><span class=\"line\">              Number = <span class=\"string\">\"456789\"</span>,</span><br><span class=\"line\">              Age = <span class=\"number\">18</span>,</span><br><span class=\"line\">              Sex = <span class=\"number\">0</span>,</span><br><span class=\"line\">              Address = <span class=\"string\">\"大洛阳\"</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> entities;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>写到这我发现，我在引入WebApi的时候，好像已经把几个工程都已经引入进来，这个不知道合适不合适。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里，基本上单元测试这块儿也简单了走了一遍，至于具体在业务中如何实现，还是想着需要结合个小项目来实践下，东西走通个demo只能说明可行，走通不同体量的工程才能说明可用，包括后续的集成测试，压力测试，自动化测试也会一点点儿的开始鼓捣，<strong>路漫漫</strong>啊。</p>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>代码地址：<a href=\"https://github.com/AprilBlank/April.WebApi/tree/3.0\" target=\"_blank\" rel=\"noopener\">April.WebApi</a></p>\n"},{"title":"net core Webapi基础工程搭建（一）——开发工具及环境","date":"2019-07-02T09:29:33.000Z","_content":"\n### 开发工具\n**Visual Studio 2019**，既然要折腾那就体验最新版的开发工具有什么特殊的地方，之前个人开发使用的是2017。\n下载地址：https://visualstudio.microsoft.com/zh-hans/downloads/\n\n### 版本\n**net core 2.2**，最早是用.netframework的，后来直接一个跨度到net core 2.1，现在net core 3.0预览版都出了，就体验把2.2版本。\n下载地址：https://dotnet.microsoft.com/download\n\n### 后端框架\n\n- **April.WebApi 后端接口服务** \n\n- **April.Service 数据层支持**\n\n-  **April.Entity 数据实体**\n\n-  **April.Util 公共类库**\n\n大概开发前的准备工作基本完成，下一步就是创建这个新工程了。","source":"_posts/net-core-tools-and-environment.md","raw":"---\ntitle: net core Webapi基础工程搭建（一）——开发工具及环境\ndate: 2019-07-02 17:29:33\ntags: net core\ncategories: AprilBlank\n---\n\n### 开发工具\n**Visual Studio 2019**，既然要折腾那就体验最新版的开发工具有什么特殊的地方，之前个人开发使用的是2017。\n下载地址：https://visualstudio.microsoft.com/zh-hans/downloads/\n\n### 版本\n**net core 2.2**，最早是用.netframework的，后来直接一个跨度到net core 2.1，现在net core 3.0预览版都出了，就体验把2.2版本。\n下载地址：https://dotnet.microsoft.com/download\n\n### 后端框架\n\n- **April.WebApi 后端接口服务** \n\n- **April.Service 数据层支持**\n\n-  **April.Entity 数据实体**\n\n-  **April.Util 公共类库**\n\n大概开发前的准备工作基本完成，下一步就是创建这个新工程了。","slug":"net-core-tools-and-environment","published":1,"updated":"2019-09-30T05:47:24.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2p001i9sv7058nq4z7","content":"<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><p><strong>Visual Studio 2019</strong>，既然要折腾那就体验最新版的开发工具有什么特殊的地方，之前个人开发使用的是2017。<br>下载地址：<a href=\"https://visualstudio.microsoft.com/zh-hans/downloads/\" target=\"_blank\" rel=\"noopener\">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p><strong>net core 2.2</strong>，最早是用.netframework的，后来直接一个跨度到net core 2.1，现在net core 3.0预览版都出了，就体验把2.2版本。<br>下载地址：<a href=\"https://dotnet.microsoft.com/download\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download</a></p>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li><p><strong>April.WebApi 后端接口服务</strong> </p>\n</li>\n<li><p><strong>April.Service 数据层支持</strong></p>\n</li>\n<li><p><strong>April.Entity 数据实体</strong></p>\n</li>\n<li><p><strong>April.Util 公共类库</strong></p>\n</li>\n</ul>\n<p>大概开发前的准备工作基本完成，下一步就是创建这个新工程了。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h3><p><strong>Visual Studio 2019</strong>，既然要折腾那就体验最新版的开发工具有什么特殊的地方，之前个人开发使用的是2017。<br>下载地址：<a href=\"https://visualstudio.microsoft.com/zh-hans/downloads/\" target=\"_blank\" rel=\"noopener\">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p><strong>net core 2.2</strong>，最早是用.netframework的，后来直接一个跨度到net core 2.1，现在net core 3.0预览版都出了，就体验把2.2版本。<br>下载地址：<a href=\"https://dotnet.microsoft.com/download\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download</a></p>\n<h3 id=\"后端框架\"><a href=\"#后端框架\" class=\"headerlink\" title=\"后端框架\"></a>后端框架</h3><ul>\n<li><p><strong>April.WebApi 后端接口服务</strong> </p>\n</li>\n<li><p><strong>April.Service 数据层支持</strong></p>\n</li>\n<li><p><strong>April.Entity 数据实体</strong></p>\n</li>\n<li><p><strong>April.Util 公共类库</strong></p>\n</li>\n</ul>\n<p>大概开发前的准备工作基本完成，下一步就是创建这个新工程了。</p>\n"},{"title":"向net core 3.0进击——April.WebApi从2.2爬到3.0","date":"2019-10-09T08:21:33.000Z","_content":"\n### 前言\n在之前对Swagger的变化做了调整后，就开始想着要不把之前的工程升级得了，这样就还是个demo工程，来做各种测试（当然还是因为懒），这就有了今天这个比较折腾的一步。\n\n### 升级之路\n首先，April.WebApi工程右键->属性，将之前的net core 2.2升级到3.0，然后对每个类库项目右键->属性，将net standard 2.0升级到2.1（这个应该是没啥）。\n\n升级之后，我们重新生成一下，咦，没报错美滋滋。\n\n因为之前有过创建3.0的工程例子，所以对于Startup这块儿还是要调整下的。\n\n#### 问题1\n![问题](net-core-v3-april-webapi/1.png)\n![问题](net-core-v3-april-webapi/2.png)\n![问题](net-core-v3-april-webapi/3.png)\n因为net core3.0之后，对于Api可能是调整了（因为没创建过Mvc工程），所以这个地方不再模糊的使用Mvc了。\n\n- **修改后**\n\n因为部分方法被弃用，因为3.0是一个崭新的开始，在开头添加**Microsoft.Extensions.Hosting**的引用。\n![修改](net-core-v3-april-webapi/4.png)\n![修改](net-core-v3-april-webapi/5.png)\n![修改](net-core-v3-april-webapi/6.png)\n\n好了，修改完启动文件，我们来愉快的运行吧。\n\n#### 问题2\n![问题](net-core-v3-april-webapi/7.png)\n开头都这么难么，我们来看下这个错误，好了是跨域的问题，现在不让AllowAll了是吧，并不是，是因为我们又要允许所有访问，还能带上Cookie，现在不让这样搞了。\n\n- **修改后**\n![修改](net-core-v3-april-webapi/8.png)\n这个问题修改完后，我们再来运行下程序。\n\n#### 问题3\n![问题](net-core-v3-april-webapi/9.png)\n这个是什么问题呢，Session也不让这样玩了，也不是，主要问题呢是现在不需要WebHost了，Session的实现不明确了应该是，所以我们来该升级的升级，该调整的调整，**其他工程引入的同样需要更新下**。\n\n- **修改**\n![修改](net-core-v3-april-webapi/10.png)\n> 这个地方因为我在看到错误后直接来这升级了，没有截到图，升级的库名**Microsoft.VisualStudio.Web.CodeGeneration.Design**。\n\n修改Program内容如下：\n```csharp\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n```\n- **补充**\n\n在下面的执行时，我发现使用Session会有问题，具体什么问题呢，因为3.0多了一个注册项，所以session的代码调整如下，这里注意下UseSession的位置要在Redirection之后。\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n        \t…\n            #region Session\n            services.AddDistributedMemoryCache();\n            services.AddSession(options =>\n            {\n                options.Cookie.Name = \"April.Session\";\n                options.IdleTimeout = TimeSpan.FromSeconds(2000);//设置session的过期时间\n                options.Cookie.HttpOnly = true;//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要\n                options.Cookie.IsEssential = true;\n            });\n            #endregion\n            …\n        }\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n        \t…\n            app.UseHttpsRedirection();\n\n            app.UseSession();\n\n            app.UseRouting();\n            …\n        }\n```\n\n\n修改完成后，我们再来运行下程序。\n\n#### 问题4\n![问题](net-core-v3-april-webapi/11.png)\n- **修改**\n\n这个我不需要翻译软件都能看到，这什么什么不让返回了，emm。\n这个问题我感觉是3.0可能是还没开始扩展，毕竟刚出想让人还是老老实实用内置的DI吧，这里我的处理方法，只能是老老实实改回void，这个代码就不用再展示了，不算是最好的解决方法。\n\n让我们忘记刚才的难受，继续运行程序吧。\n\n#### 问题5\n![错误](net-core-v3-april-webapi/12.png)\n这个乌压压一大片我还以为浏览器崩了呢，仔细一看，好吧，swagger的事，这里就不多说了。\n\n- **修改**\n具体参考[向net core 3.0进击——Swagger的改变](/2019/10/07/net-core-v3-swagger/)\n\n在我以为能看到友好的Swagger的时候，现实给了我一巴掌。\n#### 问题6\n![问题](net-core-v3-april-webapi/13.png)\n这个问题，依然是想用扩展的DI导致的，AspectCore这块儿的东西暂时先屏蔽了，后续找到解决方法之后再处理吧。\n\n- **修改**\n![修改](net-core-v3-april-webapi/14.png)\n\n经过以上一堆折腾后，我们终于迎来了Swagger欢迎的样子，不容易。\n\n![Swagger](net-core-v3-april-webapi/15.png)\n### 测试\n> 为什么还要带上这个呢，我也搞不懂，习惯了测试一下功能吧，但是这里就不一一截图了，太麻烦（当然测试也只是简单的执行了下之前的测试方法）。\n\n- log4功能正常\n- swagger功能正常\n- cache功能正常\n- session功能正常\n- cookie功能正常\n- sqlsugar功能正常\n- aop日志功能正常\n- redis功能正常\n- 拦截器与中间层功能正常\n\n> 如果有我没试到的问题，可以给我留言，因为一个人的力量终究还是有那么点儿局限的。\n### 小结\n在覆盖原代码的时候我想了一会儿，我担心万一有人在用呢，这样覆盖后会不会对人有影响，但是转念一想，唉，这东西怕是都没人用吧，自己鼓捣的东西，还是折腾点儿好，折腾使人进步，折腾活跃大脑，折腾…，编不下去了，以后再鼓捣新东西就是直接net core3.0上搞起了。","source":"_posts/net-core-v3-april-webapi.md","raw":"---\ntitle: 向net core 3.0进击——April.WebApi从2.2爬到3.0\ndate: 2019-10-09 16:21:33\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n在之前对Swagger的变化做了调整后，就开始想着要不把之前的工程升级得了，这样就还是个demo工程，来做各种测试（当然还是因为懒），这就有了今天这个比较折腾的一步。\n\n### 升级之路\n首先，April.WebApi工程右键->属性，将之前的net core 2.2升级到3.0，然后对每个类库项目右键->属性，将net standard 2.0升级到2.1（这个应该是没啥）。\n\n升级之后，我们重新生成一下，咦，没报错美滋滋。\n\n因为之前有过创建3.0的工程例子，所以对于Startup这块儿还是要调整下的。\n\n#### 问题1\n![问题](net-core-v3-april-webapi/1.png)\n![问题](net-core-v3-april-webapi/2.png)\n![问题](net-core-v3-april-webapi/3.png)\n因为net core3.0之后，对于Api可能是调整了（因为没创建过Mvc工程），所以这个地方不再模糊的使用Mvc了。\n\n- **修改后**\n\n因为部分方法被弃用，因为3.0是一个崭新的开始，在开头添加**Microsoft.Extensions.Hosting**的引用。\n![修改](net-core-v3-april-webapi/4.png)\n![修改](net-core-v3-april-webapi/5.png)\n![修改](net-core-v3-april-webapi/6.png)\n\n好了，修改完启动文件，我们来愉快的运行吧。\n\n#### 问题2\n![问题](net-core-v3-april-webapi/7.png)\n开头都这么难么，我们来看下这个错误，好了是跨域的问题，现在不让AllowAll了是吧，并不是，是因为我们又要允许所有访问，还能带上Cookie，现在不让这样搞了。\n\n- **修改后**\n![修改](net-core-v3-april-webapi/8.png)\n这个问题修改完后，我们再来运行下程序。\n\n#### 问题3\n![问题](net-core-v3-april-webapi/9.png)\n这个是什么问题呢，Session也不让这样玩了，也不是，主要问题呢是现在不需要WebHost了，Session的实现不明确了应该是，所以我们来该升级的升级，该调整的调整，**其他工程引入的同样需要更新下**。\n\n- **修改**\n![修改](net-core-v3-april-webapi/10.png)\n> 这个地方因为我在看到错误后直接来这升级了，没有截到图，升级的库名**Microsoft.VisualStudio.Web.CodeGeneration.Design**。\n\n修改Program内容如下：\n```csharp\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n```\n- **补充**\n\n在下面的执行时，我发现使用Session会有问题，具体什么问题呢，因为3.0多了一个注册项，所以session的代码调整如下，这里注意下UseSession的位置要在Redirection之后。\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n        \t…\n            #region Session\n            services.AddDistributedMemoryCache();\n            services.AddSession(options =>\n            {\n                options.Cookie.Name = \"April.Session\";\n                options.IdleTimeout = TimeSpan.FromSeconds(2000);//设置session的过期时间\n                options.Cookie.HttpOnly = true;//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要\n                options.Cookie.IsEssential = true;\n            });\n            #endregion\n            …\n        }\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n        \t…\n            app.UseHttpsRedirection();\n\n            app.UseSession();\n\n            app.UseRouting();\n            …\n        }\n```\n\n\n修改完成后，我们再来运行下程序。\n\n#### 问题4\n![问题](net-core-v3-april-webapi/11.png)\n- **修改**\n\n这个我不需要翻译软件都能看到，这什么什么不让返回了，emm。\n这个问题我感觉是3.0可能是还没开始扩展，毕竟刚出想让人还是老老实实用内置的DI吧，这里我的处理方法，只能是老老实实改回void，这个代码就不用再展示了，不算是最好的解决方法。\n\n让我们忘记刚才的难受，继续运行程序吧。\n\n#### 问题5\n![错误](net-core-v3-april-webapi/12.png)\n这个乌压压一大片我还以为浏览器崩了呢，仔细一看，好吧，swagger的事，这里就不多说了。\n\n- **修改**\n具体参考[向net core 3.0进击——Swagger的改变](/2019/10/07/net-core-v3-swagger/)\n\n在我以为能看到友好的Swagger的时候，现实给了我一巴掌。\n#### 问题6\n![问题](net-core-v3-april-webapi/13.png)\n这个问题，依然是想用扩展的DI导致的，AspectCore这块儿的东西暂时先屏蔽了，后续找到解决方法之后再处理吧。\n\n- **修改**\n![修改](net-core-v3-april-webapi/14.png)\n\n经过以上一堆折腾后，我们终于迎来了Swagger欢迎的样子，不容易。\n\n![Swagger](net-core-v3-april-webapi/15.png)\n### 测试\n> 为什么还要带上这个呢，我也搞不懂，习惯了测试一下功能吧，但是这里就不一一截图了，太麻烦（当然测试也只是简单的执行了下之前的测试方法）。\n\n- log4功能正常\n- swagger功能正常\n- cache功能正常\n- session功能正常\n- cookie功能正常\n- sqlsugar功能正常\n- aop日志功能正常\n- redis功能正常\n- 拦截器与中间层功能正常\n\n> 如果有我没试到的问题，可以给我留言，因为一个人的力量终究还是有那么点儿局限的。\n### 小结\n在覆盖原代码的时候我想了一会儿，我担心万一有人在用呢，这样覆盖后会不会对人有影响，但是转念一想，唉，这东西怕是都没人用吧，自己鼓捣的东西，还是折腾点儿好，折腾使人进步，折腾活跃大脑，折腾…，编不下去了，以后再鼓捣新东西就是直接net core3.0上搞起了。","slug":"net-core-v3-april-webapi","published":1,"updated":"2019-10-10T06:33:18.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2q001l9sv7zay4q50c","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前对Swagger的变化做了调整后，就开始想着要不把之前的工程升级得了，这样就还是个demo工程，来做各种测试（当然还是因为懒），这就有了今天这个比较折腾的一步。</p>\n<h3 id=\"升级之路\"><a href=\"#升级之路\" class=\"headerlink\" title=\"升级之路\"></a>升级之路</h3><p>首先，April.WebApi工程右键-&gt;属性，将之前的net core 2.2升级到3.0，然后对每个类库项目右键-&gt;属性，将net standard 2.0升级到2.1（这个应该是没啥）。</p>\n<p>升级之后，我们重新生成一下，咦，没报错美滋滋。</p>\n<p>因为之前有过创建3.0的工程例子，所以对于Startup这块儿还是要调整下的。</p>\n<h4 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/1.png\" alt=\"问题\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/2.png\" alt=\"问题\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/3.png\" alt=\"问题\"><br>因为net core3.0之后，对于Api可能是调整了（因为没创建过Mvc工程），所以这个地方不再模糊的使用Mvc了。</p>\n<ul>\n<li><strong>修改后</strong></li>\n</ul>\n<p>因为部分方法被弃用，因为3.0是一个崭新的开始，在开头添加<strong>Microsoft.Extensions.Hosting</strong>的引用。<br><img src=\"/2019/10/09/net-core-v3-april-webapi/4.png\" alt=\"修改\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/5.png\" alt=\"修改\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/6.png\" alt=\"修改\"></p>\n<p>好了，修改完启动文件，我们来愉快的运行吧。</p>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/7.png\" alt=\"问题\"><br>开头都这么难么，我们来看下这个错误，好了是跨域的问题，现在不让AllowAll了是吧，并不是，是因为我们又要允许所有访问，还能带上Cookie，现在不让这样搞了。</p>\n<ul>\n<li><strong>修改后</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/8.png\" alt=\"修改\"><br>这个问题修改完后，我们再来运行下程序。</li>\n</ul>\n<h4 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/9.png\" alt=\"问题\"><br>这个是什么问题呢，Session也不让这样玩了，也不是，主要问题呢是现在不需要WebHost了，Session的实现不明确了应该是，所以我们来该升级的升级，该调整的调整，<strong>其他工程引入的同样需要更新下</strong>。</p>\n<ul>\n<li><strong>修改</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/10.png\" alt=\"修改\"><blockquote>\n<p>这个地方因为我在看到错误后直接来这升级了，没有截到图，升级的库名<strong>Microsoft.VisualStudio.Web.CodeGeneration.Design</strong>。</p>\n</blockquote>\n</li>\n</ul>\n<p>修改Program内容如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        CreateHostBuilder(args).Build().Run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">        Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">            .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>补充</strong></li>\n</ul>\n<p>在下面的执行时，我发现使用Session会有问题，具体什么问题呢，因为3.0多了一个注册项，所以session的代码调整如下，这里注意下UseSession的位置要在Redirection之后。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t…</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Session</span></span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    services.AddSession(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"April.Session\"</span>;</span><br><span class=\"line\">        options.IdleTimeout = TimeSpan.FromSeconds(<span class=\"number\">2000</span>);<span class=\"comment\">//设置session的过期时间</span></span><br><span class=\"line\">        options.Cookie.HttpOnly = <span class=\"literal\">true</span>;<span class=\"comment\">//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要</span></span><br><span class=\"line\">        options.Cookie.IsEssential = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t…</span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseRouting();</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，我们再来运行下程序。</p>\n<h4 id=\"问题4\"><a href=\"#问题4\" class=\"headerlink\" title=\"问题4\"></a>问题4</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/11.png\" alt=\"问题\"></p>\n<ul>\n<li><strong>修改</strong></li>\n</ul>\n<p>这个我不需要翻译软件都能看到，这什么什么不让返回了，emm。<br>这个问题我感觉是3.0可能是还没开始扩展，毕竟刚出想让人还是老老实实用内置的DI吧，这里我的处理方法，只能是老老实实改回void，这个代码就不用再展示了，不算是最好的解决方法。</p>\n<p>让我们忘记刚才的难受，继续运行程序吧。</p>\n<h4 id=\"问题5\"><a href=\"#问题5\" class=\"headerlink\" title=\"问题5\"></a>问题5</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/12.png\" alt=\"错误\"><br>这个乌压压一大片我还以为浏览器崩了呢，仔细一看，好吧，swagger的事，这里就不多说了。</p>\n<ul>\n<li><strong>修改</strong><br>具体参考<a href=\"/2019/10/07/net-core-v3-swagger/\">向net core 3.0进击——Swagger的改变</a></li>\n</ul>\n<p>在我以为能看到友好的Swagger的时候，现实给了我一巴掌。</p>\n<h4 id=\"问题6\"><a href=\"#问题6\" class=\"headerlink\" title=\"问题6\"></a>问题6</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/13.png\" alt=\"问题\"><br>这个问题，依然是想用扩展的DI导致的，AspectCore这块儿的东西暂时先屏蔽了，后续找到解决方法之后再处理吧。</p>\n<ul>\n<li><strong>修改</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/14.png\" alt=\"修改\"></li>\n</ul>\n<p>经过以上一堆折腾后，我们终于迎来了Swagger欢迎的样子，不容易。</p>\n<p><img src=\"/2019/10/09/net-core-v3-april-webapi/15.png\" alt=\"Swagger\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>为什么还要带上这个呢，我也搞不懂，习惯了测试一下功能吧，但是这里就不一一截图了，太麻烦（当然测试也只是简单的执行了下之前的测试方法）。</p>\n</blockquote>\n<ul>\n<li>log4功能正常</li>\n<li>swagger功能正常</li>\n<li>cache功能正常</li>\n<li>session功能正常</li>\n<li>cookie功能正常</li>\n<li>sqlsugar功能正常</li>\n<li>aop日志功能正常</li>\n<li>redis功能正常</li>\n<li>拦截器与中间层功能正常</li>\n</ul>\n<blockquote>\n<p>如果有我没试到的问题，可以给我留言，因为一个人的力量终究还是有那么点儿局限的。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在覆盖原代码的时候我想了一会儿，我担心万一有人在用呢，这样覆盖后会不会对人有影响，但是转念一想，唉，这东西怕是都没人用吧，自己鼓捣的东西，还是折腾点儿好，折腾使人进步，折腾活跃大脑，折腾…，编不下去了，以后再鼓捣新东西就是直接net core3.0上搞起了。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前对Swagger的变化做了调整后，就开始想着要不把之前的工程升级得了，这样就还是个demo工程，来做各种测试（当然还是因为懒），这就有了今天这个比较折腾的一步。</p>\n<h3 id=\"升级之路\"><a href=\"#升级之路\" class=\"headerlink\" title=\"升级之路\"></a>升级之路</h3><p>首先，April.WebApi工程右键-&gt;属性，将之前的net core 2.2升级到3.0，然后对每个类库项目右键-&gt;属性，将net standard 2.0升级到2.1（这个应该是没啥）。</p>\n<p>升级之后，我们重新生成一下，咦，没报错美滋滋。</p>\n<p>因为之前有过创建3.0的工程例子，所以对于Startup这块儿还是要调整下的。</p>\n<h4 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/1.png\" alt=\"问题\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/2.png\" alt=\"问题\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/3.png\" alt=\"问题\"><br>因为net core3.0之后，对于Api可能是调整了（因为没创建过Mvc工程），所以这个地方不再模糊的使用Mvc了。</p>\n<ul>\n<li><strong>修改后</strong></li>\n</ul>\n<p>因为部分方法被弃用，因为3.0是一个崭新的开始，在开头添加<strong>Microsoft.Extensions.Hosting</strong>的引用。<br><img src=\"/2019/10/09/net-core-v3-april-webapi/4.png\" alt=\"修改\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/5.png\" alt=\"修改\"><br><img src=\"/2019/10/09/net-core-v3-april-webapi/6.png\" alt=\"修改\"></p>\n<p>好了，修改完启动文件，我们来愉快的运行吧。</p>\n<h4 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/7.png\" alt=\"问题\"><br>开头都这么难么，我们来看下这个错误，好了是跨域的问题，现在不让AllowAll了是吧，并不是，是因为我们又要允许所有访问，还能带上Cookie，现在不让这样搞了。</p>\n<ul>\n<li><strong>修改后</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/8.png\" alt=\"修改\"><br>这个问题修改完后，我们再来运行下程序。</li>\n</ul>\n<h4 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/9.png\" alt=\"问题\"><br>这个是什么问题呢，Session也不让这样玩了，也不是，主要问题呢是现在不需要WebHost了，Session的实现不明确了应该是，所以我们来该升级的升级，该调整的调整，<strong>其他工程引入的同样需要更新下</strong>。</p>\n<ul>\n<li><strong>修改</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/10.png\" alt=\"修改\"><blockquote>\n<p>这个地方因为我在看到错误后直接来这升级了，没有截到图，升级的库名<strong>Microsoft.VisualStudio.Web.CodeGeneration.Design</strong>。</p>\n</blockquote>\n</li>\n</ul>\n<p>修改Program内容如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        CreateHostBuilder(args).Build().Run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHostBuilder <span class=\"title\">CreateHostBuilder</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">        Host.CreateDefaultBuilder(args)</span><br><span class=\"line\">            .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>补充</strong></li>\n</ul>\n<p>在下面的执行时，我发现使用Session会有问题，具体什么问题呢，因为3.0多了一个注册项，所以session的代码调整如下，这里注意下UseSession的位置要在Redirection之后。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t…</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Session</span></span><br><span class=\"line\">    services.AddDistributedMemoryCache();</span><br><span class=\"line\">    services.AddSession(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"April.Session\"</span>;</span><br><span class=\"line\">        options.IdleTimeout = TimeSpan.FromSeconds(<span class=\"number\">2000</span>);<span class=\"comment\">//设置session的过期时间</span></span><br><span class=\"line\">        options.Cookie.HttpOnly = <span class=\"literal\">true</span>;<span class=\"comment\">//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要</span></span><br><span class=\"line\">        options.Cookie.IsEssential = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t…</span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSession();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseRouting();</span><br><span class=\"line\">    …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，我们再来运行下程序。</p>\n<h4 id=\"问题4\"><a href=\"#问题4\" class=\"headerlink\" title=\"问题4\"></a>问题4</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/11.png\" alt=\"问题\"></p>\n<ul>\n<li><strong>修改</strong></li>\n</ul>\n<p>这个我不需要翻译软件都能看到，这什么什么不让返回了，emm。<br>这个问题我感觉是3.0可能是还没开始扩展，毕竟刚出想让人还是老老实实用内置的DI吧，这里我的处理方法，只能是老老实实改回void，这个代码就不用再展示了，不算是最好的解决方法。</p>\n<p>让我们忘记刚才的难受，继续运行程序吧。</p>\n<h4 id=\"问题5\"><a href=\"#问题5\" class=\"headerlink\" title=\"问题5\"></a>问题5</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/12.png\" alt=\"错误\"><br>这个乌压压一大片我还以为浏览器崩了呢，仔细一看，好吧，swagger的事，这里就不多说了。</p>\n<ul>\n<li><strong>修改</strong><br>具体参考<a href=\"/2019/10/07/net-core-v3-swagger/\">向net core 3.0进击——Swagger的改变</a></li>\n</ul>\n<p>在我以为能看到友好的Swagger的时候，现实给了我一巴掌。</p>\n<h4 id=\"问题6\"><a href=\"#问题6\" class=\"headerlink\" title=\"问题6\"></a>问题6</h4><p><img src=\"/2019/10/09/net-core-v3-april-webapi/13.png\" alt=\"问题\"><br>这个问题，依然是想用扩展的DI导致的，AspectCore这块儿的东西暂时先屏蔽了，后续找到解决方法之后再处理吧。</p>\n<ul>\n<li><strong>修改</strong><br><img src=\"/2019/10/09/net-core-v3-april-webapi/14.png\" alt=\"修改\"></li>\n</ul>\n<p>经过以上一堆折腾后，我们终于迎来了Swagger欢迎的样子，不容易。</p>\n<p><img src=\"/2019/10/09/net-core-v3-april-webapi/15.png\" alt=\"Swagger\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>为什么还要带上这个呢，我也搞不懂，习惯了测试一下功能吧，但是这里就不一一截图了，太麻烦（当然测试也只是简单的执行了下之前的测试方法）。</p>\n</blockquote>\n<ul>\n<li>log4功能正常</li>\n<li>swagger功能正常</li>\n<li>cache功能正常</li>\n<li>session功能正常</li>\n<li>cookie功能正常</li>\n<li>sqlsugar功能正常</li>\n<li>aop日志功能正常</li>\n<li>redis功能正常</li>\n<li>拦截器与中间层功能正常</li>\n</ul>\n<blockquote>\n<p>如果有我没试到的问题，可以给我留言，因为一个人的力量终究还是有那么点儿局限的。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在覆盖原代码的时候我想了一会儿，我担心万一有人在用呢，这样覆盖后会不会对人有影响，但是转念一想，唉，这东西怕是都没人用吧，自己鼓捣的东西，还是折腾点儿好，折腾使人进步，折腾活跃大脑，折腾…，编不下去了，以后再鼓捣新东西就是直接net core3.0上搞起了。</p>\n"},{"title":"向net core 3.0进击——Swagger的改变","date":"2019-10-07T14:34:42.000Z","_content":"\n### 前言\n十一小长假在不知不觉间可都没了，在这个小尾巴的空隙，把这两天鼓捣的net core 3.0升级过程记录一下，首先还是根据之前的顺序一个个补充进来，先从Swagger的变化说起（新建工程什么的不多说了，就是选择的时候选3.0就可以了，2019新版更新后创建默认都是3.0）。\n\n### 引入\n按之前的习惯，对于引入我是不会多说，一个链接（我自己之前引入那些截图）就给大家了，但是因为3.0属于比较新的版本，所以在引入的时候，有些注意点还是要标注下的。\n![引入](net-core-v3-swagger/1.png)\n> 在3.0中，我们会在Startup这里发现，Mvc没了统一替换成Controllers，当然这并不影响我们使用，但是最关键的，我们用来实验的**Values**木得了，取而代之的是一个挺不错的api的WeatherForecast接口\n\n引入之后，我们还复制我们之前的swagger配置内容来试试，会发现新版也针对类名，属性做了雪微的调整，这里直接一张图就可以看到。\n![引入](net-core-v3-swagger/2.png)\n```csharp\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new OpenApiInfo\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"ERP WebAPI\",\n                    Description = \"后台框架\",\n                    Contact = new OpenApiContact() { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = new Uri(\"https://www.cnblogs.com/AprilBlank/\") }\n                });\n            });\n            #endregion \n```\n\n在使用注册引用的地方倒是没有变化。\n![引入](net-core-v3-swagger/3.png)\n```csharp\n            #region Swagger\n            app.UseSwagger();\n            app.UseSwaggerUI(options =>\n            {\n                options.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"ApiHelp V1\");\n                //如果设置根目录为swagger,将此值置空\n                options.RoutePrefix = string.Empty;\n            });\n            #endregion\n```\n\n注释这次也一步到位，当然也是没有太大的区别的。\n首先，我们来生成xml文件。\n![生成](net-core-v3-swagger/4.png)\n然后，我们直接复制之前的配置内容即可。\n![生成](net-core-v3-swagger/5.png)\n```csharp\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new OpenApiInfo\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"ERP WebAPI\",\n                    Description = \"后台框架\",\n                    Contact = new OpenApiContact() { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = new Uri(\"https://www.cnblogs.com/AprilBlank/\") }\n                });\n                // 为 Swagger JSON and UI设置xml文档注释路径\n                var basePath = Path.GetDirectoryName(AppContext.BaseDirectory);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）\n                var xmlPath = Path.Combine(basePath, \"ERP.Api.xml\");\n                options.IncludeXmlComments(xmlPath);\n            });\n            #endregion \n```\n\n全搞完之后，我们把默认路径直接指向根路径。\n![配置](net-core-v3-swagger/6.png)\n\n### 测试\n> 唉，没有Values以后测试可怎么过啊。\n\nok，我们来给默认创建的控制器写个注释。\n![测试](net-core-v3-swagger/7.png)\n所有整理完毕之后，我们直接运行程序，这时就会发现，新版的swagger对于默认界面也是做了些调整的。\n![测试](net-core-v3-swagger/8.png)\n\n### 小结\nnet core 3.0作为一个期待已久的版本，大统一的前景还是挺不错的，编程语言只是一个工具，没有好坏之分，所以无需纠结，**你为何而编程**，相信每个人心中都已有答案。","source":"_posts/net-core-v3-swagger.md","raw":"---\ntitle: 向net core 3.0进击——Swagger的改变\ndate: 2019-10-07 22:34:42\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n十一小长假在不知不觉间可都没了，在这个小尾巴的空隙，把这两天鼓捣的net core 3.0升级过程记录一下，首先还是根据之前的顺序一个个补充进来，先从Swagger的变化说起（新建工程什么的不多说了，就是选择的时候选3.0就可以了，2019新版更新后创建默认都是3.0）。\n\n### 引入\n按之前的习惯，对于引入我是不会多说，一个链接（我自己之前引入那些截图）就给大家了，但是因为3.0属于比较新的版本，所以在引入的时候，有些注意点还是要标注下的。\n![引入](net-core-v3-swagger/1.png)\n> 在3.0中，我们会在Startup这里发现，Mvc没了统一替换成Controllers，当然这并不影响我们使用，但是最关键的，我们用来实验的**Values**木得了，取而代之的是一个挺不错的api的WeatherForecast接口\n\n引入之后，我们还复制我们之前的swagger配置内容来试试，会发现新版也针对类名，属性做了雪微的调整，这里直接一张图就可以看到。\n![引入](net-core-v3-swagger/2.png)\n```csharp\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new OpenApiInfo\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"ERP WebAPI\",\n                    Description = \"后台框架\",\n                    Contact = new OpenApiContact() { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = new Uri(\"https://www.cnblogs.com/AprilBlank/\") }\n                });\n            });\n            #endregion \n```\n\n在使用注册引用的地方倒是没有变化。\n![引入](net-core-v3-swagger/3.png)\n```csharp\n            #region Swagger\n            app.UseSwagger();\n            app.UseSwaggerUI(options =>\n            {\n                options.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"ApiHelp V1\");\n                //如果设置根目录为swagger,将此值置空\n                options.RoutePrefix = string.Empty;\n            });\n            #endregion\n```\n\n注释这次也一步到位，当然也是没有太大的区别的。\n首先，我们来生成xml文件。\n![生成](net-core-v3-swagger/4.png)\n然后，我们直接复制之前的配置内容即可。\n![生成](net-core-v3-swagger/5.png)\n```csharp\n            #region Swagger\n            services.AddSwaggerGen(options =>\n            {\n                options.SwaggerDoc(\"v1\", new OpenApiInfo\n                {\n                    Version = \"v1.1.0\",\n                    Title = \"ERP WebAPI\",\n                    Description = \"后台框架\",\n                    Contact = new OpenApiContact() { Name = \"Blank\", Email = \"1829027193@qq.com\", Url = new Uri(\"https://www.cnblogs.com/AprilBlank/\") }\n                });\n                // 为 Swagger JSON and UI设置xml文档注释路径\n                var basePath = Path.GetDirectoryName(AppContext.BaseDirectory);//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）\n                var xmlPath = Path.Combine(basePath, \"ERP.Api.xml\");\n                options.IncludeXmlComments(xmlPath);\n            });\n            #endregion \n```\n\n全搞完之后，我们把默认路径直接指向根路径。\n![配置](net-core-v3-swagger/6.png)\n\n### 测试\n> 唉，没有Values以后测试可怎么过啊。\n\nok，我们来给默认创建的控制器写个注释。\n![测试](net-core-v3-swagger/7.png)\n所有整理完毕之后，我们直接运行程序，这时就会发现，新版的swagger对于默认界面也是做了些调整的。\n![测试](net-core-v3-swagger/8.png)\n\n### 小结\nnet core 3.0作为一个期待已久的版本，大统一的前景还是挺不错的，编程语言只是一个工具，没有好坏之分，所以无需纠结，**你为何而编程**，相信每个人心中都已有答案。","slug":"net-core-v3-swagger","published":1,"updated":"2019-10-10T06:16:41.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2r001o9sv71jn8c2ec","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>十一小长假在不知不觉间可都没了，在这个小尾巴的空隙，把这两天鼓捣的net core 3.0升级过程记录一下，首先还是根据之前的顺序一个个补充进来，先从Swagger的变化说起（新建工程什么的不多说了，就是选择的时候选3.0就可以了，2019新版更新后创建默认都是3.0）。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>按之前的习惯，对于引入我是不会多说，一个链接（我自己之前引入那些截图）就给大家了，但是因为3.0属于比较新的版本，所以在引入的时候，有些注意点还是要标注下的。<br><img src=\"/2019/10/07/net-core-v3-swagger/1.png\" alt=\"引入\"></p>\n<blockquote>\n<p>在3.0中，我们会在Startup这里发现，Mvc没了统一替换成Controllers，当然这并不影响我们使用，但是最关键的，我们用来实验的<strong>Values</strong>木得了，取而代之的是一个挺不错的api的WeatherForecast接口</p>\n</blockquote>\n<p>引入之后，我们还复制我们之前的swagger配置内容来试试，会发现新版也针对类名，属性做了雪微的调整，这里直接一张图就可以看到。<br><img src=\"/2019/10/07/net-core-v3-swagger/2.png\" alt=\"引入\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> OpenApiInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">        Title = <span class=\"string\">\"ERP WebAPI\"</span>,</span><br><span class=\"line\">        Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">        Contact = <span class=\"keyword\">new</span> OpenApiContact() &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"keyword\">new</span> Uri(<span class=\"string\">\"https://www.cnblogs.com/AprilBlank/\"</span>) &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在使用注册引用的地方倒是没有变化。<br><img src=\"/2019/10/07/net-core-v3-swagger/3.png\" alt=\"引入\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">app.UseSwagger();</span><br><span class=\"line\">app.UseSwaggerUI(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>, <span class=\"string\">\"ApiHelp V1\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果设置根目录为swagger,将此值置空</span></span><br><span class=\"line\">    options.RoutePrefix = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注释这次也一步到位，当然也是没有太大的区别的。<br>首先，我们来生成xml文件。<br><img src=\"/2019/10/07/net-core-v3-swagger/4.png\" alt=\"生成\"><br>然后，我们直接复制之前的配置内容即可。<br><img src=\"/2019/10/07/net-core-v3-swagger/5.png\" alt=\"生成\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> OpenApiInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">        Title = <span class=\"string\">\"ERP WebAPI\"</span>,</span><br><span class=\"line\">        Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">        Contact = <span class=\"keyword\">new</span> OpenApiContact() &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"keyword\">new</span> Uri(<span class=\"string\">\"https://www.cnblogs.com/AprilBlank/\"</span>) &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 为 Swagger JSON and UI设置xml文档注释路径</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> basePath = Path.GetDirectoryName(AppContext.BaseDirectory);<span class=\"comment\">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"ERP.Api.xml\"</span>);</span><br><span class=\"line\">    options.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>全搞完之后，我们把默认路径直接指向根路径。<br><img src=\"/2019/10/07/net-core-v3-swagger/6.png\" alt=\"配置\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>唉，没有Values以后测试可怎么过啊。</p>\n</blockquote>\n<p>ok，我们来给默认创建的控制器写个注释。<br><img src=\"/2019/10/07/net-core-v3-swagger/7.png\" alt=\"测试\"><br>所有整理完毕之后，我们直接运行程序，这时就会发现，新版的swagger对于默认界面也是做了些调整的。<br><img src=\"/2019/10/07/net-core-v3-swagger/8.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>net core 3.0作为一个期待已久的版本，大统一的前景还是挺不错的，编程语言只是一个工具，没有好坏之分，所以无需纠结，<strong>你为何而编程</strong>，相信每个人心中都已有答案。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>十一小长假在不知不觉间可都没了，在这个小尾巴的空隙，把这两天鼓捣的net core 3.0升级过程记录一下，首先还是根据之前的顺序一个个补充进来，先从Swagger的变化说起（新建工程什么的不多说了，就是选择的时候选3.0就可以了，2019新版更新后创建默认都是3.0）。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>按之前的习惯，对于引入我是不会多说，一个链接（我自己之前引入那些截图）就给大家了，但是因为3.0属于比较新的版本，所以在引入的时候，有些注意点还是要标注下的。<br><img src=\"/2019/10/07/net-core-v3-swagger/1.png\" alt=\"引入\"></p>\n<blockquote>\n<p>在3.0中，我们会在Startup这里发现，Mvc没了统一替换成Controllers，当然这并不影响我们使用，但是最关键的，我们用来实验的<strong>Values</strong>木得了，取而代之的是一个挺不错的api的WeatherForecast接口</p>\n</blockquote>\n<p>引入之后，我们还复制我们之前的swagger配置内容来试试，会发现新版也针对类名，属性做了雪微的调整，这里直接一张图就可以看到。<br><img src=\"/2019/10/07/net-core-v3-swagger/2.png\" alt=\"引入\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> OpenApiInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">        Title = <span class=\"string\">\"ERP WebAPI\"</span>,</span><br><span class=\"line\">        Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">        Contact = <span class=\"keyword\">new</span> OpenApiContact() &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"keyword\">new</span> Uri(<span class=\"string\">\"https://www.cnblogs.com/AprilBlank/\"</span>) &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>在使用注册引用的地方倒是没有变化。<br><img src=\"/2019/10/07/net-core-v3-swagger/3.png\" alt=\"引入\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">app.UseSwagger();</span><br><span class=\"line\">app.UseSwaggerUI(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerEndpoint(<span class=\"string\">\"/swagger/v1/swagger.json\"</span>, <span class=\"string\">\"ApiHelp V1\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//如果设置根目录为swagger,将此值置空</span></span><br><span class=\"line\">    options.RoutePrefix = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>注释这次也一步到位，当然也是没有太大的区别的。<br>首先，我们来生成xml文件。<br><img src=\"/2019/10/07/net-core-v3-swagger/4.png\" alt=\"生成\"><br>然后，我们直接复制之前的配置内容即可。<br><img src=\"/2019/10/07/net-core-v3-swagger/5.png\" alt=\"生成\"></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">region</span> Swagger</span></span><br><span class=\"line\">services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    options.SwaggerDoc(<span class=\"string\">\"v1\"</span>, <span class=\"keyword\">new</span> OpenApiInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Version = <span class=\"string\">\"v1.1.0\"</span>,</span><br><span class=\"line\">        Title = <span class=\"string\">\"ERP WebAPI\"</span>,</span><br><span class=\"line\">        Description = <span class=\"string\">\"后台框架\"</span>,</span><br><span class=\"line\">        Contact = <span class=\"keyword\">new</span> OpenApiContact() &#123; Name = <span class=\"string\">\"Blank\"</span>, Email = <span class=\"string\">\"1829027193@qq.com\"</span>, Url = <span class=\"keyword\">new</span> Uri(<span class=\"string\">\"https://www.cnblogs.com/AprilBlank/\"</span>) &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 为 Swagger JSON and UI设置xml文档注释路径</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> basePath = Path.GetDirectoryName(AppContext.BaseDirectory);<span class=\"comment\">//获取应用程序所在目录（绝对，不受工作目录影响，建议采用此方法获取路径）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xmlPath = Path.Combine(basePath, <span class=\"string\">\"ERP.Api.xml\"</span>);</span><br><span class=\"line\">    options.IncludeXmlComments(xmlPath);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br></pre></td></tr></table></figure>\n\n<p>全搞完之后，我们把默认路径直接指向根路径。<br><img src=\"/2019/10/07/net-core-v3-swagger/6.png\" alt=\"配置\"></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>唉，没有Values以后测试可怎么过啊。</p>\n</blockquote>\n<p>ok，我们来给默认创建的控制器写个注释。<br><img src=\"/2019/10/07/net-core-v3-swagger/7.png\" alt=\"测试\"><br>所有整理完毕之后，我们直接运行程序，这时就会发现，新版的swagger对于默认界面也是做了些调整的。<br><img src=\"/2019/10/07/net-core-v3-swagger/8.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>net core 3.0作为一个期待已久的版本，大统一的前景还是挺不错的，编程语言只是一个工具，没有好坏之分，所以无需纠结，<strong>你为何而编程</strong>，相信每个人心中都已有答案。</p>\n"},{"title":"net core Webapi 总目录","date":"2019-07-19T03:19:58.000Z","_content":"\n### 博客目录\n\n- [net core Webapi基础工程搭建（一）——开发工具及环境](/2019/07/02/net-core-tools-and-environment/)\n- [net core Webapi基础工程搭建（二）——创建工程](/2019/07/02/net-core-createprogram/)\n- [net core Webapi基础工程搭建（三）——在线接口文档Swagger](/2019/07/02/net-core-swagger/)\n- [net core Webapi基础工程搭建（四）——日志功能log4net](/2019/07/04/net-core-log4net/)\n- [net core Webapi基础工程搭建（五）——缓存机制](/2019/07/10/net-core-cache/)\n- [net core Webapi基础工程搭建（六）——数据库操作_Part 1](/2019/07/18/net-core-sqlsugar-1/)\n- [net core Webapi基础工程搭建（六）——数据库操作_Part 2](/2019/07/19/net-core-sqlsugar-2/)\n- [net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](/2019/07/30/net-core-aop-1/)\n- [net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2](/2019/08/01/net-core-aop-2/)\n\n### 代码地址\n\n代码对应教程信息，不定期上传，如有需要，可直接联系我。\n\n- [gitee](https://gitee.com/AprilBlank/April.WebApi)\n- [github](https://github.com/AprilBlank/April.WebApi)\n\n","source":"_posts/net-core-webapi-main.md","raw":"---\ntitle: net core Webapi 总目录\ndate: 2019-07-19 11:19:58\ntags: net core\ncategories: AprilBlank\n---\n\n### 博客目录\n\n- [net core Webapi基础工程搭建（一）——开发工具及环境](/2019/07/02/net-core-tools-and-environment/)\n- [net core Webapi基础工程搭建（二）——创建工程](/2019/07/02/net-core-createprogram/)\n- [net core Webapi基础工程搭建（三）——在线接口文档Swagger](/2019/07/02/net-core-swagger/)\n- [net core Webapi基础工程搭建（四）——日志功能log4net](/2019/07/04/net-core-log4net/)\n- [net core Webapi基础工程搭建（五）——缓存机制](/2019/07/10/net-core-cache/)\n- [net core Webapi基础工程搭建（六）——数据库操作_Part 1](/2019/07/18/net-core-sqlsugar-1/)\n- [net core Webapi基础工程搭建（六）——数据库操作_Part 2](/2019/07/19/net-core-sqlsugar-2/)\n- [net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](/2019/07/30/net-core-aop-1/)\n- [net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2](/2019/08/01/net-core-aop-2/)\n\n### 代码地址\n\n代码对应教程信息，不定期上传，如有需要，可直接联系我。\n\n- [gitee](https://gitee.com/AprilBlank/April.WebApi)\n- [github](https://github.com/AprilBlank/April.WebApi)\n\n","slug":"net-core-webapi-main","published":1,"updated":"2019-09-30T05:47:27.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2s001r9sv7y9kxn9pu","content":"<h3 id=\"博客目录\"><a href=\"#博客目录\" class=\"headerlink\" title=\"博客目录\"></a>博客目录</h3><ul>\n<li><a href=\"/2019/07/02/net-core-tools-and-environment/\">net core Webapi基础工程搭建（一）——开发工具及环境</a></li>\n<li><a href=\"/2019/07/02/net-core-createprogram/\">net core Webapi基础工程搭建（二）——创建工程</a></li>\n<li><a href=\"/2019/07/02/net-core-swagger/\">net core Webapi基础工程搭建（三）——在线接口文档Swagger</a></li>\n<li><a href=\"/2019/07/04/net-core-log4net/\">net core Webapi基础工程搭建（四）——日志功能log4net</a></li>\n<li><a href=\"/2019/07/10/net-core-cache/\">net core Webapi基础工程搭建（五）——缓存机制</a></li>\n<li><a href=\"/2019/07/18/net-core-sqlsugar-1/\">net core Webapi基础工程搭建（六）——数据库操作_Part 1</a></li>\n<li><a href=\"/2019/07/19/net-core-sqlsugar-2/\">net core Webapi基础工程搭建（六）——数据库操作_Part 2</a></li>\n<li><a href=\"/2019/07/30/net-core-aop-1/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a></li>\n<li><a href=\"/2019/08/01/net-core-aop-2/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2</a></li>\n</ul>\n<h3 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h3><p>代码对应教程信息，不定期上传，如有需要，可直接联系我。</p>\n<ul>\n<li><a href=\"https://gitee.com/AprilBlank/April.WebApi\" target=\"_blank\" rel=\"noopener\">gitee</a></li>\n<li><a href=\"https://github.com/AprilBlank/April.WebApi\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"博客目录\"><a href=\"#博客目录\" class=\"headerlink\" title=\"博客目录\"></a>博客目录</h3><ul>\n<li><a href=\"/2019/07/02/net-core-tools-and-environment/\">net core Webapi基础工程搭建（一）——开发工具及环境</a></li>\n<li><a href=\"/2019/07/02/net-core-createprogram/\">net core Webapi基础工程搭建（二）——创建工程</a></li>\n<li><a href=\"/2019/07/02/net-core-swagger/\">net core Webapi基础工程搭建（三）——在线接口文档Swagger</a></li>\n<li><a href=\"/2019/07/04/net-core-log4net/\">net core Webapi基础工程搭建（四）——日志功能log4net</a></li>\n<li><a href=\"/2019/07/10/net-core-cache/\">net core Webapi基础工程搭建（五）——缓存机制</a></li>\n<li><a href=\"/2019/07/18/net-core-sqlsugar-1/\">net core Webapi基础工程搭建（六）——数据库操作_Part 1</a></li>\n<li><a href=\"/2019/07/19/net-core-sqlsugar-2/\">net core Webapi基础工程搭建（六）——数据库操作_Part 2</a></li>\n<li><a href=\"/2019/07/30/net-core-aop-1/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a></li>\n<li><a href=\"/2019/08/01/net-core-aop-2/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 2</a></li>\n</ul>\n<h3 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h3><p>代码对应教程信息，不定期上传，如有需要，可直接联系我。</p>\n<ul>\n<li><a href=\"https://gitee.com/AprilBlank/April.WebApi\" target=\"_blank\" rel=\"noopener\">gitee</a></li>\n<li><a href=\"https://github.com/AprilBlank/April.WebApi\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n"},{"title":"Linux配置部署_新手向（五）——Docker的安装与使用","date":"2019-10-28T07:03:33.000Z","_content":"\n### 前言\n最近还是在考虑Linux下net core的部署问题，还是发现了很多麻烦的问题，这里还是继续把需要使用的东西部署介绍下吧。\n\n### Docker\n其实对于Docker我也是一星半点儿，了解的不够深入，大致感觉docker是比虚拟机更快速，更方便，体量小，部署快的\"虚拟机\"，这样的感觉是因为docker自成环境，互不干扰，单独部署的特点，我们可以把mysql，redis，nginx之类的都可以单独部署在docker下，也可以说有了docker，就可以为所欲为了，当然我主要介绍docker，不做那些单独部署其他的吧。\n\n### 安装\n我常规习惯切换到root来做安装程序操作。\n1. 更新yum包\n\n```bash\n$ sudo yum update\n```\n\n2. 执行docker安装脚本\n\n```bash\n$ yum install -y docker\n```\n3. 启动Docker进程\n\n```bash\n$ sudo systemctl start docker\n```\n\n4. 设置Docker开机自启\n\n```bash\n$ sudo systemctl enable docker\n```\n\n5. 验证Docker是否安装成功\n\n```bash\n$ sudo docker run hello-world\n$ docker ps -a\n```\n\n### 常用命令\n\n**Docker版本信息**\n```\ndocker version\n```\n\n**Docker系统信息**\n```\ndocker info\n```\n\n**拉取镜像**\n```\ndocker pull image_name //默认是最新版本，可以自己写版本号:version\n```\n\n**查看已有镜像**\n```\ndocker images\n```\n\n**删除镜像**\n```\ndocker rmi image_name\n```\n\n**删除<none>镜像**\n```\ndocker rmi $(docker images | grep \"<none>\" | awk '{print $3}') \n```\n\n**删除所有镜像**\n```\ndocker rmi `docker images -q`\n```\n\n**按条件删除镜像**\n```\ndocker rmi --force `docker images | grep keyname | awk '{print $3}}'` //keyname为关键词\n```\n\n**运行容器**\n```\ndocker run image_name -d -p port:port\n```\n\n**启动、停止、重启容器**\n```\ndocker start -i ID\ndocker stop -i ID\ndocker restart -i ID\n```\n\n**查看正在运行的容器**\n```\ndocker ps\n```\n\n**查看所有容器**\n```\ndocker ps -a\n```\n\n**杀死容器进程**\n```\ndocker kill -s KILL ID\n```\n\n**保存镜像**\n```\ndocker save -o filename.tar image_name:version\n```\n\n**加载镜像**\n```\ndocker load -i filename.tar\n```\n\n**导出容器**\n```\ndocker export -o filename.tar ID\n```\n\n**导入容器**\n```\ncat ./filepath/filename.tar | sudo docker import - image_name:version\n```\n\n**暂停容器的所有进程**\n```\ndocker pause\n```\n\n**恢复容器的所有进程**\n```\ndocker unpause\n```\n\n**获取容器的日志**\n```\ndocker logs -f --tail 10 ID //获取最新10条日志记录\n```\n\n### 小结\n介绍完这篇，就继续鼓捣net core在docker中的部署了，中间遇到的卡顿真是各种，但是既然想往前走，就必然会有荆棘，如果不能披荆斩麻，那就只有止步不前，学如逆水行舟，且行且珍惜。\n","source":"_posts/vmare-docker.md","raw":"---\ntitle: Linux配置部署_新手向（五）——Docker的安装与使用\ndate: 2019-10-28 15:03:33\ntags: [vmware,新手向]\ncategories: AprilBlank\n---\n\n### 前言\n最近还是在考虑Linux下net core的部署问题，还是发现了很多麻烦的问题，这里还是继续把需要使用的东西部署介绍下吧。\n\n### Docker\n其实对于Docker我也是一星半点儿，了解的不够深入，大致感觉docker是比虚拟机更快速，更方便，体量小，部署快的\"虚拟机\"，这样的感觉是因为docker自成环境，互不干扰，单独部署的特点，我们可以把mysql，redis，nginx之类的都可以单独部署在docker下，也可以说有了docker，就可以为所欲为了，当然我主要介绍docker，不做那些单独部署其他的吧。\n\n### 安装\n我常规习惯切换到root来做安装程序操作。\n1. 更新yum包\n\n```bash\n$ sudo yum update\n```\n\n2. 执行docker安装脚本\n\n```bash\n$ yum install -y docker\n```\n3. 启动Docker进程\n\n```bash\n$ sudo systemctl start docker\n```\n\n4. 设置Docker开机自启\n\n```bash\n$ sudo systemctl enable docker\n```\n\n5. 验证Docker是否安装成功\n\n```bash\n$ sudo docker run hello-world\n$ docker ps -a\n```\n\n### 常用命令\n\n**Docker版本信息**\n```\ndocker version\n```\n\n**Docker系统信息**\n```\ndocker info\n```\n\n**拉取镜像**\n```\ndocker pull image_name //默认是最新版本，可以自己写版本号:version\n```\n\n**查看已有镜像**\n```\ndocker images\n```\n\n**删除镜像**\n```\ndocker rmi image_name\n```\n\n**删除<none>镜像**\n```\ndocker rmi $(docker images | grep \"<none>\" | awk '{print $3}') \n```\n\n**删除所有镜像**\n```\ndocker rmi `docker images -q`\n```\n\n**按条件删除镜像**\n```\ndocker rmi --force `docker images | grep keyname | awk '{print $3}}'` //keyname为关键词\n```\n\n**运行容器**\n```\ndocker run image_name -d -p port:port\n```\n\n**启动、停止、重启容器**\n```\ndocker start -i ID\ndocker stop -i ID\ndocker restart -i ID\n```\n\n**查看正在运行的容器**\n```\ndocker ps\n```\n\n**查看所有容器**\n```\ndocker ps -a\n```\n\n**杀死容器进程**\n```\ndocker kill -s KILL ID\n```\n\n**保存镜像**\n```\ndocker save -o filename.tar image_name:version\n```\n\n**加载镜像**\n```\ndocker load -i filename.tar\n```\n\n**导出容器**\n```\ndocker export -o filename.tar ID\n```\n\n**导入容器**\n```\ncat ./filepath/filename.tar | sudo docker import - image_name:version\n```\n\n**暂停容器的所有进程**\n```\ndocker pause\n```\n\n**恢复容器的所有进程**\n```\ndocker unpause\n```\n\n**获取容器的日志**\n```\ndocker logs -f --tail 10 ID //获取最新10条日志记录\n```\n\n### 小结\n介绍完这篇，就继续鼓捣net core在docker中的部署了，中间遇到的卡顿真是各种，但是既然想往前走，就必然会有荆棘，如果不能披荆斩麻，那就只有止步不前，学如逆水行舟，且行且珍惜。\n","slug":"vmare-docker","published":1,"updated":"2019-10-29T02:40:41.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2t001v9sv7th7em5nn","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近还是在考虑Linux下net core的部署问题，还是发现了很多麻烦的问题，这里还是继续把需要使用的东西部署介绍下吧。</p>\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p>其实对于Docker我也是一星半点儿，了解的不够深入，大致感觉docker是比虚拟机更快速，更方便，体量小，部署快的”虚拟机”，这样的感觉是因为docker自成环境，互不干扰，单独部署的特点，我们可以把mysql，redis，nginx之类的都可以单独部署在docker下，也可以说有了docker，就可以为所欲为了，当然我主要介绍docker，不做那些单独部署其他的吧。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>我常规习惯切换到root来做安装程序操作。</p>\n<ol>\n<li>更新yum包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行docker安装脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动Docker进程</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>设置Docker开机自启</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>验证Docker是否安装成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><strong>Docker版本信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<p><strong>Docker系统信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<p><strong>拉取镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull image_name //默认是最新版本，可以自己写版本号:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看已有镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi image_name</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除<none>镜像</none></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep &quot;&lt;none&gt;&quot; | awk &apos;&#123;print $3&#125;&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除所有镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure>\n\n<p><strong>按条件删除镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi --force `docker images | grep keyname | awk &apos;&#123;print $3&#125;&#125;&apos;` //keyname为关键词</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run image_name -d -p port:port</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动、停止、重启容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i ID</span><br><span class=\"line\">docker stop -i ID</span><br><span class=\"line\">docker restart -i ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看正在运行的容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p><strong>杀死容器进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill -s KILL ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o filename.tar image_name:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>加载镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i filename.tar</span><br></pre></td></tr></table></figure>\n\n<p><strong>导出容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export -o filename.tar ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./filepath/filename.tar | sudo docker import - image_name:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>暂停容器的所有进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pause</span><br></pre></td></tr></table></figure>\n\n<p><strong>恢复容器的所有进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker unpause</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取容器的日志</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f --tail 10 ID //获取最新10条日志记录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>介绍完这篇，就继续鼓捣net core在docker中的部署了，中间遇到的卡顿真是各种，但是既然想往前走，就必然会有荆棘，如果不能披荆斩麻，那就只有止步不前，学如逆水行舟，且行且珍惜。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近还是在考虑Linux下net core的部署问题，还是发现了很多麻烦的问题，这里还是继续把需要使用的东西部署介绍下吧。</p>\n<h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p>其实对于Docker我也是一星半点儿，了解的不够深入，大致感觉docker是比虚拟机更快速，更方便，体量小，部署快的”虚拟机”，这样的感觉是因为docker自成环境，互不干扰，单独部署的特点，我们可以把mysql，redis，nginx之类的都可以单独部署在docker下，也可以说有了docker，就可以为所欲为了，当然我主要介绍docker，不做那些单独部署其他的吧。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>我常规习惯切换到root来做安装程序操作。</p>\n<ol>\n<li>更新yum包</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>执行docker安装脚本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>启动Docker进程</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>设置Docker开机自启</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>验证Docker是否安装成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><strong>Docker版本信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<p><strong>Docker系统信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info</span><br></pre></td></tr></table></figure>\n\n<p><strong>拉取镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull image_name //默认是最新版本，可以自己写版本号:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看已有镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi image_name</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除<none>镜像</none></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep &quot;&lt;none&gt;&quot; | awk &apos;&#123;print $3&#125;&apos;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除所有镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi `docker images -q`</span><br></pre></td></tr></table></figure>\n\n<p><strong>按条件删除镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi --force `docker images | grep keyname | awk &apos;&#123;print $3&#125;&#125;&apos;` //keyname为关键词</span><br></pre></td></tr></table></figure>\n\n<p><strong>运行容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run image_name -d -p port:port</span><br></pre></td></tr></table></figure>\n\n<p><strong>启动、停止、重启容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start -i ID</span><br><span class=\"line\">docker stop -i ID</span><br><span class=\"line\">docker restart -i ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看正在运行的容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看所有容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p><strong>杀死容器进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill -s KILL ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o filename.tar image_name:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>加载镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load -i filename.tar</span><br></pre></td></tr></table></figure>\n\n<p><strong>导出容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export -o filename.tar ID</span><br></pre></td></tr></table></figure>\n\n<p><strong>导入容器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ./filepath/filename.tar | sudo docker import - image_name:version</span><br></pre></td></tr></table></figure>\n\n<p><strong>暂停容器的所有进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pause</span><br></pre></td></tr></table></figure>\n\n<p><strong>恢复容器的所有进程</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker unpause</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取容器的日志</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f --tail 10 ID //获取最新10条日志记录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>介绍完这篇，就继续鼓捣net core在docker中的部署了，中间遇到的卡顿真是各种，但是既然想往前走，就必然会有荆棘，如果不能披荆斩麻，那就只有止步不前，学如逆水行舟，且行且珍惜。</p>\n"},{"title":"在vue中使用laravel-permission的@can标签","date":"2019-08-02T02:24:00.000Z","_content":"\n#### 1. 在需要权限校验的 model 中新增方法\n```php\npublic function getAllPermissionsAttribute() {\n\t$permissions = $this->getAllPermissions();\n  $permission_names = [];\n\n  collect($permissions)->map(function ($permission) use (&$permission_names) {\n      $permission_names[] = $permission->name;\n  });\n\n  return $permission_names;\n}\n```\n\n#### 2. 在 app.blade 中存储当前用户的所有权限\n```html\n<script>\n    @auth\n        window.Permissions = @json(Auth::user()->allPermissions);\n    @else\n        window.Permissions = [];\n    @endauth\n</script>\n```\n#### 3. 新建 vue component\n```vue\n<script>\n    export default {\n        methods: {\n            $can(permissionName) {\n                return Permissions.indexOf(permissionName) !== -1;\n            }\n        }\n    };\n</script>\n```\n\n#### 4.  在 app.js 注册 vue 组件\n```\nimport auth from './components/AuthComponent';\\\nVue.mixin(auth);\n```\n\n#### 5. 在vue中使用\n```\n <a v-if=\"$can('admin.admins.delete')\" class=\"text-danger\" @click=\"dataDelete(admin)\">\n ```\n","source":"_posts/use-laravel-permission-can-tag-in-vue.md","raw":"---\ntitle: 在vue中使用laravel-permission的@can标签\ndate: 2019-08-02 10:24:00\ntags: [vue, laravel]\ncategories: 南瓜\n---\n\n#### 1. 在需要权限校验的 model 中新增方法\n```php\npublic function getAllPermissionsAttribute() {\n\t$permissions = $this->getAllPermissions();\n  $permission_names = [];\n\n  collect($permissions)->map(function ($permission) use (&$permission_names) {\n      $permission_names[] = $permission->name;\n  });\n\n  return $permission_names;\n}\n```\n\n#### 2. 在 app.blade 中存储当前用户的所有权限\n```html\n<script>\n    @auth\n        window.Permissions = @json(Auth::user()->allPermissions);\n    @else\n        window.Permissions = [];\n    @endauth\n</script>\n```\n#### 3. 新建 vue component\n```vue\n<script>\n    export default {\n        methods: {\n            $can(permissionName) {\n                return Permissions.indexOf(permissionName) !== -1;\n            }\n        }\n    };\n</script>\n```\n\n#### 4.  在 app.js 注册 vue 组件\n```\nimport auth from './components/AuthComponent';\\\nVue.mixin(auth);\n```\n\n#### 5. 在vue中使用\n```\n <a v-if=\"$can('admin.admins.delete')\" class=\"text-danger\" @click=\"dataDelete(admin)\">\n ```\n","slug":"use-laravel-permission-can-tag-in-vue","published":1,"updated":"2019-09-30T05:50:56.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2u001y9sv77vdj2oc2","content":"<h4 id=\"1-在需要权限校验的-model-中新增方法\"><a href=\"#1-在需要权限校验的-model-中新增方法\" class=\"headerlink\" title=\"1. 在需要权限校验的 model 中新增方法\"></a>1. 在需要权限校验的 model 中新增方法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllPermissionsAttribute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t$permissions = <span class=\"keyword\">$this</span>-&gt;getAllPermissions();</span><br><span class=\"line\">  $permission_names = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  collect($permissions)-&gt;map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($permission)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$permission_names)</span> </span>&#123;</span><br><span class=\"line\">      $permission_names[] = $permission-&gt;name;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $permission_names;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-在-app-blade-中存储当前用户的所有权限\"><a href=\"#2-在-app-blade-中存储当前用户的所有权限\" class=\"headerlink\" title=\"2. 在 app.blade 中存储当前用户的所有权限\"></a>2. 在 app.blade 中存储当前用户的所有权限</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    @auth</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.Permissions = @json(Auth::user()-&gt;allPermissions);</span></span><br><span class=\"line\"><span class=\"javascript\">    @<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.Permissions = [];</span></span><br><span class=\"line\">    @endauth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-新建-vue-component\"><a href=\"#3-新建-vue-component\" class=\"headerlink\" title=\"3. 新建 vue component\"></a>3. 新建 vue component</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            $can(permissionName) &#123;</span><br><span class=\"line\">                return Permissions.indexOf(permissionName) !== -1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在-app-js-注册-vue-组件\"><a href=\"#4-在-app-js-注册-vue-组件\" class=\"headerlink\" title=\"4.  在 app.js 注册 vue 组件\"></a>4.  在 app.js 注册 vue 组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import auth from &apos;./components/AuthComponent&apos;;\\</span><br><span class=\"line\">Vue.mixin(auth);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-在vue中使用\"><a href=\"#5-在vue中使用\" class=\"headerlink\" title=\"5. 在vue中使用\"></a>5. 在vue中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-if=&quot;$can(&apos;admin.admins.delete&apos;)&quot; class=&quot;text-danger&quot; @click=&quot;dataDelete(admin)&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h4 id=\"1-在需要权限校验的-model-中新增方法\"><a href=\"#1-在需要权限校验的-model-中新增方法\" class=\"headerlink\" title=\"1. 在需要权限校验的 model 中新增方法\"></a>1. 在需要权限校验的 model 中新增方法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAllPermissionsAttribute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t$permissions = <span class=\"keyword\">$this</span>-&gt;getAllPermissions();</span><br><span class=\"line\">  $permission_names = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  collect($permissions)-&gt;map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($permission)</span> <span class=\"title\">use</span> <span class=\"params\">(&amp;$permission_names)</span> </span>&#123;</span><br><span class=\"line\">      $permission_names[] = $permission-&gt;name;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $permission_names;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-在-app-blade-中存储当前用户的所有权限\"><a href=\"#2-在-app-blade-中存储当前用户的所有权限\" class=\"headerlink\" title=\"2. 在 app.blade 中存储当前用户的所有权限\"></a>2. 在 app.blade 中存储当前用户的所有权限</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    @auth</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.Permissions = @json(Auth::user()-&gt;allPermissions);</span></span><br><span class=\"line\"><span class=\"javascript\">    @<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.Permissions = [];</span></span><br><span class=\"line\">    @endauth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-新建-vue-component\"><a href=\"#3-新建-vue-component\" class=\"headerlink\" title=\"3. 新建 vue component\"></a>3. 新建 vue component</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            $can(permissionName) &#123;</span><br><span class=\"line\">                return Permissions.indexOf(permissionName) !== -1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在-app-js-注册-vue-组件\"><a href=\"#4-在-app-js-注册-vue-组件\" class=\"headerlink\" title=\"4.  在 app.js 注册 vue 组件\"></a>4.  在 app.js 注册 vue 组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import auth from &apos;./components/AuthComponent&apos;;\\</span><br><span class=\"line\">Vue.mixin(auth);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-在vue中使用\"><a href=\"#5-在vue中使用\" class=\"headerlink\" title=\"5. 在vue中使用\"></a>5. 在vue中使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-if=&quot;$can(&apos;admin.admins.delete&apos;)&quot; class=&quot;text-danger&quot; @click=&quot;dataDelete(admin)&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"tp5文件上传$_FILES有值request中file却为空","date":"2019-07-11T06:43:56.000Z","_content":"\n### 前言\n在整理一套php代码的时候，需要添加文件上传功能，虽说我对php不算怎么熟悉，但是我想着一个简单的文件上传其实就form表单的提交能有多麻烦，谁知道遇到的问题颇为诡异，不过好在最后那么简单的问题解决了。\n\n### 问题\n在页面做了一个上传控件，用到了layui的文件上传，之后在Controller接收文件时发现，获取的文件为空。\n\nhtml代码如下：\n```html\n               <div class=\"col-md-6 column\">\n                    <div class=\"form-group\">\n                        <label for=\"describe\">商品图片</label>\n                        <div class=\"input-group\">\n                            <input id='location' class=\"form-control\" readonly=\"\">\n                            <label class=\"input-group-btn\">\n                                <input type=\"button\" id=\"i-check\" value=\"浏览文件\" class=\"btn btn-primary\" > <!-- onclick=\"$('#i-file').click();\" -->\n                            </label>\n                       </div>\n                    </div>\n                </div>\n```\n\n```js\n\tvar img_index;\n    layui.use('upload', function(){\n        var $ = layui.jquery\n            ,upload = layui.upload;\n        upload.render({\n            elem: '#i-check'\n            ,url: '/Instorage/upload'\n            ,accept: 'images'\n            ,ext: 'jpg|png|jpeg'\n            ,acceptMime: 'image/*'\n            ,number: 1\n            ,method: 'post'\n            //,auto: false\n            ,before: function(obj) {\n                img_index = layer.msg(\"图片上传中...\",{\n                    time: 3000,\n                });\n                // obj.preview(function(index, file, result){\n                //     console.log(file);\n                //     $(\"#location\").val(file.name);\n                // });\n            }\n            ,done: function(res){\n              //console.log(res);\n              layer.close(img_index);\n              if(res.code==1){\n                $(\"#location\").val(decodeURIComponent(res.message));\n              }else{\n                layer.msg(\"上传失败,请重新上传\");\n              }\n            }\n          });\n    });\n```\n\n一个很简单的文件上传，没什么介绍的，但是，后端却是接收不到文件。\n\n```php\n\tpublic function upload(){\n        // 获取表单上传文件  \n        $file = request()->file('file'); \n        //var_dump($file);\n        //var_dump($_FILES);\n        if(empty($file)) {  \n            return AjaxReturn(0,'请选择上传文件');\n        }  \n        // 移动到框架应用根目录/public/uploads/ 目录下  \n        $info = $file->move('./public/static/uploads/img/'); \n        //如果不清楚文件上传的具体键名，可以直接打印$info来查看  \n        //获取文件（文件名），$info->getFilename()  ***********不同之处，笔记笔记哦\n        //获取文件（日期/文件名），$info->getSaveName()  **********不同之处，笔记笔记哦\n        $filename = $info->getSaveName();  //在测试的时候也可以直接打印文件名称来查看 \n        if($filename){              \n            return AjaxReturn(1,'/public/static/uploads/img/' . $filename);\n        }else{  \n            // 上传失败获取错误信息  \n            return AjaxReturn(0);\n        }  \n    }\n```\n\n### 排除尝试\n#### 前端\n- 查看文件是否上传\n- 查看js是否报错\n- 查看后端回调信息\n#### 后端\n- 查看request()->file()是否有文件 array(0)\n- 查看$_FILES是否有文件array(1)\n\n问了问搞php的人这种情况，但是也是看完之后觉得没啥问题，我想着可能是layui这个在别的框架下会有问题（当然最后不是），我替换成formData的提交方式，发现问题一样。\n\n又开始考虑是不是服务端配置的问题，比如文件格式的限制，大小的限制（后来确实是这个问题），不过因为不是搞php的，所以我也不太清楚，就只能通过能看到的东西来排除，突然看到了$_FILES的回调数据，发现了问题。\n![截图](tp5-fileupload-requestfile-is-null/1.png)\n按照我常规的想法，error如果是大于零，应该是有错误了，就去查这个error对应的问题所在。\n\n这里把对应的都列出来：\n\n|ErrorCode| 错误描述 |\n|--|--|\n| 0 | 成功 |\n| 1 | 上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值 |\n| 2 | 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值 |\n| 3 | 文件只有部分被上传 |\n| 4 | 没有文件被上传 |\n| 6 | 找不到临时文件夹 |\n| 7 | 文件写入失败 |\n\n### 小结\n问题不大，但是折腾了不少，做了这么多尝试最后是配置问题，这里也记录下，如果以后再遇到或者有相同问题的，可以参考，少折腾。\n\n","source":"_posts/tp5-fileupload-requestfile-is-null.md","raw":"---\ntitle: tp5文件上传$_FILES有值request中file却为空\ndate: 2019-07-11 14:43:56\ntags: [php,问题记录]\ncategories: AprilBlank\n---\n\n### 前言\n在整理一套php代码的时候，需要添加文件上传功能，虽说我对php不算怎么熟悉，但是我想着一个简单的文件上传其实就form表单的提交能有多麻烦，谁知道遇到的问题颇为诡异，不过好在最后那么简单的问题解决了。\n\n### 问题\n在页面做了一个上传控件，用到了layui的文件上传，之后在Controller接收文件时发现，获取的文件为空。\n\nhtml代码如下：\n```html\n               <div class=\"col-md-6 column\">\n                    <div class=\"form-group\">\n                        <label for=\"describe\">商品图片</label>\n                        <div class=\"input-group\">\n                            <input id='location' class=\"form-control\" readonly=\"\">\n                            <label class=\"input-group-btn\">\n                                <input type=\"button\" id=\"i-check\" value=\"浏览文件\" class=\"btn btn-primary\" > <!-- onclick=\"$('#i-file').click();\" -->\n                            </label>\n                       </div>\n                    </div>\n                </div>\n```\n\n```js\n\tvar img_index;\n    layui.use('upload', function(){\n        var $ = layui.jquery\n            ,upload = layui.upload;\n        upload.render({\n            elem: '#i-check'\n            ,url: '/Instorage/upload'\n            ,accept: 'images'\n            ,ext: 'jpg|png|jpeg'\n            ,acceptMime: 'image/*'\n            ,number: 1\n            ,method: 'post'\n            //,auto: false\n            ,before: function(obj) {\n                img_index = layer.msg(\"图片上传中...\",{\n                    time: 3000,\n                });\n                // obj.preview(function(index, file, result){\n                //     console.log(file);\n                //     $(\"#location\").val(file.name);\n                // });\n            }\n            ,done: function(res){\n              //console.log(res);\n              layer.close(img_index);\n              if(res.code==1){\n                $(\"#location\").val(decodeURIComponent(res.message));\n              }else{\n                layer.msg(\"上传失败,请重新上传\");\n              }\n            }\n          });\n    });\n```\n\n一个很简单的文件上传，没什么介绍的，但是，后端却是接收不到文件。\n\n```php\n\tpublic function upload(){\n        // 获取表单上传文件  \n        $file = request()->file('file'); \n        //var_dump($file);\n        //var_dump($_FILES);\n        if(empty($file)) {  \n            return AjaxReturn(0,'请选择上传文件');\n        }  \n        // 移动到框架应用根目录/public/uploads/ 目录下  \n        $info = $file->move('./public/static/uploads/img/'); \n        //如果不清楚文件上传的具体键名，可以直接打印$info来查看  \n        //获取文件（文件名），$info->getFilename()  ***********不同之处，笔记笔记哦\n        //获取文件（日期/文件名），$info->getSaveName()  **********不同之处，笔记笔记哦\n        $filename = $info->getSaveName();  //在测试的时候也可以直接打印文件名称来查看 \n        if($filename){              \n            return AjaxReturn(1,'/public/static/uploads/img/' . $filename);\n        }else{  \n            // 上传失败获取错误信息  \n            return AjaxReturn(0);\n        }  \n    }\n```\n\n### 排除尝试\n#### 前端\n- 查看文件是否上传\n- 查看js是否报错\n- 查看后端回调信息\n#### 后端\n- 查看request()->file()是否有文件 array(0)\n- 查看$_FILES是否有文件array(1)\n\n问了问搞php的人这种情况，但是也是看完之后觉得没啥问题，我想着可能是layui这个在别的框架下会有问题（当然最后不是），我替换成formData的提交方式，发现问题一样。\n\n又开始考虑是不是服务端配置的问题，比如文件格式的限制，大小的限制（后来确实是这个问题），不过因为不是搞php的，所以我也不太清楚，就只能通过能看到的东西来排除，突然看到了$_FILES的回调数据，发现了问题。\n![截图](tp5-fileupload-requestfile-is-null/1.png)\n按照我常规的想法，error如果是大于零，应该是有错误了，就去查这个error对应的问题所在。\n\n这里把对应的都列出来：\n\n|ErrorCode| 错误描述 |\n|--|--|\n| 0 | 成功 |\n| 1 | 上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值 |\n| 2 | 上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值 |\n| 3 | 文件只有部分被上传 |\n| 4 | 没有文件被上传 |\n| 6 | 找不到临时文件夹 |\n| 7 | 文件写入失败 |\n\n### 小结\n问题不大，但是折腾了不少，做了这么多尝试最后是配置问题，这里也记录下，如果以后再遇到或者有相同问题的，可以参考，少折腾。\n\n","slug":"tp5-fileupload-requestfile-is-null","published":1,"updated":"2019-09-30T05:45:34.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2w00229sv7y31462vg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在整理一套php代码的时候，需要添加文件上传功能，虽说我对php不算怎么熟悉，但是我想着一个简单的文件上传其实就form表单的提交能有多麻烦，谁知道遇到的问题颇为诡异，不过好在最后那么简单的问题解决了。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在页面做了一个上传控件，用到了layui的文件上传，之后在Controller接收文件时发现，获取的文件为空。</p>\n<p>html代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 column\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"describe\"</span>&gt;</span>商品图片<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">'location'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-btn\"</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-check\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"浏览文件\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> &gt;</span> <span class=\"comment\">&lt;!-- onclick=\"$('#i-file').click();\" --&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img_index;</span><br><span class=\"line\">   layui.use(<span class=\"string\">'upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> $ = layui.jquery</span><br><span class=\"line\">           ,upload = layui.upload;</span><br><span class=\"line\">       upload.render(&#123;</span><br><span class=\"line\">           elem: <span class=\"string\">'#i-check'</span></span><br><span class=\"line\">           ,<span class=\"attr\">url</span>: <span class=\"string\">'/Instorage/upload'</span></span><br><span class=\"line\">           ,<span class=\"attr\">accept</span>: <span class=\"string\">'images'</span></span><br><span class=\"line\">           ,<span class=\"attr\">ext</span>: <span class=\"string\">'jpg|png|jpeg'</span></span><br><span class=\"line\">           ,<span class=\"attr\">acceptMime</span>: <span class=\"string\">'image/*'</span></span><br><span class=\"line\">           ,<span class=\"attr\">number</span>: <span class=\"number\">1</span></span><br><span class=\"line\">           ,<span class=\"attr\">method</span>: <span class=\"string\">'post'</span></span><br><span class=\"line\">           <span class=\"comment\">//,auto: false</span></span><br><span class=\"line\">           ,<span class=\"attr\">before</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">               img_index = layer.msg(<span class=\"string\">\"图片上传中...\"</span>,&#123;</span><br><span class=\"line\">                   time: <span class=\"number\">3000</span>,</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">               <span class=\"comment\">// obj.preview(function(index, file, result)&#123;</span></span><br><span class=\"line\">               <span class=\"comment\">//     console.log(file);</span></span><br><span class=\"line\">               <span class=\"comment\">//     $(\"#location\").val(file.name);</span></span><br><span class=\"line\">               <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ,<span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"comment\">//console.log(res);</span></span><br><span class=\"line\">             layer.close(img_index);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(res.code==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               $(<span class=\"string\">\"#location\"</span>).val(<span class=\"built_in\">decodeURIComponent</span>(res.message));</span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               layer.msg(<span class=\"string\">\"上传失败,请重新上传\"</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>一个很简单的文件上传，没什么介绍的，但是，后端却是接收不到文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 获取表单上传文件  </span></span><br><span class=\"line\">       $file = request()-&gt;file(<span class=\"string\">'file'</span>); </span><br><span class=\"line\">       <span class=\"comment\">//var_dump($file);</span></span><br><span class=\"line\">       <span class=\"comment\">//var_dump($_FILES);</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($file)) &#123;  </span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">0</span>,<span class=\"string\">'请选择上传文件'</span>);</span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"comment\">// 移动到框架应用根目录/public/uploads/ 目录下  </span></span><br><span class=\"line\">       $info = $file-&gt;move(<span class=\"string\">'./public/static/uploads/img/'</span>); </span><br><span class=\"line\">       <span class=\"comment\">//如果不清楚文件上传的具体键名，可以直接打印$info来查看  </span></span><br><span class=\"line\">       <span class=\"comment\">//获取文件（文件名），$info-&gt;getFilename()  ***********不同之处，笔记笔记哦</span></span><br><span class=\"line\">       <span class=\"comment\">//获取文件（日期/文件名），$info-&gt;getSaveName()  **********不同之处，笔记笔记哦</span></span><br><span class=\"line\">       $filename = $info-&gt;getSaveName();  <span class=\"comment\">//在测试的时候也可以直接打印文件名称来查看 </span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>($filename)&#123;              </span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">1</span>,<span class=\"string\">'/public/static/uploads/img/'</span> . $filename);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">           <span class=\"comment\">// 上传失败获取错误信息  </span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">0</span>);</span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排除尝试\"><a href=\"#排除尝试\" class=\"headerlink\" title=\"排除尝试\"></a>排除尝试</h3><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ul>\n<li>查看文件是否上传</li>\n<li>查看js是否报错</li>\n<li>查看后端回调信息<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4></li>\n<li>查看request()-&gt;file()是否有文件 array(0)</li>\n<li>查看$_FILES是否有文件array(1)</li>\n</ul>\n<p>问了问搞php的人这种情况，但是也是看完之后觉得没啥问题，我想着可能是layui这个在别的框架下会有问题（当然最后不是），我替换成formData的提交方式，发现问题一样。</p>\n<p>又开始考虑是不是服务端配置的问题，比如文件格式的限制，大小的限制（后来确实是这个问题），不过因为不是搞php的，所以我也不太清楚，就只能通过能看到的东西来排除，突然看到了$_FILES的回调数据，发现了问题。<br><img src=\"/2019/07/11/tp5-fileupload-requestfile-is-null/1.png\" alt=\"截图\"><br>按照我常规的想法，error如果是大于零，应该是有错误了，就去查这个error对应的问题所在。</p>\n<p>这里把对应的都列出来：</p>\n<table>\n<thead>\n<tr>\n<th>ErrorCode</th>\n<th>错误描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>1</td>\n<td>上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值</td>\n</tr>\n<tr>\n<td>2</td>\n<td>上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值</td>\n</tr>\n<tr>\n<td>3</td>\n<td>文件只有部分被上传</td>\n</tr>\n<tr>\n<td>4</td>\n<td>没有文件被上传</td>\n</tr>\n<tr>\n<td>6</td>\n<td>找不到临时文件夹</td>\n</tr>\n<tr>\n<td>7</td>\n<td>文件写入失败</td>\n</tr>\n</tbody></table>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>问题不大，但是折腾了不少，做了这么多尝试最后是配置问题，这里也记录下，如果以后再遇到或者有相同问题的，可以参考，少折腾。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在整理一套php代码的时候，需要添加文件上传功能，虽说我对php不算怎么熟悉，但是我想着一个简单的文件上传其实就form表单的提交能有多麻烦，谁知道遇到的问题颇为诡异，不过好在最后那么简单的问题解决了。</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在页面做了一个上传控件，用到了layui的文件上传，之后在Controller接收文件时发现，获取的文件为空。</p>\n<p>html代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-6 column\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"describe\"</span>&gt;</span>商品图片<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">'location'</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"input-group-btn\"</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"i-check\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"浏览文件\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> &gt;</span> <span class=\"comment\">&lt;!-- onclick=\"$('#i-file').click();\" --&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img_index;</span><br><span class=\"line\">   layui.use(<span class=\"string\">'upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> $ = layui.jquery</span><br><span class=\"line\">           ,upload = layui.upload;</span><br><span class=\"line\">       upload.render(&#123;</span><br><span class=\"line\">           elem: <span class=\"string\">'#i-check'</span></span><br><span class=\"line\">           ,<span class=\"attr\">url</span>: <span class=\"string\">'/Instorage/upload'</span></span><br><span class=\"line\">           ,<span class=\"attr\">accept</span>: <span class=\"string\">'images'</span></span><br><span class=\"line\">           ,<span class=\"attr\">ext</span>: <span class=\"string\">'jpg|png|jpeg'</span></span><br><span class=\"line\">           ,<span class=\"attr\">acceptMime</span>: <span class=\"string\">'image/*'</span></span><br><span class=\"line\">           ,<span class=\"attr\">number</span>: <span class=\"number\">1</span></span><br><span class=\"line\">           ,<span class=\"attr\">method</span>: <span class=\"string\">'post'</span></span><br><span class=\"line\">           <span class=\"comment\">//,auto: false</span></span><br><span class=\"line\">           ,<span class=\"attr\">before</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">               img_index = layer.msg(<span class=\"string\">\"图片上传中...\"</span>,&#123;</span><br><span class=\"line\">                   time: <span class=\"number\">3000</span>,</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">               <span class=\"comment\">// obj.preview(function(index, file, result)&#123;</span></span><br><span class=\"line\">               <span class=\"comment\">//     console.log(file);</span></span><br><span class=\"line\">               <span class=\"comment\">//     $(\"#location\").val(file.name);</span></span><br><span class=\"line\">               <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           ,<span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"comment\">//console.log(res);</span></span><br><span class=\"line\">             layer.close(img_index);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(res.code==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               $(<span class=\"string\">\"#location\"</span>).val(<span class=\"built_in\">decodeURIComponent</span>(res.message));</span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               layer.msg(<span class=\"string\">\"上传失败,请重新上传\"</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>一个很简单的文件上传，没什么介绍的，但是，后端却是接收不到文件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 获取表单上传文件  </span></span><br><span class=\"line\">       $file = request()-&gt;file(<span class=\"string\">'file'</span>); </span><br><span class=\"line\">       <span class=\"comment\">//var_dump($file);</span></span><br><span class=\"line\">       <span class=\"comment\">//var_dump($_FILES);</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($file)) &#123;  </span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">0</span>,<span class=\"string\">'请选择上传文件'</span>);</span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">       <span class=\"comment\">// 移动到框架应用根目录/public/uploads/ 目录下  </span></span><br><span class=\"line\">       $info = $file-&gt;move(<span class=\"string\">'./public/static/uploads/img/'</span>); </span><br><span class=\"line\">       <span class=\"comment\">//如果不清楚文件上传的具体键名，可以直接打印$info来查看  </span></span><br><span class=\"line\">       <span class=\"comment\">//获取文件（文件名），$info-&gt;getFilename()  ***********不同之处，笔记笔记哦</span></span><br><span class=\"line\">       <span class=\"comment\">//获取文件（日期/文件名），$info-&gt;getSaveName()  **********不同之处，笔记笔记哦</span></span><br><span class=\"line\">       $filename = $info-&gt;getSaveName();  <span class=\"comment\">//在测试的时候也可以直接打印文件名称来查看 </span></span><br><span class=\"line\">       <span class=\"keyword\">if</span>($filename)&#123;              </span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">1</span>,<span class=\"string\">'/public/static/uploads/img/'</span> . $filename);</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">           <span class=\"comment\">// 上传失败获取错误信息  </span></span><br><span class=\"line\">           <span class=\"keyword\">return</span> AjaxReturn(<span class=\"number\">0</span>);</span><br><span class=\"line\">       &#125;  </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排除尝试\"><a href=\"#排除尝试\" class=\"headerlink\" title=\"排除尝试\"></a>排除尝试</h3><h4 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h4><ul>\n<li>查看文件是否上传</li>\n<li>查看js是否报错</li>\n<li>查看后端回调信息<h4 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h4></li>\n<li>查看request()-&gt;file()是否有文件 array(0)</li>\n<li>查看$_FILES是否有文件array(1)</li>\n</ul>\n<p>问了问搞php的人这种情况，但是也是看完之后觉得没啥问题，我想着可能是layui这个在别的框架下会有问题（当然最后不是），我替换成formData的提交方式，发现问题一样。</p>\n<p>又开始考虑是不是服务端配置的问题，比如文件格式的限制，大小的限制（后来确实是这个问题），不过因为不是搞php的，所以我也不太清楚，就只能通过能看到的东西来排除，突然看到了$_FILES的回调数据，发现了问题。<br><img src=\"/2019/07/11/tp5-fileupload-requestfile-is-null/1.png\" alt=\"截图\"><br>按照我常规的想法，error如果是大于零，应该是有错误了，就去查这个error对应的问题所在。</p>\n<p>这里把对应的都列出来：</p>\n<table>\n<thead>\n<tr>\n<th>ErrorCode</th>\n<th>错误描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>成功</td>\n</tr>\n<tr>\n<td>1</td>\n<td>上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值</td>\n</tr>\n<tr>\n<td>2</td>\n<td>上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值</td>\n</tr>\n<tr>\n<td>3</td>\n<td>文件只有部分被上传</td>\n</tr>\n<tr>\n<td>4</td>\n<td>没有文件被上传</td>\n</tr>\n<tr>\n<td>6</td>\n<td>找不到临时文件夹</td>\n</tr>\n<tr>\n<td>7</td>\n<td>文件写入失败</td>\n</tr>\n</tbody></table>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>问题不大，但是折腾了不少，做了这么多尝试最后是配置问题，这里也记录下，如果以后再遇到或者有相同问题的，可以参考，少折腾。</p>\n"},{"title":"Linux配置部署_新手向（四）——Redis安装与配置","date":"2019-09-12T09:40:48.000Z","_content":"### 前言\n配置完mysql之后，我们来紧接着安装redis，毕竟这些不用太多的思考，就是命令执行，配置文件，连接测试。\n\n### 安装\n首先，我们要看安装哪个版本，可以在[Redis官网](http://download.redis.io/releases/)看看我们安装哪个版本。\n\n> 在之前使用wget的时候，我一直以为下载都会放到默认文件夹，谁知道一看，原来是在哪执行就下载到哪，这里注意下\n\n```bash\n[root@april tmp]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz\n\n[root@april tmp]# tar -zxvf redis-5.0.5.tar.gz -C /usr/local/\n\n```\n\n解压完成之后我们看下是否有gcc依赖库，毕竟要用到make命令编译吧。\n```bash\n[root@april tmp]# gcc -v\nbash: gcc: command not found...\n[root@april tmp]# sudo yum install -y gcc\n```\n安装完依赖库后，我们来切换目录开始执行编译。\n```bash\n[root@april tmp]# cd /usr/local/redis-5.0.5/\n[root@april redis-5.0.5]# make MALLOC=libc \n[root@april redis-5.0.5]# cd src && make install\n```\n\n编译完成后，我们就开始来运行一下看看吧。\n```bash\n[root@april src]# ./redis-server \n```\n![测试](vmware-redis/1.png)\nOK，运行完成后，我们就开始来看看配置吧。\n\n```bash\n #将值改为yes\ndaemonize yes  \n\n# 注释掉它，以便让外网访问\n# bind 127.0.0.1\n \n# 关闭保护模式\nprotected-mode no\n\n# 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\npidfile /var/run/redis_6379.pid\n\n# 指定Redis监听端口，默认端口为6379\n# 如果指定0端口，表示Redis不监听TCP连接\nport 6379\n\n# 注意，这里只能指定一个目录，不能指定文件名\ndir /var/redis/6379\n```\n\n保存之后，我们来设置redis后台启动，开机启动，省的每次调整。\n\n```bash\n[root@april redis-5.0.5]# mkdir /etc/redis\n[root@april redis-5.0.5]# cp /usr/local/redis-5.0.5/redis.conf /etc/redis/6379.conf\n[root@april redis-5.0.5]# cp /usr/local/redis-5.0.5/utils/redis_init_script /etc/init.d/redisd\n# 切换到服务目录\n[root@april redis-5.0.5]# cd /etc/init.d/\n[root@april init.d]# chkconfig redisd on\n# 校验通过后我们就可以像操作服务一样了\n[root@april init.d]# service redisd start\n```\n\n完成后，记得我们开启下防火墙。\n```bash\n[root@april init.d]# firewall-cmd --permanent --add-port=6379/tcp\nsuccess\n[root@april init.d]# firewall-cmd --reload\n```\n\n### 测试\n![测试](vmware-redis/2.png)\n\n随便添加一个键值对试试。\n![测试](vmware-redis/3.png)\n\n### 小结\nRedis配置完成后，下来会先对基础工程进行redis的连接使用做示例，路漫漫，要鼓捣的东西还有很多。","source":"_posts/vmware-redis.md","raw":"---\ntitle: Linux配置部署_新手向（四）——Redis安装与配置\ndate: 2019-09-12 17:40:48\ntags: [vmware,新手向]\ncategories: AprilBlank\n---\n### 前言\n配置完mysql之后，我们来紧接着安装redis，毕竟这些不用太多的思考，就是命令执行，配置文件，连接测试。\n\n### 安装\n首先，我们要看安装哪个版本，可以在[Redis官网](http://download.redis.io/releases/)看看我们安装哪个版本。\n\n> 在之前使用wget的时候，我一直以为下载都会放到默认文件夹，谁知道一看，原来是在哪执行就下载到哪，这里注意下\n\n```bash\n[root@april tmp]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz\n\n[root@april tmp]# tar -zxvf redis-5.0.5.tar.gz -C /usr/local/\n\n```\n\n解压完成之后我们看下是否有gcc依赖库，毕竟要用到make命令编译吧。\n```bash\n[root@april tmp]# gcc -v\nbash: gcc: command not found...\n[root@april tmp]# sudo yum install -y gcc\n```\n安装完依赖库后，我们来切换目录开始执行编译。\n```bash\n[root@april tmp]# cd /usr/local/redis-5.0.5/\n[root@april redis-5.0.5]# make MALLOC=libc \n[root@april redis-5.0.5]# cd src && make install\n```\n\n编译完成后，我们就开始来运行一下看看吧。\n```bash\n[root@april src]# ./redis-server \n```\n![测试](vmware-redis/1.png)\nOK，运行完成后，我们就开始来看看配置吧。\n\n```bash\n #将值改为yes\ndaemonize yes  \n\n# 注释掉它，以便让外网访问\n# bind 127.0.0.1\n \n# 关闭保护模式\nprotected-mode no\n\n# 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定\npidfile /var/run/redis_6379.pid\n\n# 指定Redis监听端口，默认端口为6379\n# 如果指定0端口，表示Redis不监听TCP连接\nport 6379\n\n# 注意，这里只能指定一个目录，不能指定文件名\ndir /var/redis/6379\n```\n\n保存之后，我们来设置redis后台启动，开机启动，省的每次调整。\n\n```bash\n[root@april redis-5.0.5]# mkdir /etc/redis\n[root@april redis-5.0.5]# cp /usr/local/redis-5.0.5/redis.conf /etc/redis/6379.conf\n[root@april redis-5.0.5]# cp /usr/local/redis-5.0.5/utils/redis_init_script /etc/init.d/redisd\n# 切换到服务目录\n[root@april redis-5.0.5]# cd /etc/init.d/\n[root@april init.d]# chkconfig redisd on\n# 校验通过后我们就可以像操作服务一样了\n[root@april init.d]# service redisd start\n```\n\n完成后，记得我们开启下防火墙。\n```bash\n[root@april init.d]# firewall-cmd --permanent --add-port=6379/tcp\nsuccess\n[root@april init.d]# firewall-cmd --reload\n```\n\n### 测试\n![测试](vmware-redis/2.png)\n\n随便添加一个键值对试试。\n![测试](vmware-redis/3.png)\n\n### 小结\nRedis配置完成后，下来会先对基础工程进行redis的连接使用做示例，路漫漫，要鼓捣的东西还有很多。","slug":"vmware-redis","published":1,"updated":"2019-09-30T05:47:52.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2x00259sv7wlxfvh6c","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>配置完mysql之后，我们来紧接着安装redis，毕竟这些不用太多的思考，就是命令执行，配置文件，连接测试。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先，我们要看安装哪个版本，可以在<a href=\"http://download.redis.io/releases/\" target=\"_blank\" rel=\"noopener\">Redis官网</a>看看我们安装哪个版本。</p>\n<blockquote>\n<p>在之前使用wget的时候，我一直以为下载都会放到默认文件夹，谁知道一看，原来是在哪执行就下载到哪，这里注意下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@april tmp]<span class=\"comment\"># tar -zxvf redis-5.0.5.tar.gz -C /usr/local/</span></span><br></pre></td></tr></table></figure>\n\n<p>解压完成之后我们看下是否有gcc依赖库，毕竟要用到make命令编译吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># gcc -v</span></span><br><span class=\"line\">bash: gcc: <span class=\"built_in\">command</span> not found...</span><br><span class=\"line\">[root@april tmp]<span class=\"comment\"># sudo yum install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完依赖库后，我们来切换目录开始执行编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># cd /usr/local/redis-5.0.5/</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># make MALLOC=libc </span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cd src &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n\n<p>编译完成后，我们就开始来运行一下看看吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april src]<span class=\"comment\"># ./redis-server</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/09/12/vmware-redis/1.png\" alt=\"测试\"><br>OK，运行完成后，我们就开始来看看配置吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#将值改为yes</span></span><br><span class=\"line\">daemonize yes  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注释掉它，以便让外网访问</span></span><br><span class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关闭保护模式</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定Redis监听端口，默认端口为6379</span></span><br><span class=\"line\"><span class=\"comment\"># 如果指定0端口，表示Redis不监听TCP连接</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意，这里只能指定一个目录，不能指定文件名</span></span><br><span class=\"line\">dir /var/redis/6379</span><br></pre></td></tr></table></figure>\n\n<p>保存之后，我们来设置redis后台启动，开机启动，省的每次调整。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># mkdir /etc/redis</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cp /usr/local/redis-5.0.5/redis.conf /etc/redis/6379.conf</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cp /usr/local/redis-5.0.5/utils/redis_init_script /etc/init.d/redisd</span></span><br><span class=\"line\"><span class=\"comment\"># 切换到服务目录</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cd /etc/init.d/</span></span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># chkconfig redisd on</span></span><br><span class=\"line\"><span class=\"comment\"># 校验通过后我们就可以像操作服务一样了</span></span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># service redisd start</span></span><br></pre></td></tr></table></figure>\n\n<p>完成后，记得我们开启下防火墙。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april init.d]<span class=\"comment\"># firewall-cmd --permanent --add-port=6379/tcp</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/2019/09/12/vmware-redis/2.png\" alt=\"测试\"></p>\n<p>随便添加一个键值对试试。<br><img src=\"/2019/09/12/vmware-redis/3.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Redis配置完成后，下来会先对基础工程进行redis的连接使用做示例，路漫漫，要鼓捣的东西还有很多。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>配置完mysql之后，我们来紧接着安装redis，毕竟这些不用太多的思考，就是命令执行，配置文件，连接测试。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先，我们要看安装哪个版本，可以在<a href=\"http://download.redis.io/releases/\" target=\"_blank\" rel=\"noopener\">Redis官网</a>看看我们安装哪个版本。</p>\n<blockquote>\n<p>在之前使用wget的时候，我一直以为下载都会放到默认文件夹，谁知道一看，原来是在哪执行就下载到哪，这里注意下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@april tmp]<span class=\"comment\"># tar -zxvf redis-5.0.5.tar.gz -C /usr/local/</span></span><br></pre></td></tr></table></figure>\n\n<p>解压完成之后我们看下是否有gcc依赖库，毕竟要用到make命令编译吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># gcc -v</span></span><br><span class=\"line\">bash: gcc: <span class=\"built_in\">command</span> not found...</span><br><span class=\"line\">[root@april tmp]<span class=\"comment\"># sudo yum install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>安装完依赖库后，我们来切换目录开始执行编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april tmp]<span class=\"comment\"># cd /usr/local/redis-5.0.5/</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># make MALLOC=libc </span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cd src &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n\n<p>编译完成后，我们就开始来运行一下看看吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april src]<span class=\"comment\"># ./redis-server</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/09/12/vmware-redis/1.png\" alt=\"测试\"><br>OK，运行完成后，我们就开始来看看配置吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">#将值改为yes</span></span><br><span class=\"line\">daemonize yes  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注释掉它，以便让外网访问</span></span><br><span class=\"line\"><span class=\"comment\"># bind 127.0.0.1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关闭保护模式</span></span><br><span class=\"line\">protected-mode no</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定Redis监听端口，默认端口为6379</span></span><br><span class=\"line\"><span class=\"comment\"># 如果指定0端口，表示Redis不监听TCP连接</span></span><br><span class=\"line\">port 6379</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意，这里只能指定一个目录，不能指定文件名</span></span><br><span class=\"line\">dir /var/redis/6379</span><br></pre></td></tr></table></figure>\n\n<p>保存之后，我们来设置redis后台启动，开机启动，省的每次调整。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># mkdir /etc/redis</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cp /usr/local/redis-5.0.5/redis.conf /etc/redis/6379.conf</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cp /usr/local/redis-5.0.5/utils/redis_init_script /etc/init.d/redisd</span></span><br><span class=\"line\"><span class=\"comment\"># 切换到服务目录</span></span><br><span class=\"line\">[root@april redis-5.0.5]<span class=\"comment\"># cd /etc/init.d/</span></span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># chkconfig redisd on</span></span><br><span class=\"line\"><span class=\"comment\"># 校验通过后我们就可以像操作服务一样了</span></span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># service redisd start</span></span><br></pre></td></tr></table></figure>\n\n<p>完成后，记得我们开启下防火墙。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april init.d]<span class=\"comment\"># firewall-cmd --permanent --add-port=6379/tcp</span></span><br><span class=\"line\">success</span><br><span class=\"line\">[root@april init.d]<span class=\"comment\"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><img src=\"/2019/09/12/vmware-redis/2.png\" alt=\"测试\"></p>\n<p>随便添加一个键值对试试。<br><img src=\"/2019/09/12/vmware-redis/3.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>Redis配置完成后，下来会先对基础工程进行redis的连接使用做示例，路漫漫，要鼓捣的东西还有很多。</p>\n"},{"title":"Linux配置部署_新手向（一）——CentOS系统安装","date":"2019-08-21T05:48:19.000Z","_content":"\n### 前言\n最近忙过一件人生大事之后，终于稍微有点时间鼓捣东西，之前net core相关的基础已经鼓捣的差不多了，既然net core跨平台，那就来体验一把Linux的世界吧（Windows还没玩完就鼓捣Linux，头疼）。\n\n### VMware\n毕竟Windows玩的多，没有Linux系统怎么办，只要装个VMware什么多系统都是很随意，并且随意鼓捣炸了都不影响，具体安装什么的不多说，常规的软件安装对于程序猿来说都是很随意的（需要的可以给我留言联系-_-|||），安装完之后，就是去找个镜像包了，这里我使用的CentOS 7（毕竟net core支持7以上）。\n\n### 开始安装\n\n- 创建虚拟机，如果不用虚拟机直接跳过这一大步看系统安装吧。\n![创建](vmware-use-centos/1.png)\n- 选择自定义\n![创建](vmware-use-centos/2.png)\n- 虚拟机兼容性\n![创建](vmware-use-centos/3.png)\n- 稍后安装操作系统\n![创建](vmware-use-centos/4.png)\n- 选择操作系统\n![创建](vmware-use-centos/5.png)\n- 选择虚拟机位置\n![创建](vmware-use-centos/6.png)\n- 虚拟机配置，这里根据自己电脑配置调整\n![创建](vmware-use-centos/7.png)\n- 虚拟机内存，还是根据你的电脑配置调整\n![创建](vmware-use-centos/8.png)\n- 选择网络连接方式\n![创建](vmware-use-centos/9.png)\n- 虚拟机向导，默认就行\n![创建](vmware-use-centos/10.png)\n- 磁盘类型，默认就行\n![创建](vmware-use-centos/11.png)\n- 选择磁盘，这里选择新建\n![在这里插入图片描述](vmware-use-centos/12.png)\n- 指定磁盘容量，我这里选择存储为单个文件\n![创建](vmware-use-centos/13.png)\n- 磁盘文件名，随意起吧\n![创建](vmware-use-centos/14.png)\n- 自定义硬件，这里可选，也可直接下一步\n![创建](vmware-use-centos/15.png)\n点击**自定义硬件**后，根据自身需要，用不到的硬件可以直接移除了，如果不需要，直接点击**完成**就全结束了。\n![创建](vmware-use-centos/16.png)\n- 最后一步，选择系统文件位置\n![创建](vmware-use-centos/17.png)\n![创建](vmware-use-centos/18.png)\n这里也可以捎带着给网络适配器调整下。\n![创建](vmware-use-centos/19.png)\n### 系统安装\nOK，上面的完工之后，我们开始运行虚拟机吧。\n\n下图这两个随意选哪一个，都是安装只是第二个多了一个检测而已，我这里选择的是第一个。\n\n![系统](vmware-use-centos/20.png)\n- 选择系统语言跟默认键盘，我这里直接下一步了，根据自身需要吧。\n![系统](vmware-use-centos/21.png)\n- 之后我们进入了一堆配置项的界面\n![系统](vmware-use-centos/22.png)\n- 首先来设置时间，没有北京那就只能用上海了。\n![系统](vmware-use-centos/23.png)\n- 再然后我们选择要安装的版本，默认是Mini精简版，这里我们改下，毕竟不想直接面对命令行，如果想要深入了解Linux的朋友可以直接Mini。\n![系统](vmware-use-centos/24.png)\n![系统](vmware-use-centos/25.png)\n- 之后文件存储这块儿根据自身需要设置吧，可以单独设置，也可以直接托管默认。\n![系统](vmware-use-centos/26.png)\n![系统](vmware-use-centos/27.png)\n- 然后我们来设置网络信息\n![系统](vmware-use-centos/28.png)\n![系统](vmware-use-centos/29.png)\n![系统](vmware-use-centos/30.png)\n设置完成之后，我们点击下一步，这里我们一个是设置root超管的密码，也可以创建普通用户，设置完之后就坐等系统安装。\n![系统](vmware-use-centos/31.png)\n![系统](vmware-use-centos/32.png)\n![系统](vmware-use-centos/33.png)\nOK，等了个三五分钟之后，安装完成，我们点击重启。\n![系统](vmware-use-centos/34.png)\n重启的速度还是挺快，完了之后我们就看到类似Windows的欢迎界面了，常规的一些简单配置，想改了改，不想改直接Next。\n![系统](vmware-use-centos/35.png)\n如果你看到这个界面，那说明你的Linux系统已经安装完毕了。\n![系统](vmware-use-centos/36.png)\n\n### 小结\nVMware我之前一直用来做系统安装测试，毕竟不想直接拿真机去试系统安装包的水（当然目前的安装包都是比较纯净的），这里也介绍完VMware添加虚拟机以及安装Linux系统，下来就开始鼓捣Nginx，MySql，Redis，Docker以及net core在Linux下的部署。","source":"_posts/vmware-use-centos.md","raw":"---\ntitle: Linux配置部署_新手向（一）——CentOS系统安装\ndate: 2019-08-21 13:48:19\ntags: [vmware,新手向]\ncategories: AprilBlank\n---\n\n### 前言\n最近忙过一件人生大事之后，终于稍微有点时间鼓捣东西，之前net core相关的基础已经鼓捣的差不多了，既然net core跨平台，那就来体验一把Linux的世界吧（Windows还没玩完就鼓捣Linux，头疼）。\n\n### VMware\n毕竟Windows玩的多，没有Linux系统怎么办，只要装个VMware什么多系统都是很随意，并且随意鼓捣炸了都不影响，具体安装什么的不多说，常规的软件安装对于程序猿来说都是很随意的（需要的可以给我留言联系-_-|||），安装完之后，就是去找个镜像包了，这里我使用的CentOS 7（毕竟net core支持7以上）。\n\n### 开始安装\n\n- 创建虚拟机，如果不用虚拟机直接跳过这一大步看系统安装吧。\n![创建](vmware-use-centos/1.png)\n- 选择自定义\n![创建](vmware-use-centos/2.png)\n- 虚拟机兼容性\n![创建](vmware-use-centos/3.png)\n- 稍后安装操作系统\n![创建](vmware-use-centos/4.png)\n- 选择操作系统\n![创建](vmware-use-centos/5.png)\n- 选择虚拟机位置\n![创建](vmware-use-centos/6.png)\n- 虚拟机配置，这里根据自己电脑配置调整\n![创建](vmware-use-centos/7.png)\n- 虚拟机内存，还是根据你的电脑配置调整\n![创建](vmware-use-centos/8.png)\n- 选择网络连接方式\n![创建](vmware-use-centos/9.png)\n- 虚拟机向导，默认就行\n![创建](vmware-use-centos/10.png)\n- 磁盘类型，默认就行\n![创建](vmware-use-centos/11.png)\n- 选择磁盘，这里选择新建\n![在这里插入图片描述](vmware-use-centos/12.png)\n- 指定磁盘容量，我这里选择存储为单个文件\n![创建](vmware-use-centos/13.png)\n- 磁盘文件名，随意起吧\n![创建](vmware-use-centos/14.png)\n- 自定义硬件，这里可选，也可直接下一步\n![创建](vmware-use-centos/15.png)\n点击**自定义硬件**后，根据自身需要，用不到的硬件可以直接移除了，如果不需要，直接点击**完成**就全结束了。\n![创建](vmware-use-centos/16.png)\n- 最后一步，选择系统文件位置\n![创建](vmware-use-centos/17.png)\n![创建](vmware-use-centos/18.png)\n这里也可以捎带着给网络适配器调整下。\n![创建](vmware-use-centos/19.png)\n### 系统安装\nOK，上面的完工之后，我们开始运行虚拟机吧。\n\n下图这两个随意选哪一个，都是安装只是第二个多了一个检测而已，我这里选择的是第一个。\n\n![系统](vmware-use-centos/20.png)\n- 选择系统语言跟默认键盘，我这里直接下一步了，根据自身需要吧。\n![系统](vmware-use-centos/21.png)\n- 之后我们进入了一堆配置项的界面\n![系统](vmware-use-centos/22.png)\n- 首先来设置时间，没有北京那就只能用上海了。\n![系统](vmware-use-centos/23.png)\n- 再然后我们选择要安装的版本，默认是Mini精简版，这里我们改下，毕竟不想直接面对命令行，如果想要深入了解Linux的朋友可以直接Mini。\n![系统](vmware-use-centos/24.png)\n![系统](vmware-use-centos/25.png)\n- 之后文件存储这块儿根据自身需要设置吧，可以单独设置，也可以直接托管默认。\n![系统](vmware-use-centos/26.png)\n![系统](vmware-use-centos/27.png)\n- 然后我们来设置网络信息\n![系统](vmware-use-centos/28.png)\n![系统](vmware-use-centos/29.png)\n![系统](vmware-use-centos/30.png)\n设置完成之后，我们点击下一步，这里我们一个是设置root超管的密码，也可以创建普通用户，设置完之后就坐等系统安装。\n![系统](vmware-use-centos/31.png)\n![系统](vmware-use-centos/32.png)\n![系统](vmware-use-centos/33.png)\nOK，等了个三五分钟之后，安装完成，我们点击重启。\n![系统](vmware-use-centos/34.png)\n重启的速度还是挺快，完了之后我们就看到类似Windows的欢迎界面了，常规的一些简单配置，想改了改，不想改直接Next。\n![系统](vmware-use-centos/35.png)\n如果你看到这个界面，那说明你的Linux系统已经安装完毕了。\n![系统](vmware-use-centos/36.png)\n\n### 小结\nVMware我之前一直用来做系统安装测试，毕竟不想直接拿真机去试系统安装包的水（当然目前的安装包都是比较纯净的），这里也介绍完VMware添加虚拟机以及安装Linux系统，下来就开始鼓捣Nginx，MySql，Redis，Docker以及net core在Linux下的部署。","slug":"vmware-use-centos","published":1,"updated":"2019-09-30T05:47:57.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m2y00299sv7tnxl5jj6","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近忙过一件人生大事之后，终于稍微有点时间鼓捣东西，之前net core相关的基础已经鼓捣的差不多了，既然net core跨平台，那就来体验一把Linux的世界吧（Windows还没玩完就鼓捣Linux，头疼）。</p>\n<h3 id=\"VMware\"><a href=\"#VMware\" class=\"headerlink\" title=\"VMware\"></a>VMware</h3><p>毕竟Windows玩的多，没有Linux系统怎么办，只要装个VMware什么多系统都是很随意，并且随意鼓捣炸了都不影响，具体安装什么的不多说，常规的软件安装对于程序猿来说都是很随意的（需要的可以给我留言联系-_-|||），安装完之后，就是去找个镜像包了，这里我使用的CentOS 7（毕竟net core支持7以上）。</p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ul>\n<li>创建虚拟机，如果不用虚拟机直接跳过这一大步看系统安装吧。<br><img src=\"/2019/08/21/vmware-use-centos/1.png\" alt=\"创建\"></li>\n<li>选择自定义<br><img src=\"/2019/08/21/vmware-use-centos/2.png\" alt=\"创建\"></li>\n<li>虚拟机兼容性<br><img src=\"/2019/08/21/vmware-use-centos/3.png\" alt=\"创建\"></li>\n<li>稍后安装操作系统<br><img src=\"/2019/08/21/vmware-use-centos/4.png\" alt=\"创建\"></li>\n<li>选择操作系统<br><img src=\"/2019/08/21/vmware-use-centos/5.png\" alt=\"创建\"></li>\n<li>选择虚拟机位置<br><img src=\"/2019/08/21/vmware-use-centos/6.png\" alt=\"创建\"></li>\n<li>虚拟机配置，这里根据自己电脑配置调整<br><img src=\"/2019/08/21/vmware-use-centos/7.png\" alt=\"创建\"></li>\n<li>虚拟机内存，还是根据你的电脑配置调整<br><img src=\"/2019/08/21/vmware-use-centos/8.png\" alt=\"创建\"></li>\n<li>选择网络连接方式<br><img src=\"/2019/08/21/vmware-use-centos/9.png\" alt=\"创建\"></li>\n<li>虚拟机向导，默认就行<br><img src=\"/2019/08/21/vmware-use-centos/10.png\" alt=\"创建\"></li>\n<li>磁盘类型，默认就行<br><img src=\"/2019/08/21/vmware-use-centos/11.png\" alt=\"创建\"></li>\n<li>选择磁盘，这里选择新建<br><img src=\"/2019/08/21/vmware-use-centos/12.png\" alt=\"在这里插入图片描述\"></li>\n<li>指定磁盘容量，我这里选择存储为单个文件<br><img src=\"/2019/08/21/vmware-use-centos/13.png\" alt=\"创建\"></li>\n<li>磁盘文件名，随意起吧<br><img src=\"/2019/08/21/vmware-use-centos/14.png\" alt=\"创建\"></li>\n<li>自定义硬件，这里可选，也可直接下一步<br><img src=\"/2019/08/21/vmware-use-centos/15.png\" alt=\"创建\"><br>点击<strong>自定义硬件</strong>后，根据自身需要，用不到的硬件可以直接移除了，如果不需要，直接点击<strong>完成</strong>就全结束了。<br><img src=\"/2019/08/21/vmware-use-centos/16.png\" alt=\"创建\"></li>\n<li>最后一步，选择系统文件位置<br><img src=\"/2019/08/21/vmware-use-centos/17.png\" alt=\"创建\"><br><img src=\"/2019/08/21/vmware-use-centos/18.png\" alt=\"创建\"><br>这里也可以捎带着给网络适配器调整下。<br><img src=\"/2019/08/21/vmware-use-centos/19.png\" alt=\"创建\"><h3 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h3>OK，上面的完工之后，我们开始运行虚拟机吧。</li>\n</ul>\n<p>下图这两个随意选哪一个，都是安装只是第二个多了一个检测而已，我这里选择的是第一个。</p>\n<p><img src=\"/2019/08/21/vmware-use-centos/20.png\" alt=\"系统\"></p>\n<ul>\n<li>选择系统语言跟默认键盘，我这里直接下一步了，根据自身需要吧。<br><img src=\"/2019/08/21/vmware-use-centos/21.png\" alt=\"系统\"></li>\n<li>之后我们进入了一堆配置项的界面<br><img src=\"/2019/08/21/vmware-use-centos/22.png\" alt=\"系统\"></li>\n<li>首先来设置时间，没有北京那就只能用上海了。<br><img src=\"/2019/08/21/vmware-use-centos/23.png\" alt=\"系统\"></li>\n<li>再然后我们选择要安装的版本，默认是Mini精简版，这里我们改下，毕竟不想直接面对命令行，如果想要深入了解Linux的朋友可以直接Mini。<br><img src=\"/2019/08/21/vmware-use-centos/24.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/25.png\" alt=\"系统\"></li>\n<li>之后文件存储这块儿根据自身需要设置吧，可以单独设置，也可以直接托管默认。<br><img src=\"/2019/08/21/vmware-use-centos/26.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/27.png\" alt=\"系统\"></li>\n<li>然后我们来设置网络信息<br><img src=\"/2019/08/21/vmware-use-centos/28.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/29.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/30.png\" alt=\"系统\"><br>设置完成之后，我们点击下一步，这里我们一个是设置root超管的密码，也可以创建普通用户，设置完之后就坐等系统安装。<br><img src=\"/2019/08/21/vmware-use-centos/31.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/32.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/33.png\" alt=\"系统\"><br>OK，等了个三五分钟之后，安装完成，我们点击重启。<br><img src=\"/2019/08/21/vmware-use-centos/34.png\" alt=\"系统\"><br>重启的速度还是挺快，完了之后我们就看到类似Windows的欢迎界面了，常规的一些简单配置，想改了改，不想改直接Next。<br><img src=\"/2019/08/21/vmware-use-centos/35.png\" alt=\"系统\"><br>如果你看到这个界面，那说明你的Linux系统已经安装完毕了。<br><img src=\"/2019/08/21/vmware-use-centos/36.png\" alt=\"系统\"></li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>VMware我之前一直用来做系统安装测试，毕竟不想直接拿真机去试系统安装包的水（当然目前的安装包都是比较纯净的），这里也介绍完VMware添加虚拟机以及安装Linux系统，下来就开始鼓捣Nginx，MySql，Redis，Docker以及net core在Linux下的部署。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近忙过一件人生大事之后，终于稍微有点时间鼓捣东西，之前net core相关的基础已经鼓捣的差不多了，既然net core跨平台，那就来体验一把Linux的世界吧（Windows还没玩完就鼓捣Linux，头疼）。</p>\n<h3 id=\"VMware\"><a href=\"#VMware\" class=\"headerlink\" title=\"VMware\"></a>VMware</h3><p>毕竟Windows玩的多，没有Linux系统怎么办，只要装个VMware什么多系统都是很随意，并且随意鼓捣炸了都不影响，具体安装什么的不多说，常规的软件安装对于程序猿来说都是很随意的（需要的可以给我留言联系-_-|||），安装完之后，就是去找个镜像包了，这里我使用的CentOS 7（毕竟net core支持7以上）。</p>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><ul>\n<li>创建虚拟机，如果不用虚拟机直接跳过这一大步看系统安装吧。<br><img src=\"/2019/08/21/vmware-use-centos/1.png\" alt=\"创建\"></li>\n<li>选择自定义<br><img src=\"/2019/08/21/vmware-use-centos/2.png\" alt=\"创建\"></li>\n<li>虚拟机兼容性<br><img src=\"/2019/08/21/vmware-use-centos/3.png\" alt=\"创建\"></li>\n<li>稍后安装操作系统<br><img src=\"/2019/08/21/vmware-use-centos/4.png\" alt=\"创建\"></li>\n<li>选择操作系统<br><img src=\"/2019/08/21/vmware-use-centos/5.png\" alt=\"创建\"></li>\n<li>选择虚拟机位置<br><img src=\"/2019/08/21/vmware-use-centos/6.png\" alt=\"创建\"></li>\n<li>虚拟机配置，这里根据自己电脑配置调整<br><img src=\"/2019/08/21/vmware-use-centos/7.png\" alt=\"创建\"></li>\n<li>虚拟机内存，还是根据你的电脑配置调整<br><img src=\"/2019/08/21/vmware-use-centos/8.png\" alt=\"创建\"></li>\n<li>选择网络连接方式<br><img src=\"/2019/08/21/vmware-use-centos/9.png\" alt=\"创建\"></li>\n<li>虚拟机向导，默认就行<br><img src=\"/2019/08/21/vmware-use-centos/10.png\" alt=\"创建\"></li>\n<li>磁盘类型，默认就行<br><img src=\"/2019/08/21/vmware-use-centos/11.png\" alt=\"创建\"></li>\n<li>选择磁盘，这里选择新建<br><img src=\"/2019/08/21/vmware-use-centos/12.png\" alt=\"在这里插入图片描述\"></li>\n<li>指定磁盘容量，我这里选择存储为单个文件<br><img src=\"/2019/08/21/vmware-use-centos/13.png\" alt=\"创建\"></li>\n<li>磁盘文件名，随意起吧<br><img src=\"/2019/08/21/vmware-use-centos/14.png\" alt=\"创建\"></li>\n<li>自定义硬件，这里可选，也可直接下一步<br><img src=\"/2019/08/21/vmware-use-centos/15.png\" alt=\"创建\"><br>点击<strong>自定义硬件</strong>后，根据自身需要，用不到的硬件可以直接移除了，如果不需要，直接点击<strong>完成</strong>就全结束了。<br><img src=\"/2019/08/21/vmware-use-centos/16.png\" alt=\"创建\"></li>\n<li>最后一步，选择系统文件位置<br><img src=\"/2019/08/21/vmware-use-centos/17.png\" alt=\"创建\"><br><img src=\"/2019/08/21/vmware-use-centos/18.png\" alt=\"创建\"><br>这里也可以捎带着给网络适配器调整下。<br><img src=\"/2019/08/21/vmware-use-centos/19.png\" alt=\"创建\"><h3 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h3>OK，上面的完工之后，我们开始运行虚拟机吧。</li>\n</ul>\n<p>下图这两个随意选哪一个，都是安装只是第二个多了一个检测而已，我这里选择的是第一个。</p>\n<p><img src=\"/2019/08/21/vmware-use-centos/20.png\" alt=\"系统\"></p>\n<ul>\n<li>选择系统语言跟默认键盘，我这里直接下一步了，根据自身需要吧。<br><img src=\"/2019/08/21/vmware-use-centos/21.png\" alt=\"系统\"></li>\n<li>之后我们进入了一堆配置项的界面<br><img src=\"/2019/08/21/vmware-use-centos/22.png\" alt=\"系统\"></li>\n<li>首先来设置时间，没有北京那就只能用上海了。<br><img src=\"/2019/08/21/vmware-use-centos/23.png\" alt=\"系统\"></li>\n<li>再然后我们选择要安装的版本，默认是Mini精简版，这里我们改下，毕竟不想直接面对命令行，如果想要深入了解Linux的朋友可以直接Mini。<br><img src=\"/2019/08/21/vmware-use-centos/24.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/25.png\" alt=\"系统\"></li>\n<li>之后文件存储这块儿根据自身需要设置吧，可以单独设置，也可以直接托管默认。<br><img src=\"/2019/08/21/vmware-use-centos/26.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/27.png\" alt=\"系统\"></li>\n<li>然后我们来设置网络信息<br><img src=\"/2019/08/21/vmware-use-centos/28.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/29.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/30.png\" alt=\"系统\"><br>设置完成之后，我们点击下一步，这里我们一个是设置root超管的密码，也可以创建普通用户，设置完之后就坐等系统安装。<br><img src=\"/2019/08/21/vmware-use-centos/31.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/32.png\" alt=\"系统\"><br><img src=\"/2019/08/21/vmware-use-centos/33.png\" alt=\"系统\"><br>OK，等了个三五分钟之后，安装完成，我们点击重启。<br><img src=\"/2019/08/21/vmware-use-centos/34.png\" alt=\"系统\"><br>重启的速度还是挺快，完了之后我们就看到类似Windows的欢迎界面了，常规的一些简单配置，想改了改，不想改直接Next。<br><img src=\"/2019/08/21/vmware-use-centos/35.png\" alt=\"系统\"><br>如果你看到这个界面，那说明你的Linux系统已经安装完毕了。<br><img src=\"/2019/08/21/vmware-use-centos/36.png\" alt=\"系统\"></li>\n</ul>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>VMware我之前一直用来做系统安装测试，毕竟不想直接拿真机去试系统安装包的水（当然目前的安装包都是比较纯净的），这里也介绍完VMware添加虚拟机以及安装Linux系统，下来就开始鼓捣Nginx，MySql，Redis，Docker以及net core在Linux下的部署。</p>\n"},{"title":"Linux配置部署_新手向（二）——Nginx安装与配置","date":"2019-08-21T07:08:18.000Z","_content":"\n### 前言\n上一篇整完Linux系统的安装，紧接着就开始来安装些常用的东西吧，首先**Nginx**。\n\n### Nginx\n- 简介\nNginx作为转发，负载均衡，凭着其高性能的特效在web这一块儿是一个神器，只要体量稍微大点儿的工程都必不可少使用Nginx来做负载均衡。\n- 安装使用\n我们有两种安装方式，一种是通过yum指令来安装，一种是通过源码包下载make编译安装。\n\n| 方式 | 好处 |\n|--|--|\n| yum | 简单快捷，一键安装 |\n| 源码 | 服务性能好 |\n\n##### 1. yum安装（推荐）\n通过yum指令安装nginx，安装目录是在 **/etc/nginx**\n```bash\n$ sudo yum update  \t\t\t\t\t#这条指令执行与否都可以，目的主要为了更新yum包为最新\n$ sudo yum -y install nginx \t\t#安装nginx\n$ sudo yum remove nginx \t\t\t#卸载nginx\n```\n\n如果出现以下问题，请执行添加源命令。\n![问题](vmware-nginx/1.png)\n解决方法：\n```bash\n$ sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n\n安装完成后，可以通过以下命令操作nginx：\n```bash\n$ sudo systemctl enable nginx \t\t\t# 设置开机启动 \n$ sudo service nginx start \t\t\t\t# 启动nginx服务\n$ sudo service nginx stop \t\t\t\t# 停止nginx服务\n$ sudo service nginx restart \t\t\t# 重启nginx服务\n$ sudo service nginx reload \t\t\t# 重新加载配置，一般是在修改过nginx配置文件时使用。\n```\n\n##### 2. 源码安装\n为何不推荐源码安装呢，因为我自己试过一次感觉太麻烦，并且使用起来也是比较麻烦。\n首先，我们需要安装依赖项：\n**1. gcc**\n```bash\n$ sudo yum -y install gcc gcc-c++ # nginx编译时依赖gcc环境\n```\n**2. pcre**\n```bash\n$ sudo yum -y install pcre pcre-devel # 让nginx支持重写功能\n```\n**3. zlib**\n```bash\n$ sudo yum -y install zlib zlib-devel # nginx使用zlib对http包内容进行gzip压缩\n```\n**4. openssl**\n```bash\n$ sudo yum -y install openssl openssl-devel # 安全套接字层密码库，用于通信加密，可以理解为使用https\n```\n我们从[Nginx下载地址](https://nginx.org/en/download.html)下载需要的版本压缩包，放置自己常规使用的地址，我这里放到 **/usr/local/**。\n```bash\n$ cd /usr/local/ #切换到目标目录\n$ sudo tar -zxvf  nginx-x.xx.x.tar.gz # 解压缩，这里的x.xx.x是你的版本号\n$ cd nginx-x.xx.x\t# 切换到目标文件夹\n$ ./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module\n```\n上述步骤完成config配置，如果后缀哪个执行出错，可查看错误信息根据对应错误引入依赖库，我之前遇到过缺少c，c++，openssl等相关类库的报错（因为我直接执行配置了）。\n错误排除后，我们执行编译及安装\n```\n$ make && make install\n```\n安装完毕后，我们开始使用命令来执行，这个比yum安装后的命令雪薇长了那么一丢丢。\n```bash\n$ /usr/local/nginx/sbin/nginx # 启动\n$ /usr/local/nginx/sbin/nginx -s reload # 重新加载\n$ /usr/local/nginx/sbin/nginx -s stop # 停止\n```\n\n需要查看nginx进程的话，通过以下命令：\n```bash\n$ ps -ef | grep nginx # 查看服务进程\n```\n\n启动nginx后，我们访问下网页，如果看到这个效果说明已经安装完毕。\n![效果](vmware-nginx/2.png)\n### 配置（后续补充）\n### 小结\nnginx的安装完成后，下一步安装其他web需要用到的东西。","source":"_posts/vmware-nginx.md","raw":"---\ntitle: Linux配置部署_新手向（二）——Nginx安装与配置\ndate: 2019-08-21 15:08:18\ntags: [vmware,新手向]\ncategories: AprilBlank\n---\n\n### 前言\n上一篇整完Linux系统的安装，紧接着就开始来安装些常用的东西吧，首先**Nginx**。\n\n### Nginx\n- 简介\nNginx作为转发，负载均衡，凭着其高性能的特效在web这一块儿是一个神器，只要体量稍微大点儿的工程都必不可少使用Nginx来做负载均衡。\n- 安装使用\n我们有两种安装方式，一种是通过yum指令来安装，一种是通过源码包下载make编译安装。\n\n| 方式 | 好处 |\n|--|--|\n| yum | 简单快捷，一键安装 |\n| 源码 | 服务性能好 |\n\n##### 1. yum安装（推荐）\n通过yum指令安装nginx，安装目录是在 **/etc/nginx**\n```bash\n$ sudo yum update  \t\t\t\t\t#这条指令执行与否都可以，目的主要为了更新yum包为最新\n$ sudo yum -y install nginx \t\t#安装nginx\n$ sudo yum remove nginx \t\t\t#卸载nginx\n```\n\n如果出现以下问题，请执行添加源命令。\n![问题](vmware-nginx/1.png)\n解决方法：\n```bash\n$ sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n\n安装完成后，可以通过以下命令操作nginx：\n```bash\n$ sudo systemctl enable nginx \t\t\t# 设置开机启动 \n$ sudo service nginx start \t\t\t\t# 启动nginx服务\n$ sudo service nginx stop \t\t\t\t# 停止nginx服务\n$ sudo service nginx restart \t\t\t# 重启nginx服务\n$ sudo service nginx reload \t\t\t# 重新加载配置，一般是在修改过nginx配置文件时使用。\n```\n\n##### 2. 源码安装\n为何不推荐源码安装呢，因为我自己试过一次感觉太麻烦，并且使用起来也是比较麻烦。\n首先，我们需要安装依赖项：\n**1. gcc**\n```bash\n$ sudo yum -y install gcc gcc-c++ # nginx编译时依赖gcc环境\n```\n**2. pcre**\n```bash\n$ sudo yum -y install pcre pcre-devel # 让nginx支持重写功能\n```\n**3. zlib**\n```bash\n$ sudo yum -y install zlib zlib-devel # nginx使用zlib对http包内容进行gzip压缩\n```\n**4. openssl**\n```bash\n$ sudo yum -y install openssl openssl-devel # 安全套接字层密码库，用于通信加密，可以理解为使用https\n```\n我们从[Nginx下载地址](https://nginx.org/en/download.html)下载需要的版本压缩包，放置自己常规使用的地址，我这里放到 **/usr/local/**。\n```bash\n$ cd /usr/local/ #切换到目标目录\n$ sudo tar -zxvf  nginx-x.xx.x.tar.gz # 解压缩，这里的x.xx.x是你的版本号\n$ cd nginx-x.xx.x\t# 切换到目标文件夹\n$ ./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module\n```\n上述步骤完成config配置，如果后缀哪个执行出错，可查看错误信息根据对应错误引入依赖库，我之前遇到过缺少c，c++，openssl等相关类库的报错（因为我直接执行配置了）。\n错误排除后，我们执行编译及安装\n```\n$ make && make install\n```\n安装完毕后，我们开始使用命令来执行，这个比yum安装后的命令雪薇长了那么一丢丢。\n```bash\n$ /usr/local/nginx/sbin/nginx # 启动\n$ /usr/local/nginx/sbin/nginx -s reload # 重新加载\n$ /usr/local/nginx/sbin/nginx -s stop # 停止\n```\n\n需要查看nginx进程的话，通过以下命令：\n```bash\n$ ps -ef | grep nginx # 查看服务进程\n```\n\n启动nginx后，我们访问下网页，如果看到这个效果说明已经安装完毕。\n![效果](vmware-nginx/2.png)\n### 配置（后续补充）\n### 小结\nnginx的安装完成后，下一步安装其他web需要用到的东西。","slug":"vmware-nginx","published":1,"updated":"2019-09-30T05:47:49.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m30002c9sv70dphy82o","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上一篇整完Linux系统的安装，紧接着就开始来安装些常用的东西吧，首先<strong>Nginx</strong>。</p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><ul>\n<li>简介<br>Nginx作为转发，负载均衡，凭着其高性能的特效在web这一块儿是一个神器，只要体量稍微大点儿的工程都必不可少使用Nginx来做负载均衡。</li>\n<li>安装使用<br>我们有两种安装方式，一种是通过yum指令来安装，一种是通过源码包下载make编译安装。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>好处</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>yum</td>\n<td>简单快捷，一键安装</td>\n</tr>\n<tr>\n<td>源码</td>\n<td>服务性能好</td>\n</tr>\n</tbody></table>\n<h5 id=\"1-yum安装（推荐）\"><a href=\"#1-yum安装（推荐）\" class=\"headerlink\" title=\"1. yum安装（推荐）\"></a>1. yum安装（推荐）</h5><p>通过yum指令安装nginx，安装目录是在 <strong>/etc/nginx</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update  \t\t\t\t\t<span class=\"comment\">#这条指令执行与否都可以，目的主要为了更新yum包为最新</span></span><br><span class=\"line\">$ sudo yum -y install nginx \t\t<span class=\"comment\">#安装nginx</span></span><br><span class=\"line\">$ sudo yum remove nginx \t\t\t<span class=\"comment\">#卸载nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>如果出现以下问题，请执行添加源命令。<br><img src=\"/2019/08/21/vmware-nginx/1.png\" alt=\"问题\"><br>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以通过以下命令操作nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> nginx \t\t\t<span class=\"comment\"># 设置开机启动 </span></span><br><span class=\"line\">$ sudo service nginx start \t\t\t\t<span class=\"comment\"># 启动nginx服务</span></span><br><span class=\"line\">$ sudo service nginx stop \t\t\t\t<span class=\"comment\"># 停止nginx服务</span></span><br><span class=\"line\">$ sudo service nginx restart \t\t\t<span class=\"comment\"># 重启nginx服务</span></span><br><span class=\"line\">$ sudo service nginx reload \t\t\t<span class=\"comment\"># 重新加载配置，一般是在修改过nginx配置文件时使用。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-源码安装\"><a href=\"#2-源码安装\" class=\"headerlink\" title=\"2. 源码安装\"></a>2. 源码安装</h5><p>为何不推荐源码安装呢，因为我自己试过一次感觉太麻烦，并且使用起来也是比较麻烦。<br>首先，我们需要安装依赖项：<br><strong>1. gcc</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install gcc gcc-c++ <span class=\"comment\"># nginx编译时依赖gcc环境</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2. pcre</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install pcre pcre-devel <span class=\"comment\"># 让nginx支持重写功能</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. zlib</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install zlib zlib-devel <span class=\"comment\"># nginx使用zlib对http包内容进行gzip压缩</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4. openssl</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install openssl openssl-devel <span class=\"comment\"># 安全套接字层密码库，用于通信加密，可以理解为使用https</span></span><br></pre></td></tr></table></figure>\n\n<p>我们从<a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx下载地址</a>下载需要的版本压缩包，放置自己常规使用的地址，我这里放到 <strong>/usr/local/</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ <span class=\"comment\">#切换到目标目录</span></span><br><span class=\"line\">$ sudo tar -zxvf  nginx-x.xx.x.tar.gz <span class=\"comment\"># 解压缩，这里的x.xx.x是你的版本号</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-x.xx.x\t<span class=\"comment\"># 切换到目标文件夹</span></span><br><span class=\"line\">$ ./configure --user=nobody --group=nobody --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<p>上述步骤完成config配置，如果后缀哪个执行出错，可查看错误信息根据对应错误引入依赖库，我之前遇到过缺少c，c++，openssl等相关类库的报错（因为我直接执行配置了）。<br>错误排除后，我们执行编译及安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕后，我们开始使用命令来执行，这个比yum安装后的命令雪薇长了那么一丢丢。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx <span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload <span class=\"comment\"># 重新加载</span></span><br><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s stop <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n\n<p>需要查看nginx进程的话，通过以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef | grep nginx <span class=\"comment\"># 查看服务进程</span></span><br></pre></td></tr></table></figure>\n\n<p>启动nginx后，我们访问下网页，如果看到这个效果说明已经安装完毕。<br><img src=\"/2019/08/21/vmware-nginx/2.png\" alt=\"效果\"></p>\n<h3 id=\"配置（后续补充）\"><a href=\"#配置（后续补充）\" class=\"headerlink\" title=\"配置（后续补充）\"></a>配置（后续补充）</h3><h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>nginx的安装完成后，下一步安装其他web需要用到的东西。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上一篇整完Linux系统的安装，紧接着就开始来安装些常用的东西吧，首先<strong>Nginx</strong>。</p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><ul>\n<li>简介<br>Nginx作为转发，负载均衡，凭着其高性能的特效在web这一块儿是一个神器，只要体量稍微大点儿的工程都必不可少使用Nginx来做负载均衡。</li>\n<li>安装使用<br>我们有两种安装方式，一种是通过yum指令来安装，一种是通过源码包下载make编译安装。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>好处</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>yum</td>\n<td>简单快捷，一键安装</td>\n</tr>\n<tr>\n<td>源码</td>\n<td>服务性能好</td>\n</tr>\n</tbody></table>\n<h5 id=\"1-yum安装（推荐）\"><a href=\"#1-yum安装（推荐）\" class=\"headerlink\" title=\"1. yum安装（推荐）\"></a>1. yum安装（推荐）</h5><p>通过yum指令安装nginx，安装目录是在 <strong>/etc/nginx</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum update  \t\t\t\t\t<span class=\"comment\">#这条指令执行与否都可以，目的主要为了更新yum包为最新</span></span><br><span class=\"line\">$ sudo yum -y install nginx \t\t<span class=\"comment\">#安装nginx</span></span><br><span class=\"line\">$ sudo yum remove nginx \t\t\t<span class=\"comment\">#卸载nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>如果出现以下问题，请执行添加源命令。<br><img src=\"/2019/08/21/vmware-nginx/1.png\" alt=\"问题\"><br>解决方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以通过以下命令操作nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> nginx \t\t\t<span class=\"comment\"># 设置开机启动 </span></span><br><span class=\"line\">$ sudo service nginx start \t\t\t\t<span class=\"comment\"># 启动nginx服务</span></span><br><span class=\"line\">$ sudo service nginx stop \t\t\t\t<span class=\"comment\"># 停止nginx服务</span></span><br><span class=\"line\">$ sudo service nginx restart \t\t\t<span class=\"comment\"># 重启nginx服务</span></span><br><span class=\"line\">$ sudo service nginx reload \t\t\t<span class=\"comment\"># 重新加载配置，一般是在修改过nginx配置文件时使用。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-源码安装\"><a href=\"#2-源码安装\" class=\"headerlink\" title=\"2. 源码安装\"></a>2. 源码安装</h5><p>为何不推荐源码安装呢，因为我自己试过一次感觉太麻烦，并且使用起来也是比较麻烦。<br>首先，我们需要安装依赖项：<br><strong>1. gcc</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install gcc gcc-c++ <span class=\"comment\"># nginx编译时依赖gcc环境</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2. pcre</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install pcre pcre-devel <span class=\"comment\"># 让nginx支持重写功能</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>3. zlib</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install zlib zlib-devel <span class=\"comment\"># nginx使用zlib对http包内容进行gzip压缩</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>4. openssl</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum -y install openssl openssl-devel <span class=\"comment\"># 安全套接字层密码库，用于通信加密，可以理解为使用https</span></span><br></pre></td></tr></table></figure>\n\n<p>我们从<a href=\"https://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">Nginx下载地址</a>下载需要的版本压缩包，放置自己常规使用的地址，我这里放到 <strong>/usr/local/</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ <span class=\"comment\">#切换到目标目录</span></span><br><span class=\"line\">$ sudo tar -zxvf  nginx-x.xx.x.tar.gz <span class=\"comment\"># 解压缩，这里的x.xx.x是你的版本号</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-x.xx.x\t<span class=\"comment\"># 切换到目标文件夹</span></span><br><span class=\"line\">$ ./configure --user=nobody --group=nobody --prefix=/usr/<span class=\"built_in\">local</span>/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module</span><br></pre></td></tr></table></figure>\n\n<p>上述步骤完成config配置，如果后缀哪个执行出错，可查看错误信息根据对应错误引入依赖库，我之前遇到过缺少c，c++，openssl等相关类库的报错（因为我直接执行配置了）。<br>错误排除后，我们执行编译及安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完毕后，我们开始使用命令来执行，这个比yum安装后的命令雪薇长了那么一丢丢。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx <span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload <span class=\"comment\"># 重新加载</span></span><br><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s stop <span class=\"comment\"># 停止</span></span><br></pre></td></tr></table></figure>\n\n<p>需要查看nginx进程的话，通过以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef | grep nginx <span class=\"comment\"># 查看服务进程</span></span><br></pre></td></tr></table></figure>\n\n<p>启动nginx后，我们访问下网页，如果看到这个效果说明已经安装完毕。<br><img src=\"/2019/08/21/vmware-nginx/2.png\" alt=\"效果\"></p>\n<h3 id=\"配置（后续补充）\"><a href=\"#配置（后续补充）\" class=\"headerlink\" title=\"配置（后续补充）\"></a>配置（后续补充）</h3><h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>nginx的安装完成后，下一步安装其他web需要用到的东西。</p>\n"},{"title":"Linux配置部署_新手向（三）——MySql安装与配置","date":"2019-09-12T07:38:58.000Z","_content":"\n### 前言\n马上就要放假了，按捺不住激动的心情（其实是实在敲不下去代码），就继续鼓捣虚拟机来做些常规的安装与使用吧，毕竟闲着也是闲着，唉，opengl还是难啊。\n\n### 安装\n其实网上好多安装的方法，所以也不算是个教程什么的，这里我只是自己做个记录，毕竟走通一遍就行，配置的东西不需要过多去关注（除非遇到很棘手的问题）。\n```bash\n# 获取文件源\n[root@april /]# wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n\n[root@april /]# sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\n# 如果有提示安装，按y回车\n[root@april /]# yum install mysql-server\n\n# 安装成功后，启动mysql\n[root@april /]# systemctl start mysqld \n\n# 配置mysql信息\n[root@april /]# mysql_secure_installation \n```\n\n最后一步执行过后会给出提示\n```bash\n# 输入当前root账号密码，可以直接回车\nEnter current password for root (enter for none): \n# 是否修改root密码，当然选是了\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\n# 是否删除匿名账号\nRemove anonymous users? [Y/n] y\n# 是否允许通过root账号远程登录，这个我自己测试，无所谓\nDisallow root login remotely? [Y/n] n\n# 是否删除测试数据库\nRemove test database and access to it? [Y/n] y\n# 是否刷新权限\nReload privilege tables now? [Y/n] y\n\n```\n\n配置完之后我们来登录mysql，话说为啥不能刚开始的时候不要密码。\n```bash\n[root@april /]# mysql -u root -p\nEnter password: \n\n# 查看mysql编码\nmysql>show variables like '%character%'; \n```\n初始化的时候没啥意外的话，database与server的字符编码不是utf8，一个涉及到表数据格式可能会读取乱码，另一个是我们连接的时候可能会有问题，这个时候要调整下编码，在/usr/share下找**my-default.cnf**（具体路径可能不一样，只要找到mysql文件夹就行），找到后复制到**/etc/my.cnf**。\n\n```bash\n[root@april mysql]# cp /usr/share/mysql/my-default.cnf /etc/my.cnf\ncp: overwrite ‘/etc/my.cnf’? \n[root@april mysql]# cd /etc/\n[root@april etc]# vi my.cnf\n```\n\n在文件中添加下面两句。\n```bash\n[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server =  utf8\n```\n\n这里串一下linux文件编辑的命令（毕竟linux没玩过几次），i是开始insert编辑。\n\n| 命令 | 描述 |\n|--|--|\n| :w | 保存文件但不退出vi |\n| :w file | 将修改另外保存到file中，不退出vi |\n| :w! | 强制保存文件但不退出vi |\n| :wq | 保存文件并退出vi |\n| :wq! | 强制保存文件，并退出vi |\n| q: | 不保存文件，退出vi |\n| :q! | 不保存文件，强制退出vi |\n| :e! | 放弃所有修改，从上次保存文件开始再编辑 |\n\n```bash\n# 基本上所有的配置文件改了之后都需要重启服务\n[root@april etc]# systemctl restart mysql.service\n```\n\n这样再登录mysql查看character的话就应该是正常了，另外我们开启远程登录。\n![查看](vmware-mysql/1.png)\n\n```bash\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n开启之后，我们就可以先通过ip访问了，毕竟我们这个是虚拟机。\n\n\n### 防火墙\n如果连接不上，不要急，我们的防火墙还没处理，之前在笔记里记录了下防火墙的一些常用命令。\n\n```bash\n# 查看防火墙服务状态\n$ systemctl status firewalld\n\n# 开启、重启、关闭防火墙状态\n$ systemctl start firewalld \n\n$ systemctl restart firewalld\n\n$ systemctl stop firewalld\n\n# 查看防火墙规则\n$ firewall-cmd --list-all \n\n# 查询、开放、关闭端口\n$ firewall-cmd --query-port=80/tcp //查看80端口是否开放\n\n$ firewall-cmd --permanent --add-port=80/tcp //开放80端口\n\n$ firewall-cmd --permanent --remove-port=80/tcp //关闭80端口\n\n$ firewall-cmd --reload //重启防火墙\n```\n\n另外，还是一样，不管是修改了配置文件还是什么规则之类的东西，都需要重新启动服务。\n\n### 小结\nlinux接触的不多，这一系列算是小白入门的学习笔记，主要是为了net core在linux服务器的部署做测试，环境配置完了之后，就开始着手工程发布部署。","source":"_posts/vmware-mysql.md","raw":"---\ntitle: Linux配置部署_新手向（三）——MySql安装与配置\ndate: 2019-09-12 15:38:58\ntags: [vmware,新手向]\ncategories: AprilBlank\n---\n\n### 前言\n马上就要放假了，按捺不住激动的心情（其实是实在敲不下去代码），就继续鼓捣虚拟机来做些常规的安装与使用吧，毕竟闲着也是闲着，唉，opengl还是难啊。\n\n### 安装\n其实网上好多安装的方法，所以也不算是个教程什么的，这里我只是自己做个记录，毕竟走通一遍就行，配置的东西不需要过多去关注（除非遇到很棘手的问题）。\n```bash\n# 获取文件源\n[root@april /]# wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\n\n[root@april /]# sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm\n\n# 如果有提示安装，按y回车\n[root@april /]# yum install mysql-server\n\n# 安装成功后，启动mysql\n[root@april /]# systemctl start mysqld \n\n# 配置mysql信息\n[root@april /]# mysql_secure_installation \n```\n\n最后一步执行过后会给出提示\n```bash\n# 输入当前root账号密码，可以直接回车\nEnter current password for root (enter for none): \n# 是否修改root密码，当然选是了\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\n# 是否删除匿名账号\nRemove anonymous users? [Y/n] y\n# 是否允许通过root账号远程登录，这个我自己测试，无所谓\nDisallow root login remotely? [Y/n] n\n# 是否删除测试数据库\nRemove test database and access to it? [Y/n] y\n# 是否刷新权限\nReload privilege tables now? [Y/n] y\n\n```\n\n配置完之后我们来登录mysql，话说为啥不能刚开始的时候不要密码。\n```bash\n[root@april /]# mysql -u root -p\nEnter password: \n\n# 查看mysql编码\nmysql>show variables like '%character%'; \n```\n初始化的时候没啥意外的话，database与server的字符编码不是utf8，一个涉及到表数据格式可能会读取乱码，另一个是我们连接的时候可能会有问题，这个时候要调整下编码，在/usr/share下找**my-default.cnf**（具体路径可能不一样，只要找到mysql文件夹就行），找到后复制到**/etc/my.cnf**。\n\n```bash\n[root@april mysql]# cp /usr/share/mysql/my-default.cnf /etc/my.cnf\ncp: overwrite ‘/etc/my.cnf’? \n[root@april mysql]# cd /etc/\n[root@april etc]# vi my.cnf\n```\n\n在文件中添加下面两句。\n```bash\n[client]\ndefault-character-set = utf8\n[mysqld]\ncharacter_set_server =  utf8\n```\n\n这里串一下linux文件编辑的命令（毕竟linux没玩过几次），i是开始insert编辑。\n\n| 命令 | 描述 |\n|--|--|\n| :w | 保存文件但不退出vi |\n| :w file | 将修改另外保存到file中，不退出vi |\n| :w! | 强制保存文件但不退出vi |\n| :wq | 保存文件并退出vi |\n| :wq! | 强制保存文件，并退出vi |\n| q: | 不保存文件，退出vi |\n| :q! | 不保存文件，强制退出vi |\n| :e! | 放弃所有修改，从上次保存文件开始再编辑 |\n\n```bash\n# 基本上所有的配置文件改了之后都需要重启服务\n[root@april etc]# systemctl restart mysql.service\n```\n\n这样再登录mysql查看character的话就应该是正常了，另外我们开启远程登录。\n![查看](vmware-mysql/1.png)\n\n```bash\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n开启之后，我们就可以先通过ip访问了，毕竟我们这个是虚拟机。\n\n\n### 防火墙\n如果连接不上，不要急，我们的防火墙还没处理，之前在笔记里记录了下防火墙的一些常用命令。\n\n```bash\n# 查看防火墙服务状态\n$ systemctl status firewalld\n\n# 开启、重启、关闭防火墙状态\n$ systemctl start firewalld \n\n$ systemctl restart firewalld\n\n$ systemctl stop firewalld\n\n# 查看防火墙规则\n$ firewall-cmd --list-all \n\n# 查询、开放、关闭端口\n$ firewall-cmd --query-port=80/tcp //查看80端口是否开放\n\n$ firewall-cmd --permanent --add-port=80/tcp //开放80端口\n\n$ firewall-cmd --permanent --remove-port=80/tcp //关闭80端口\n\n$ firewall-cmd --reload //重启防火墙\n```\n\n另外，还是一样，不管是修改了配置文件还是什么规则之类的东西，都需要重新启动服务。\n\n### 小结\nlinux接触的不多，这一系列算是小白入门的学习笔记，主要是为了net core在linux服务器的部署做测试，环境配置完了之后，就开始着手工程发布部署。","slug":"vmware-mysql","published":1,"updated":"2019-09-30T05:47:45.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3d003i9sv7d5oz970h","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>马上就要放假了，按捺不住激动的心情（其实是实在敲不下去代码），就继续鼓捣虚拟机来做些常规的安装与使用吧，毕竟闲着也是闲着，唉，opengl还是难啊。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>其实网上好多安装的方法，所以也不算是个教程什么的，这里我只是自己做个记录，毕竟走通一遍就行，配置的东西不需要过多去关注（除非遇到很棘手的问题）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取文件源</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有提示安装，按y回车</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># yum install mysql-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装成功后，启动mysql</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># systemctl start mysqld </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mysql信息</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure>\n\n<p>最后一步执行过后会给出提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入当前root账号密码，可以直接回车</span></span><br><span class=\"line\">Enter current password <span class=\"keyword\">for</span> root (enter <span class=\"keyword\">for</span> none): </span><br><span class=\"line\"><span class=\"comment\"># 是否修改root密码，当然选是了</span></span><br><span class=\"line\">Set root password? [Y/n] y</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-enter new password: </span><br><span class=\"line\">Password updated successfully!</span><br><span class=\"line\"><span class=\"comment\"># 是否删除匿名账号</span></span><br><span class=\"line\">Remove anonymous users? [Y/n] y</span><br><span class=\"line\"><span class=\"comment\"># 是否允许通过root账号远程登录，这个我自己测试，无所谓</span></span><br><span class=\"line\">Disallow root login remotely? [Y/n] n</span><br><span class=\"line\"><span class=\"comment\"># 是否删除测试数据库</span></span><br><span class=\"line\">Remove <span class=\"built_in\">test</span> database and access to it? [Y/n] y</span><br><span class=\"line\"><span class=\"comment\"># 是否刷新权限</span></span><br><span class=\"line\">Reload privilege tables now? [Y/n] y</span><br></pre></td></tr></table></figure>\n\n<p>配置完之后我们来登录mysql，话说为啥不能刚开始的时候不要密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april /]<span class=\"comment\"># mysql -u root -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看mysql编码</span></span><br><span class=\"line\">mysql&gt;show variables like <span class=\"string\">'%character%'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>初始化的时候没啥意外的话，database与server的字符编码不是utf8，一个涉及到表数据格式可能会读取乱码，另一个是我们连接的时候可能会有问题，这个时候要调整下编码，在/usr/share下找<strong>my-default.cnf</strong>（具体路径可能不一样，只要找到mysql文件夹就行），找到后复制到<strong>/etc/my.cnf</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april mysql]<span class=\"comment\"># cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span></span><br><span class=\"line\">cp: overwrite ‘/etc/my.cnf’? </span><br><span class=\"line\">[root@april mysql]<span class=\"comment\"># cd /etc/</span></span><br><span class=\"line\">[root@april etc]<span class=\"comment\"># vi my.cnf</span></span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加下面两句。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server =  utf8</span><br></pre></td></tr></table></figure>\n\n<p>这里串一下linux文件编辑的命令（毕竟linux没玩过几次），i是开始insert编辑。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存文件但不退出vi</td>\n</tr>\n<tr>\n<td>:w file</td>\n<td>将修改另外保存到file中，不退出vi</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>强制保存文件但不退出vi</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>保存文件并退出vi</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>强制保存文件，并退出vi</td>\n</tr>\n<tr>\n<td>q:</td>\n<td>不保存文件，退出vi</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>不保存文件，强制退出vi</td>\n</tr>\n<tr>\n<td>:e!</td>\n<td>放弃所有修改，从上次保存文件开始再编辑</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基本上所有的配置文件改了之后都需要重启服务</span></span><br><span class=\"line\">[root@april etc]<span class=\"comment\"># systemctl restart mysql.service</span></span><br></pre></td></tr></table></figure>\n\n<p>这样再登录mysql查看character的话就应该是正常了，另外我们开启远程登录。<br><img src=\"/2019/09/12/vmware-mysql/1.png\" alt=\"查看\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'root'</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>开启之后，我们就可以先通过ip访问了，毕竟我们这个是虚拟机。</p>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>如果连接不上，不要急，我们的防火墙还没处理，之前在笔记里记录了下防火墙的一些常用命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看防火墙服务状态</span></span><br><span class=\"line\">$ systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启、重启、关闭防火墙状态</span></span><br><span class=\"line\">$ systemctl start firewalld </span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl restart firewalld</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙规则</span></span><br><span class=\"line\">$ firewall-cmd --list-all </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询、开放、关闭端口</span></span><br><span class=\"line\">$ firewall-cmd --query-port=80/tcp //查看80端口是否开放</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --permanent --add-port=80/tcp //开放80端口</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --permanent --remove-port=80/tcp //关闭80端口</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --reload //重启防火墙</span><br></pre></td></tr></table></figure>\n\n<p>另外，还是一样，不管是修改了配置文件还是什么规则之类的东西，都需要重新启动服务。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>linux接触的不多，这一系列算是小白入门的学习笔记，主要是为了net core在linux服务器的部署做测试，环境配置完了之后，就开始着手工程发布部署。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>马上就要放假了，按捺不住激动的心情（其实是实在敲不下去代码），就继续鼓捣虚拟机来做些常规的安装与使用吧，毕竟闲着也是闲着，唉，opengl还是难啊。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>其实网上好多安装的方法，所以也不算是个教程什么的，这里我只是自己做个记录，毕竟走通一遍就行，配置的东西不需要过多去关注（除非遇到很棘手的问题）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取文件源</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有提示安装，按y回车</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># yum install mysql-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装成功后，启动mysql</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># systemctl start mysqld </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mysql信息</span></span><br><span class=\"line\">[root@april /]<span class=\"comment\"># mysql_secure_installation</span></span><br></pre></td></tr></table></figure>\n\n<p>最后一步执行过后会给出提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入当前root账号密码，可以直接回车</span></span><br><span class=\"line\">Enter current password <span class=\"keyword\">for</span> root (enter <span class=\"keyword\">for</span> none): </span><br><span class=\"line\"><span class=\"comment\"># 是否修改root密码，当然选是了</span></span><br><span class=\"line\">Set root password? [Y/n] y</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Re-enter new password: </span><br><span class=\"line\">Password updated successfully!</span><br><span class=\"line\"><span class=\"comment\"># 是否删除匿名账号</span></span><br><span class=\"line\">Remove anonymous users? [Y/n] y</span><br><span class=\"line\"><span class=\"comment\"># 是否允许通过root账号远程登录，这个我自己测试，无所谓</span></span><br><span class=\"line\">Disallow root login remotely? [Y/n] n</span><br><span class=\"line\"><span class=\"comment\"># 是否删除测试数据库</span></span><br><span class=\"line\">Remove <span class=\"built_in\">test</span> database and access to it? [Y/n] y</span><br><span class=\"line\"><span class=\"comment\"># 是否刷新权限</span></span><br><span class=\"line\">Reload privilege tables now? [Y/n] y</span><br></pre></td></tr></table></figure>\n\n<p>配置完之后我们来登录mysql，话说为啥不能刚开始的时候不要密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april /]<span class=\"comment\"># mysql -u root -p</span></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看mysql编码</span></span><br><span class=\"line\">mysql&gt;show variables like <span class=\"string\">'%character%'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>初始化的时候没啥意外的话，database与server的字符编码不是utf8，一个涉及到表数据格式可能会读取乱码，另一个是我们连接的时候可能会有问题，这个时候要调整下编码，在/usr/share下找<strong>my-default.cnf</strong>（具体路径可能不一样，只要找到mysql文件夹就行），找到后复制到<strong>/etc/my.cnf</strong>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@april mysql]<span class=\"comment\"># cp /usr/share/mysql/my-default.cnf /etc/my.cnf</span></span><br><span class=\"line\">cp: overwrite ‘/etc/my.cnf’? </span><br><span class=\"line\">[root@april mysql]<span class=\"comment\"># cd /etc/</span></span><br><span class=\"line\">[root@april etc]<span class=\"comment\"># vi my.cnf</span></span><br></pre></td></tr></table></figure>\n\n<p>在文件中添加下面两句。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server =  utf8</span><br></pre></td></tr></table></figure>\n\n<p>这里串一下linux文件编辑的命令（毕竟linux没玩过几次），i是开始insert编辑。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存文件但不退出vi</td>\n</tr>\n<tr>\n<td>:w file</td>\n<td>将修改另外保存到file中，不退出vi</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>强制保存文件但不退出vi</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>保存文件并退出vi</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>强制保存文件，并退出vi</td>\n</tr>\n<tr>\n<td>q:</td>\n<td>不保存文件，退出vi</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>不保存文件，强制退出vi</td>\n</tr>\n<tr>\n<td>:e!</td>\n<td>放弃所有修改，从上次保存文件开始再编辑</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基本上所有的配置文件改了之后都需要重启服务</span></span><br><span class=\"line\">[root@april etc]<span class=\"comment\"># systemctl restart mysql.service</span></span><br></pre></td></tr></table></figure>\n\n<p>这样再登录mysql查看character的话就应该是正常了，另外我们开启远程登录。<br><img src=\"/2019/09/12/vmware-mysql/1.png\" alt=\"查看\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">'root'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'root'</span>;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>开启之后，我们就可以先通过ip访问了，毕竟我们这个是虚拟机。</p>\n<h3 id=\"防火墙\"><a href=\"#防火墙\" class=\"headerlink\" title=\"防火墙\"></a>防火墙</h3><p>如果连接不上，不要急，我们的防火墙还没处理，之前在笔记里记录了下防火墙的一些常用命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看防火墙服务状态</span></span><br><span class=\"line\">$ systemctl status firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启、重启、关闭防火墙状态</span></span><br><span class=\"line\">$ systemctl start firewalld </span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl restart firewalld</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙规则</span></span><br><span class=\"line\">$ firewall-cmd --list-all </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询、开放、关闭端口</span></span><br><span class=\"line\">$ firewall-cmd --query-port=80/tcp //查看80端口是否开放</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --permanent --add-port=80/tcp //开放80端口</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --permanent --remove-port=80/tcp //关闭80端口</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --reload //重启防火墙</span><br></pre></td></tr></table></figure>\n\n<p>另外，还是一样，不管是修改了配置文件还是什么规则之类的东西，都需要重新启动服务。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>linux接触的不多，这一系列算是小白入门的学习笔记，主要是为了net core在linux服务器的部署做测试，环境配置完了之后，就开始着手工程发布部署。</p>\n"},{"title":"net core WebApi——文件分片下载","date":"2019-08-27T08:11:43.000Z","_content":"\n### 前言\n上一篇[net core WebApi——文件分片上传与跨域请求处理](/2019/08/23/net-core-fileuploader-and-cors/)介绍完文件的上传操作，本来是打算紧接着写文件下载，中间让形形色色的事给耽误的，今天还是抽个空整理完文件这块儿，然后就可以鼓捣别的东西了。\n### 开始\n这里我们仍然使用基础工程，需要下载的朋友请移步[net core Webapi 总目录](/2019/07/19/net-core-webapi-main/)，代码都是与博客的进度基本同步的。\n上传的时候我们介绍过分片的思路，而下载也一样，只是客户端与服务端角色转换下就好了。\n**后端**\n1. 接收前端下载请求，校验请求信息，返回文件基本信息\n2. 根据前端请求文件片段进行下载流处理。\n\n**前端**\n\n1. 向后端发起下载请求，获取文件总片段数\n2. 根据片段数循环请求文件片段流进行下载（可单独请求某一片段文件数据）\n\n文件下载相对于上传来说稍微简洁点儿，如果不考虑服务器压力也可以一个**a**标签解决下载问题，分片的意义就在于每次与服务端的交互减少流量，有些时候我们推荐拿空间换时间，但对于大流量来说还是慢慢来比较好，单次访问量如果大再加上多并发怕是服务器会受不了，所以有了一片片分步来循环访问这个方法。\n\n也是直接来看代码吧，我们在**FileController**创建几个接口方法**RequestDownloadFile**，**FileDownload**。\n\n```csharp\n        /// <summary>\n        /// 请求下载文件\n        /// </summary>\n        /// <param name=\"fileInfo\">文件参数信息[name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"RequestDownload\")]\n        public MessageEntity RequestDownloadFile([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n\n        /// <summary>\n        /// 分段下载文件\n        /// </summary>\n        /// <param name=\"fileInfo\">请求参数信息[index,name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"Download\")]\n        public async Task<IActionResult> FileDownload([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n```\n\n**RequestDownloadFile**\n>这里说明下，与服务端的操作都要尽可能多的确认身份信息（当然后续会有说这块儿），文件的相关操作也一样需要并且还要严格点儿，我这里就是为了做示例演示所以只传文件信息即可。\n\n```csharp\n        public MessageEntity RequestDownloadFile([FromBody]Dictionary<string, object> fileInfo)\n        {\n            MessageEntity message = new MessageEntity();\n            string fileName = string.Empty;\n            string fileExt = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (fileInfo.ContainsKey(\"ext\"))\n            {\n                fileExt = fileInfo[\"ext\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件名不能为空\";\n                return message;\n            }\n            //获取对应目录下文件，如果有，获取文件开始准备分段下载\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            filePath = $\"{filePath}{fileExt}\";\n            FileStream fs = null;\n            try\n            {\n                if (!System.IO.File.Exists(filePath))\n                {\n                    //文件为空\n                    message.Code = -1;\n                    message.Msg = \"文件尚未处理完\";\n                    return message;\n                }\n                fs = new FileStream(filePath, FileMode.Open);\n                if (fs.Length <= 0)\n                {\n                    //文件为空\n                    message.Code = -1;\n                    message.Msg = \"文件尚未处理完\";\n                    return message;\n                }\n                int shardSize = 1 * 1024 * 1024;//一次1M\n                RequestFileUploadEntity request = new RequestFileUploadEntity();\n                request.fileext = fileExt;\n                request.size = fs.Length;\n                request.count = (int)(fs.Length / shardSize);\n                if ((fs.Length % shardSize) > 0)\n                {\n                    request.count += 1;\n                }\n                request.filedata = GetCryptoString(fs);\n\n                message.Data = request;\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Debug($\"读取文件信息失败：{filePath}，错误信息：{ex.Message}\");\n            }\n            finally\n            {\n                if (fs != null)\n                {\n                    fs.Close();\n                }\n            }\n\n            return message;\n        }\n```\n\n**FileDownload**\n```csharp\n        public async Task<IActionResult> FileDownload([FromBody]Dictionary<string, object> fileInfo)\n        {\n            //开始根据片段来下载\n            int index = 0;\n            if (fileInfo.ContainsKey(\"index\"))\n            {\n                int.TryParse(fileInfo[\"index\"].ToString(), out index);\n            }\n            else\n            {\n                return Ok(new { code = -1, msg = \"缺少参数\" });\n            }\n            string fileName = string.Empty;\n            string fileExt = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (fileInfo.ContainsKey(\"ext\"))\n            {\n                fileExt = fileInfo[\"ext\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                return Ok(new { code = -1, msg = \"文件名不能为空\" });\n            }\n            //获取对应目录下文件，如果有，获取文件开始准备分段下载\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            filePath = $\"{filePath}{fileExt}\";\n            if (!System.IO.File.Exists(filePath))\n            {\n                return Ok(new { code = -1, msg = \"文件尚未处理\" });\n            }\n            using (var fs = new FileStream(filePath, FileMode.Open))\n            {\n                if (fs.Length <= 0)\n                {\n                    return Ok(new { code = -1, msg = \"文件尚未处理\" });\n                }\n                int shardSize = 1 * 1024 * 1024;//一次1M\n                int count = (int)(fs.Length / shardSize);\n                if ((fs.Length % shardSize) > 0)\n                {\n                    count += 1;\n                }\n                if (index > count - 1)\n                {\n                    return Ok(new { code = -1, msg = \"无效的下标\" });\n                }\n                fs.Seek(index * shardSize, SeekOrigin.Begin);\n                if (index == count - 1)\n                {\n                    //最后一片 = 总长 - (每次片段大小 * 已下载片段个数)\n                    shardSize = (int)(fs.Length - (shardSize * index));\n                }\n                byte[] datas = new byte[shardSize];\n                await fs.ReadAsync(datas, 0, datas.Length);\n                //fs.Close();\n                return File(datas, \"application/x-gzip\");\n            }\n        }\n```\n\n看过上传的朋友都清楚上传是三步，**请求上传**=>**开始上传**=>**合并**，而下载只需要两步，因为合并与否其实不那么重要了，反正文件流都给客户端了，那边自己判断需要重新下载还是下载部分片段都是他们自己的事了（服务端只管卖，东西有问题自己解决，多理想的状态）。\n\n### 测试\n搞完之后重新生成，运行之后我们来测试下效果，测试之前不要忘了接口白名单（做过登录相关的验证操作的忽略这点）。\n![测试](net-core-filedownload/1.png)\n这里提示error是因为解析错误，实际请求下载测试是正常的，如果有异常问题可以与我联系。\n\n### 小结\n文件相关的上传下载以及常规信息的操作可以告一段落，至于下一步鼓捣点儿啥也还没想好，本来还在看着linux相关的操作做发布部署的铺垫，看最近总体的进度吧，总之，**学如逆水行舟，如果不想溺水，就握好你的浆**（当然有些人不用浆那就算了，告辞）。","source":"_posts/net-core-filedownload.md","raw":"---\ntitle: net core WebApi——文件分片下载\ndate: 2019-08-27 16:11:43\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n上一篇[net core WebApi——文件分片上传与跨域请求处理](/2019/08/23/net-core-fileuploader-and-cors/)介绍完文件的上传操作，本来是打算紧接着写文件下载，中间让形形色色的事给耽误的，今天还是抽个空整理完文件这块儿，然后就可以鼓捣别的东西了。\n### 开始\n这里我们仍然使用基础工程，需要下载的朋友请移步[net core Webapi 总目录](/2019/07/19/net-core-webapi-main/)，代码都是与博客的进度基本同步的。\n上传的时候我们介绍过分片的思路，而下载也一样，只是客户端与服务端角色转换下就好了。\n**后端**\n1. 接收前端下载请求，校验请求信息，返回文件基本信息\n2. 根据前端请求文件片段进行下载流处理。\n\n**前端**\n\n1. 向后端发起下载请求，获取文件总片段数\n2. 根据片段数循环请求文件片段流进行下载（可单独请求某一片段文件数据）\n\n文件下载相对于上传来说稍微简洁点儿，如果不考虑服务器压力也可以一个**a**标签解决下载问题，分片的意义就在于每次与服务端的交互减少流量，有些时候我们推荐拿空间换时间，但对于大流量来说还是慢慢来比较好，单次访问量如果大再加上多并发怕是服务器会受不了，所以有了一片片分步来循环访问这个方法。\n\n也是直接来看代码吧，我们在**FileController**创建几个接口方法**RequestDownloadFile**，**FileDownload**。\n\n```csharp\n        /// <summary>\n        /// 请求下载文件\n        /// </summary>\n        /// <param name=\"fileInfo\">文件参数信息[name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"RequestDownload\")]\n        public MessageEntity RequestDownloadFile([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n\n        /// <summary>\n        /// 分段下载文件\n        /// </summary>\n        /// <param name=\"fileInfo\">请求参数信息[index,name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"Download\")]\n        public async Task<IActionResult> FileDownload([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n```\n\n**RequestDownloadFile**\n>这里说明下，与服务端的操作都要尽可能多的确认身份信息（当然后续会有说这块儿），文件的相关操作也一样需要并且还要严格点儿，我这里就是为了做示例演示所以只传文件信息即可。\n\n```csharp\n        public MessageEntity RequestDownloadFile([FromBody]Dictionary<string, object> fileInfo)\n        {\n            MessageEntity message = new MessageEntity();\n            string fileName = string.Empty;\n            string fileExt = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (fileInfo.ContainsKey(\"ext\"))\n            {\n                fileExt = fileInfo[\"ext\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件名不能为空\";\n                return message;\n            }\n            //获取对应目录下文件，如果有，获取文件开始准备分段下载\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            filePath = $\"{filePath}{fileExt}\";\n            FileStream fs = null;\n            try\n            {\n                if (!System.IO.File.Exists(filePath))\n                {\n                    //文件为空\n                    message.Code = -1;\n                    message.Msg = \"文件尚未处理完\";\n                    return message;\n                }\n                fs = new FileStream(filePath, FileMode.Open);\n                if (fs.Length <= 0)\n                {\n                    //文件为空\n                    message.Code = -1;\n                    message.Msg = \"文件尚未处理完\";\n                    return message;\n                }\n                int shardSize = 1 * 1024 * 1024;//一次1M\n                RequestFileUploadEntity request = new RequestFileUploadEntity();\n                request.fileext = fileExt;\n                request.size = fs.Length;\n                request.count = (int)(fs.Length / shardSize);\n                if ((fs.Length % shardSize) > 0)\n                {\n                    request.count += 1;\n                }\n                request.filedata = GetCryptoString(fs);\n\n                message.Data = request;\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Debug($\"读取文件信息失败：{filePath}，错误信息：{ex.Message}\");\n            }\n            finally\n            {\n                if (fs != null)\n                {\n                    fs.Close();\n                }\n            }\n\n            return message;\n        }\n```\n\n**FileDownload**\n```csharp\n        public async Task<IActionResult> FileDownload([FromBody]Dictionary<string, object> fileInfo)\n        {\n            //开始根据片段来下载\n            int index = 0;\n            if (fileInfo.ContainsKey(\"index\"))\n            {\n                int.TryParse(fileInfo[\"index\"].ToString(), out index);\n            }\n            else\n            {\n                return Ok(new { code = -1, msg = \"缺少参数\" });\n            }\n            string fileName = string.Empty;\n            string fileExt = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (fileInfo.ContainsKey(\"ext\"))\n            {\n                fileExt = fileInfo[\"ext\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                return Ok(new { code = -1, msg = \"文件名不能为空\" });\n            }\n            //获取对应目录下文件，如果有，获取文件开始准备分段下载\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            filePath = $\"{filePath}{fileExt}\";\n            if (!System.IO.File.Exists(filePath))\n            {\n                return Ok(new { code = -1, msg = \"文件尚未处理\" });\n            }\n            using (var fs = new FileStream(filePath, FileMode.Open))\n            {\n                if (fs.Length <= 0)\n                {\n                    return Ok(new { code = -1, msg = \"文件尚未处理\" });\n                }\n                int shardSize = 1 * 1024 * 1024;//一次1M\n                int count = (int)(fs.Length / shardSize);\n                if ((fs.Length % shardSize) > 0)\n                {\n                    count += 1;\n                }\n                if (index > count - 1)\n                {\n                    return Ok(new { code = -1, msg = \"无效的下标\" });\n                }\n                fs.Seek(index * shardSize, SeekOrigin.Begin);\n                if (index == count - 1)\n                {\n                    //最后一片 = 总长 - (每次片段大小 * 已下载片段个数)\n                    shardSize = (int)(fs.Length - (shardSize * index));\n                }\n                byte[] datas = new byte[shardSize];\n                await fs.ReadAsync(datas, 0, datas.Length);\n                //fs.Close();\n                return File(datas, \"application/x-gzip\");\n            }\n        }\n```\n\n看过上传的朋友都清楚上传是三步，**请求上传**=>**开始上传**=>**合并**，而下载只需要两步，因为合并与否其实不那么重要了，反正文件流都给客户端了，那边自己判断需要重新下载还是下载部分片段都是他们自己的事了（服务端只管卖，东西有问题自己解决，多理想的状态）。\n\n### 测试\n搞完之后重新生成，运行之后我们来测试下效果，测试之前不要忘了接口白名单（做过登录相关的验证操作的忽略这点）。\n![测试](net-core-filedownload/1.png)\n这里提示error是因为解析错误，实际请求下载测试是正常的，如果有异常问题可以与我联系。\n\n### 小结\n文件相关的上传下载以及常规信息的操作可以告一段落，至于下一步鼓捣点儿啥也还没想好，本来还在看着linux相关的操作做发布部署的铺垫，看最近总体的进度吧，总之，**学如逆水行舟，如果不想溺水，就握好你的浆**（当然有些人不用浆那就算了，告辞）。","slug":"net-core-filedownload","published":1,"updated":"2019-09-30T05:46:11.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3e003j9sv7y27n8gpx","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上一篇<a href=\"/2019/08/23/net-core-fileuploader-and-cors/\">net core WebApi——文件分片上传与跨域请求处理</a>介绍完文件的上传操作，本来是打算紧接着写文件下载，中间让形形色色的事给耽误的，今天还是抽个空整理完文件这块儿，然后就可以鼓捣别的东西了。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>这里我们仍然使用基础工程，需要下载的朋友请移步<a href=\"/2019/07/19/net-core-webapi-main/\">net core Webapi 总目录</a>，代码都是与博客的进度基本同步的。<br>上传的时候我们介绍过分片的思路，而下载也一样，只是客户端与服务端角色转换下就好了。<br><strong>后端</strong></p>\n<ol>\n<li>接收前端下载请求，校验请求信息，返回文件基本信息</li>\n<li>根据前端请求文件片段进行下载流处理。</li>\n</ol>\n<p><strong>前端</strong></p>\n<ol>\n<li>向后端发起下载请求，获取文件总片段数</li>\n<li>根据片段数循环请求文件片段流进行下载（可单独请求某一片段文件数据）</li>\n</ol>\n<p>文件下载相对于上传来说稍微简洁点儿，如果不考虑服务器压力也可以一个<strong>a</strong>标签解决下载问题，分片的意义就在于每次与服务端的交互减少流量，有些时候我们推荐拿空间换时间，但对于大流量来说还是慢慢来比较好，单次访问量如果大再加上多并发怕是服务器会受不了，所以有了一片片分步来循环访问这个方法。</p>\n<p>也是直接来看代码吧，我们在<strong>FileController</strong>创建几个接口方法<strong>RequestDownloadFile</strong>，<strong>FileDownload</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 请求下载文件</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>文件参数信息[name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"RequestDownload\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestDownloadFile</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 分段下载文件</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>请求参数信息[index,name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Download\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">FileDownload</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>RequestDownloadFile</strong></p>\n<blockquote>\n<p>这里说明下，与服务端的操作都要尽可能多的确认身份信息（当然后续会有说这块儿），文件的相关操作也一样需要并且还要严格点儿，我这里就是为了做示例演示所以只传文件信息即可。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestDownloadFile</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileExt = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"ext\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileExt = fileInfo[<span class=\"string\">\"ext\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"文件名不能为空\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应目录下文件，如果有，获取文件开始准备分段下载</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    filePath = <span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">    FileStream fs = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!System.IO.File.Exists(filePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//文件为空</span></span><br><span class=\"line\">            message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            message.Msg = <span class=\"string\">\"文件尚未处理完\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.Length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//文件为空</span></span><br><span class=\"line\">            message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            message.Msg = <span class=\"string\">\"文件尚未处理完\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> shardSize = <span class=\"number\">1</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;<span class=\"comment\">//一次1M</span></span><br><span class=\"line\">        RequestFileUploadEntity request = <span class=\"keyword\">new</span> RequestFileUploadEntity();</span><br><span class=\"line\">        request.fileext = fileExt;</span><br><span class=\"line\">        request.size = fs.Length;</span><br><span class=\"line\">        request.count = (<span class=\"keyword\">int</span>)(fs.Length / shardSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fs.Length % shardSize) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            request.count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.filedata = GetCryptoString(fs);</span><br><span class=\"line\"></span><br><span class=\"line\">        message.Data = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"读取文件信息失败：<span class=\"subst\">&#123;filePath&#125;</span>，错误信息：<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fs.Close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileDownload</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">FileDownload</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开始根据片段来下载</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>.TryParse(fileInfo[<span class=\"string\">\"index\"</span>].ToString(), <span class=\"keyword\">out</span> index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"缺少参数\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileExt = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"ext\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileExt = fileInfo[<span class=\"string\">\"ext\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件名不能为空\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应目录下文件，如果有，获取文件开始准备分段下载</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    filePath = <span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!System.IO.File.Exists(filePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件尚未处理\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.Length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件尚未处理\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> shardSize = <span class=\"number\">1</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;<span class=\"comment\">//一次1M</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = (<span class=\"keyword\">int</span>)(fs.Length / shardSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fs.Length % shardSize) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; count - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"无效的下标\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs.Seek(index * shardSize, SeekOrigin.Begin);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == count - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//最后一片 = 总长 - (每次片段大小 * 已下载片段个数)</span></span><br><span class=\"line\">            shardSize = (<span class=\"keyword\">int</span>)(fs.Length - (shardSize * index));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] datas = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[shardSize];</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fs.ReadAsync(datas, <span class=\"number\">0</span>, datas.Length);</span><br><span class=\"line\">        <span class=\"comment\">//fs.Close();</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> File(datas, <span class=\"string\">\"application/x-gzip\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看过上传的朋友都清楚上传是三步，<strong>请求上传</strong>=&gt;<strong>开始上传</strong>=&gt;<strong>合并</strong>，而下载只需要两步，因为合并与否其实不那么重要了，反正文件流都给客户端了，那边自己判断需要重新下载还是下载部分片段都是他们自己的事了（服务端只管卖，东西有问题自己解决，多理想的状态）。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>搞完之后重新生成，运行之后我们来测试下效果，测试之前不要忘了接口白名单（做过登录相关的验证操作的忽略这点）。<br><img src=\"/2019/08/27/net-core-filedownload/1.png\" alt=\"测试\"><br>这里提示error是因为解析错误，实际请求下载测试是正常的，如果有异常问题可以与我联系。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>文件相关的上传下载以及常规信息的操作可以告一段落，至于下一步鼓捣点儿啥也还没想好，本来还在看着linux相关的操作做发布部署的铺垫，看最近总体的进度吧，总之，<strong>学如逆水行舟，如果不想溺水，就握好你的浆</strong>（当然有些人不用浆那就算了，告辞）。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上一篇<a href=\"/2019/08/23/net-core-fileuploader-and-cors/\">net core WebApi——文件分片上传与跨域请求处理</a>介绍完文件的上传操作，本来是打算紧接着写文件下载，中间让形形色色的事给耽误的，今天还是抽个空整理完文件这块儿，然后就可以鼓捣别的东西了。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>这里我们仍然使用基础工程，需要下载的朋友请移步<a href=\"/2019/07/19/net-core-webapi-main/\">net core Webapi 总目录</a>，代码都是与博客的进度基本同步的。<br>上传的时候我们介绍过分片的思路，而下载也一样，只是客户端与服务端角色转换下就好了。<br><strong>后端</strong></p>\n<ol>\n<li>接收前端下载请求，校验请求信息，返回文件基本信息</li>\n<li>根据前端请求文件片段进行下载流处理。</li>\n</ol>\n<p><strong>前端</strong></p>\n<ol>\n<li>向后端发起下载请求，获取文件总片段数</li>\n<li>根据片段数循环请求文件片段流进行下载（可单独请求某一片段文件数据）</li>\n</ol>\n<p>文件下载相对于上传来说稍微简洁点儿，如果不考虑服务器压力也可以一个<strong>a</strong>标签解决下载问题，分片的意义就在于每次与服务端的交互减少流量，有些时候我们推荐拿空间换时间，但对于大流量来说还是慢慢来比较好，单次访问量如果大再加上多并发怕是服务器会受不了，所以有了一片片分步来循环访问这个方法。</p>\n<p>也是直接来看代码吧，我们在<strong>FileController</strong>创建几个接口方法<strong>RequestDownloadFile</strong>，<strong>FileDownload</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 请求下载文件</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>文件参数信息[name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"RequestDownload\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestDownloadFile</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 分段下载文件</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>请求参数信息[index,name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Download\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">FileDownload</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>RequestDownloadFile</strong></p>\n<blockquote>\n<p>这里说明下，与服务端的操作都要尽可能多的确认身份信息（当然后续会有说这块儿），文件的相关操作也一样需要并且还要严格点儿，我这里就是为了做示例演示所以只传文件信息即可。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestDownloadFile</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileExt = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"ext\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileExt = fileInfo[<span class=\"string\">\"ext\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"文件名不能为空\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应目录下文件，如果有，获取文件开始准备分段下载</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    filePath = <span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">    FileStream fs = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!System.IO.File.Exists(filePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//文件为空</span></span><br><span class=\"line\">            message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            message.Msg = <span class=\"string\">\"文件尚未处理完\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.Length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//文件为空</span></span><br><span class=\"line\">            message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            message.Msg = <span class=\"string\">\"文件尚未处理完\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> shardSize = <span class=\"number\">1</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;<span class=\"comment\">//一次1M</span></span><br><span class=\"line\">        RequestFileUploadEntity request = <span class=\"keyword\">new</span> RequestFileUploadEntity();</span><br><span class=\"line\">        request.fileext = fileExt;</span><br><span class=\"line\">        request.size = fs.Length;</span><br><span class=\"line\">        request.count = (<span class=\"keyword\">int</span>)(fs.Length / shardSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fs.Length % shardSize) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            request.count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.filedata = GetCryptoString(fs);</span><br><span class=\"line\"></span><br><span class=\"line\">        message.Data = request;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"读取文件信息失败：<span class=\"subst\">&#123;filePath&#125;</span>，错误信息：<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fs.Close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileDownload</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">FileDownload</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//开始根据片段来下载</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"index\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>.TryParse(fileInfo[<span class=\"string\">\"index\"</span>].ToString(), <span class=\"keyword\">out</span> index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"缺少参数\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileExt = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"ext\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileExt = fileInfo[<span class=\"string\">\"ext\"</span>].ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件名不能为空\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取对应目录下文件，如果有，获取文件开始准备分段下载</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    filePath = <span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!System.IO.File.Exists(filePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件尚未处理\"</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs.Length &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"文件尚未处理\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> shardSize = <span class=\"number\">1</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;<span class=\"comment\">//一次1M</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = (<span class=\"keyword\">int</span>)(fs.Length / shardSize);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((fs.Length % shardSize) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; count - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Ok(<span class=\"keyword\">new</span> &#123; code = <span class=\"number\">-1</span>, msg = <span class=\"string\">\"无效的下标\"</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fs.Seek(index * shardSize, SeekOrigin.Begin);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == count - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//最后一片 = 总长 - (每次片段大小 * 已下载片段个数)</span></span><br><span class=\"line\">            shardSize = (<span class=\"keyword\">int</span>)(fs.Length - (shardSize * index));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] datas = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[shardSize];</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fs.ReadAsync(datas, <span class=\"number\">0</span>, datas.Length);</span><br><span class=\"line\">        <span class=\"comment\">//fs.Close();</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> File(datas, <span class=\"string\">\"application/x-gzip\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看过上传的朋友都清楚上传是三步，<strong>请求上传</strong>=&gt;<strong>开始上传</strong>=&gt;<strong>合并</strong>，而下载只需要两步，因为合并与否其实不那么重要了，反正文件流都给客户端了，那边自己判断需要重新下载还是下载部分片段都是他们自己的事了（服务端只管卖，东西有问题自己解决，多理想的状态）。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>搞完之后重新生成，运行之后我们来测试下效果，测试之前不要忘了接口白名单（做过登录相关的验证操作的忽略这点）。<br><img src=\"/2019/08/27/net-core-filedownload/1.png\" alt=\"测试\"><br>这里提示error是因为解析错误，实际请求下载测试是正常的，如果有异常问题可以与我联系。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>文件相关的上传下载以及常规信息的操作可以告一段落，至于下一步鼓捣点儿啥也还没想好，本来还在看着linux相关的操作做发布部署的铺垫，看最近总体的进度吧，总之，<strong>学如逆水行舟，如果不想溺水，就握好你的浆</strong>（当然有些人不用浆那就算了，告辞）。</p>\n"},{"title":"net core Webapi基础工程搭建（五）——缓存机制","date":"2019-07-10T05:46:17.000Z","_content":"\n### 前言\n作为WebApi接口工程，性能效率是必不可少的，每次的访问请求，数据库读取，业务逻辑处理都或多或少耗费时间，偶尔再来个各种花式for循环，那就嗨翻天了，一些公有的数据，访问频繁且大致重复的数据，我们可以考虑通过缓存来放置内存存储，以内存空间换取时间上的提升，至于缓存的方法，**Cache,Session,Cookie等**，为什么用等呢，因为还有很多缓存的方法，如Redis，具体后面用到了会专门介绍。\n\n### Cache\nnet core中没有Cache，但是它有MemoryCache，其实，大差不差，毕竟都是Cache。\n\nCache在项目工程中使用的范围还是挺广泛的：\n- 在个人开发的时候，我一般会把系统字典做缓存，方便调用提高响应速度\n- 消息推送后，会把消息实体缓存\n- 其他，自己看着办吧\n\n首先，引入**Microsoft.Extensions.Caching.Memory**\n![Cache](net-core-cache/1.png)\n这里我直接在Util引入，前面已经讲了，一个工程引入第三方，其他工程引入项目工程即可使用对应第三方类库。\n引入完成后，我们就开始来使用这个MemoryCache吧。\n```csharp\n\t//实例化\n\tprivate static readonly MemoryCache Cache = new MemoryCache(new MemoryCacheOptions());\n\t/// <summary>\n    /// 添加缓存\n    /// </summary>\n    /// <param name=\"key\">缓存Key</param>\n    /// <param name=\"value\">缓存Value</param>\n    /// <param name=\"expiresSliding\">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>\n    /// <param name=\"expiressAbsoulte\">绝对过期时长</param>\n    /// <returns></returns>\n    public static bool Set(string key, object value, TimeSpan expiresSliding, TimeSpan expiressAbsoulte)\n    {\n        if (key == null)\n            throw new ArgumentNullException(nameof(key));\n        if (value == null)\n            throw new ArgumentNullException(nameof(value));\n\n        Cache.Set(key, value,\n            new MemoryCacheEntryOptions().SetSlidingExpiration(expiresSliding)\n                .SetAbsoluteExpiration(expiressAbsoulte));\n        return Exists(key);\n    }\n\n    /// <summary>\n    /// 添加缓存\n    /// </summary>\n    /// <param name=\"key\">缓存Key</param>\n    /// <param name=\"value\">缓存Value</param>\n    /// <param name=\"expiresIn\">缓存时长</param>\n    /// <param name=\"isSliding\">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>\n    /// <returns></returns>\n    public static bool Set(string key, object value, TimeSpan expiresIn, bool isSliding = false)\n    {\n        if (key == null)\n            throw new ArgumentNullException(nameof(key));\n        if (value == null)\n            throw new ArgumentNullException(nameof(value));\n\n        Cache.Set(key, value,\n            isSliding\n                ? new MemoryCacheEntryOptions().SetSlidingExpiration(expiresIn)\n                : new MemoryCacheEntryOptions().SetAbsoluteExpiration(expiresIn));\n\n        return Exists(key);\n    }\n```\n\n这个地方大致列下如何使用，其实对于第三方的包，我们封装是为了减少其他开发人员的学习成本，后面的SqlSugar等类库一样，其实本身第三方已经做了一次封装整合，而我们是因为实际开发需要来针对不同的业务功能做不同的封装整合，接口开放等。\n\n补个测试效果，写到Session才想起来，唉，果然写东西不能让打断，-,-||。\n\n![Values](net-core-cache/2.png)\n\n![Cache测试](net-core-cache/3.png)\n注意观察时间，一段时间后Cache过期销毁。\n![Cache测试](net-core-cache/4.png)\n\n### Session\n最初鼓捣net core的时候，我确实没有过多关注Session这个会话模式，毕竟只有浏览器才能使用，之前跟别人谈到Session多爽的时候，说道Session其实本质上类似Cookie（当然我也不清楚），因为用户访问后会有个SessionID，有状态的访问会留下Cookie也是情有可原的，如果用户自己整个隐私模式访问，那，再见（你就在登录界面循环往复吧）。\n\n在用户登录后，Session存储用户基本登录信息这个是web端常用的手段，毕竟跟浏览器打交道Cookie少不了，对于无状态访问授权的[JWT](https://jwt.io/)也是折腾过，不过还是理解不透彻，统一的授发token的方式还是挺可取的，如果是多服务，多应用，负载均衡的场景，单点登录确实方便，但是我常规会自己生成token来通过Session或者Redis存储，实际效果应该是差不多吧。\n好了，废话不多说，一样是引入**Microsoft.AspNetCore.Session**\n![Session](net-core-cache/5.png)\n引入完成后，在Startup.cs注册Session服务。\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //…之前的代码\n            \n            #region Session\n            services.AddSession(options =>\n            {\n                options.Cookie.Name = \"April.Session\";\n                options.IdleTimeout = TimeSpan.FromSeconds(2000);//设置session的过期时间\n                options.Cookie.HttpOnly = true;//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要\n            });\n            #endregion\n        }\n```\n注册服务后，需要在ConfigConfigure使用，注意所有的Use要在UserMvc之前才能生效。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            //…之前的代码\n\n            app.UseSession();//这里使用\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n\n在Util创建一个SessionUtil，来封装Session方法，这里只简单描述下如何使用，后续代码开源后可查看源码使用。\n```csharp\n    public class SessionUtil\n    {\n        /// <summary>\n        /// 设置Session\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        public void SetSession(HttpContext content,string key, string value)\n        {\n            content.Session.SetString(key, value);\n        }\n        /// <summary>\n        /// 获取Session\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <returns>返回对应的值</returns>\n        public string GetSession(HttpContext context, string key, string defaultValue = \"\")\n        {\n            string value = context.Session.GetString(key);\n            if (string.IsNullOrEmpty(value))\n            {\n                value = defaultValue;\n            }\n            return value;\n        }\n    }\n```\n我们依然拿这个万恶的ValuesController开刀。\n\n![Values](net-core-cache/6.png)\n运行后，访问这个Values/{id}接口，发现我们的Session值已经获取到了。\n![数据](net-core-cache/7.png)\n\nHttpContext这个对象，可以通过IServiceProvider来获取，这样方便调用统一维护。\n新建AprilConfig类文件，代码如下：\n```csharp\n    public class AprilConfig\n    {\n        public static IServiceProvider _provider;\n\n        public static HttpContext HttpCurrent\n        {\n            get\n            {\n                object factory = _provider.GetService(typeof(IHttpContextAccessor));\n                HttpContext context = ((IHttpContextAccessor)factory).HttpContext;\n                return context;\n            }\n        }\n    }\n```\n\n写好后我们需要回到Startup.cs，给IserviceProvider赋值。\n![Startup](net-core-cache/8.png)\nSessionUtil代码修改调整，不需要再传HttpContext这个参数。\n![SessionUtil](net-core-cache/9.png)\n这样少传一个是一个，后续用到HttpContext这个上下文的时候，也不用考虑啥了，直接**AprilConfig.HttpCurrent**走起。\n\n### Cookie\nCookie在web开发使用的还是相当频繁的，毕竟不占用服务器内存，跟服务器基本上没半毛钱关系，客户端的内存想咋折腾咋折腾，客户端的资源想咋使用咋使用（ps：这就是为啥你的电脑越来越卡，软件开发不考虑性能优化的种种结果）。\n\nCookie本身在net core中已经支持，所以不需要引入啥NuGet包。\n\n新建CookieUtil（不要吐槽我的命名方法，习惯了）。\n```csharp\npublic class CookieUtil\n    {\n        /// <summary>\n        /// 设置本地cookie\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>  \n        /// <param name=\"minutes\">过期时长，单位：分钟</param>      \n        public static void SetCookies(string key, string value, int minutes = 10)\n        {\n            AprilConfig.HttpCurrent.Response.Cookies.Append(key, value, new CookieOptions\n            {\n                Expires = DateTime.Now.AddMinutes(minutes)\n            });\n        }\n        /// <summary>\n        /// 删除指定的cookie\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        public static void DeleteCookies(string key)\n        {\n            //这个地方想判断就判断下，不过内部封装的方法应该是已经做过处理\n            AprilConfig.HttpCurrent.Response.Cookies.Delete(key);\n        }\n\n        /// <summary>\n        /// 获取cookies\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <returns>返回对应的值</returns>\n        public static string GetCookies(string key,string defaultValue=\"\")\n        {\n            string value = string.Empty;\n            AprilConfig.HttpCurrent.Request.Cookies.TryGetValue(key, out value);\n            if (string.IsNullOrEmpty(value))\n            {\n                value = defaultValue;\n            }\n            return value;\n        }\n    }\n```\n\n写好之后，老规矩ValuesController走一波。\n![Values](net-core-cache/10.png)\n测试结果：\n![测试结果](net-core-cache/11.png)\n\n### 小结\n从创建工程到在线文档，日志管理，缓存机制基本上走了一遍了，下一步，就是数据层的操作，一个工程管理肯定少不了数据的支撑，总不能每次都自己YY数据吧，下一节，**数据库操作**。\n\n### 补充\n针对Session.SetString的方法没有问题，需要引入一个NuGet包，这个里面包含官方的扩展方法，**Microsoft.AspNetCore.Http.Abstractions**。","source":"_posts/net-core-cache.md","raw":"---\ntitle: net core Webapi基础工程搭建（五）——缓存机制\ndate: 2019-07-10 13:46:17\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n作为WebApi接口工程，性能效率是必不可少的，每次的访问请求，数据库读取，业务逻辑处理都或多或少耗费时间，偶尔再来个各种花式for循环，那就嗨翻天了，一些公有的数据，访问频繁且大致重复的数据，我们可以考虑通过缓存来放置内存存储，以内存空间换取时间上的提升，至于缓存的方法，**Cache,Session,Cookie等**，为什么用等呢，因为还有很多缓存的方法，如Redis，具体后面用到了会专门介绍。\n\n### Cache\nnet core中没有Cache，但是它有MemoryCache，其实，大差不差，毕竟都是Cache。\n\nCache在项目工程中使用的范围还是挺广泛的：\n- 在个人开发的时候，我一般会把系统字典做缓存，方便调用提高响应速度\n- 消息推送后，会把消息实体缓存\n- 其他，自己看着办吧\n\n首先，引入**Microsoft.Extensions.Caching.Memory**\n![Cache](net-core-cache/1.png)\n这里我直接在Util引入，前面已经讲了，一个工程引入第三方，其他工程引入项目工程即可使用对应第三方类库。\n引入完成后，我们就开始来使用这个MemoryCache吧。\n```csharp\n\t//实例化\n\tprivate static readonly MemoryCache Cache = new MemoryCache(new MemoryCacheOptions());\n\t/// <summary>\n    /// 添加缓存\n    /// </summary>\n    /// <param name=\"key\">缓存Key</param>\n    /// <param name=\"value\">缓存Value</param>\n    /// <param name=\"expiresSliding\">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>\n    /// <param name=\"expiressAbsoulte\">绝对过期时长</param>\n    /// <returns></returns>\n    public static bool Set(string key, object value, TimeSpan expiresSliding, TimeSpan expiressAbsoulte)\n    {\n        if (key == null)\n            throw new ArgumentNullException(nameof(key));\n        if (value == null)\n            throw new ArgumentNullException(nameof(value));\n\n        Cache.Set(key, value,\n            new MemoryCacheEntryOptions().SetSlidingExpiration(expiresSliding)\n                .SetAbsoluteExpiration(expiressAbsoulte));\n        return Exists(key);\n    }\n\n    /// <summary>\n    /// 添加缓存\n    /// </summary>\n    /// <param name=\"key\">缓存Key</param>\n    /// <param name=\"value\">缓存Value</param>\n    /// <param name=\"expiresIn\">缓存时长</param>\n    /// <param name=\"isSliding\">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>\n    /// <returns></returns>\n    public static bool Set(string key, object value, TimeSpan expiresIn, bool isSliding = false)\n    {\n        if (key == null)\n            throw new ArgumentNullException(nameof(key));\n        if (value == null)\n            throw new ArgumentNullException(nameof(value));\n\n        Cache.Set(key, value,\n            isSliding\n                ? new MemoryCacheEntryOptions().SetSlidingExpiration(expiresIn)\n                : new MemoryCacheEntryOptions().SetAbsoluteExpiration(expiresIn));\n\n        return Exists(key);\n    }\n```\n\n这个地方大致列下如何使用，其实对于第三方的包，我们封装是为了减少其他开发人员的学习成本，后面的SqlSugar等类库一样，其实本身第三方已经做了一次封装整合，而我们是因为实际开发需要来针对不同的业务功能做不同的封装整合，接口开放等。\n\n补个测试效果，写到Session才想起来，唉，果然写东西不能让打断，-,-||。\n\n![Values](net-core-cache/2.png)\n\n![Cache测试](net-core-cache/3.png)\n注意观察时间，一段时间后Cache过期销毁。\n![Cache测试](net-core-cache/4.png)\n\n### Session\n最初鼓捣net core的时候，我确实没有过多关注Session这个会话模式，毕竟只有浏览器才能使用，之前跟别人谈到Session多爽的时候，说道Session其实本质上类似Cookie（当然我也不清楚），因为用户访问后会有个SessionID，有状态的访问会留下Cookie也是情有可原的，如果用户自己整个隐私模式访问，那，再见（你就在登录界面循环往复吧）。\n\n在用户登录后，Session存储用户基本登录信息这个是web端常用的手段，毕竟跟浏览器打交道Cookie少不了，对于无状态访问授权的[JWT](https://jwt.io/)也是折腾过，不过还是理解不透彻，统一的授发token的方式还是挺可取的，如果是多服务，多应用，负载均衡的场景，单点登录确实方便，但是我常规会自己生成token来通过Session或者Redis存储，实际效果应该是差不多吧。\n好了，废话不多说，一样是引入**Microsoft.AspNetCore.Session**\n![Session](net-core-cache/5.png)\n引入完成后，在Startup.cs注册Session服务。\n```csharp\n        public void ConfigureServices(IServiceCollection services)\n        {\n            //…之前的代码\n            \n            #region Session\n            services.AddSession(options =>\n            {\n                options.Cookie.Name = \"April.Session\";\n                options.IdleTimeout = TimeSpan.FromSeconds(2000);//设置session的过期时间\n                options.Cookie.HttpOnly = true;//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要\n            });\n            #endregion\n        }\n```\n注册服务后，需要在ConfigConfigure使用，注意所有的Use要在UserMvc之前才能生效。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            //…之前的代码\n\n            app.UseSession();//这里使用\n\n            app.UseHttpsRedirection();\n            app.UseMvc();\n        }\n```\n\n在Util创建一个SessionUtil，来封装Session方法，这里只简单描述下如何使用，后续代码开源后可查看源码使用。\n```csharp\n    public class SessionUtil\n    {\n        /// <summary>\n        /// 设置Session\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        public void SetSession(HttpContext content,string key, string value)\n        {\n            content.Session.SetString(key, value);\n        }\n        /// <summary>\n        /// 获取Session\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <returns>返回对应的值</returns>\n        public string GetSession(HttpContext context, string key, string defaultValue = \"\")\n        {\n            string value = context.Session.GetString(key);\n            if (string.IsNullOrEmpty(value))\n            {\n                value = defaultValue;\n            }\n            return value;\n        }\n    }\n```\n我们依然拿这个万恶的ValuesController开刀。\n\n![Values](net-core-cache/6.png)\n运行后，访问这个Values/{id}接口，发现我们的Session值已经获取到了。\n![数据](net-core-cache/7.png)\n\nHttpContext这个对象，可以通过IServiceProvider来获取，这样方便调用统一维护。\n新建AprilConfig类文件，代码如下：\n```csharp\n    public class AprilConfig\n    {\n        public static IServiceProvider _provider;\n\n        public static HttpContext HttpCurrent\n        {\n            get\n            {\n                object factory = _provider.GetService(typeof(IHttpContextAccessor));\n                HttpContext context = ((IHttpContextAccessor)factory).HttpContext;\n                return context;\n            }\n        }\n    }\n```\n\n写好后我们需要回到Startup.cs，给IserviceProvider赋值。\n![Startup](net-core-cache/8.png)\nSessionUtil代码修改调整，不需要再传HttpContext这个参数。\n![SessionUtil](net-core-cache/9.png)\n这样少传一个是一个，后续用到HttpContext这个上下文的时候，也不用考虑啥了，直接**AprilConfig.HttpCurrent**走起。\n\n### Cookie\nCookie在web开发使用的还是相当频繁的，毕竟不占用服务器内存，跟服务器基本上没半毛钱关系，客户端的内存想咋折腾咋折腾，客户端的资源想咋使用咋使用（ps：这就是为啥你的电脑越来越卡，软件开发不考虑性能优化的种种结果）。\n\nCookie本身在net core中已经支持，所以不需要引入啥NuGet包。\n\n新建CookieUtil（不要吐槽我的命名方法，习惯了）。\n```csharp\npublic class CookieUtil\n    {\n        /// <summary>\n        /// 设置本地cookie\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>  \n        /// <param name=\"minutes\">过期时长，单位：分钟</param>      \n        public static void SetCookies(string key, string value, int minutes = 10)\n        {\n            AprilConfig.HttpCurrent.Response.Cookies.Append(key, value, new CookieOptions\n            {\n                Expires = DateTime.Now.AddMinutes(minutes)\n            });\n        }\n        /// <summary>\n        /// 删除指定的cookie\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        public static void DeleteCookies(string key)\n        {\n            //这个地方想判断就判断下，不过内部封装的方法应该是已经做过处理\n            AprilConfig.HttpCurrent.Response.Cookies.Delete(key);\n        }\n\n        /// <summary>\n        /// 获取cookies\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <returns>返回对应的值</returns>\n        public static string GetCookies(string key,string defaultValue=\"\")\n        {\n            string value = string.Empty;\n            AprilConfig.HttpCurrent.Request.Cookies.TryGetValue(key, out value);\n            if (string.IsNullOrEmpty(value))\n            {\n                value = defaultValue;\n            }\n            return value;\n        }\n    }\n```\n\n写好之后，老规矩ValuesController走一波。\n![Values](net-core-cache/10.png)\n测试结果：\n![测试结果](net-core-cache/11.png)\n\n### 小结\n从创建工程到在线文档，日志管理，缓存机制基本上走了一遍了，下一步，就是数据层的操作，一个工程管理肯定少不了数据的支撑，总不能每次都自己YY数据吧，下一节，**数据库操作**。\n\n### 补充\n针对Session.SetString的方法没有问题，需要引入一个NuGet包，这个里面包含官方的扩展方法，**Microsoft.AspNetCore.Http.Abstractions**。","slug":"net-core-cache","published":1,"updated":"2019-09-30T05:46:03.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3g003l9sv7x7kea258","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为WebApi接口工程，性能效率是必不可少的，每次的访问请求，数据库读取，业务逻辑处理都或多或少耗费时间，偶尔再来个各种花式for循环，那就嗨翻天了，一些公有的数据，访问频繁且大致重复的数据，我们可以考虑通过缓存来放置内存存储，以内存空间换取时间上的提升，至于缓存的方法，<strong>Cache,Session,Cookie等</strong>，为什么用等呢，因为还有很多缓存的方法，如Redis，具体后面用到了会专门介绍。</p>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><p>net core中没有Cache，但是它有MemoryCache，其实，大差不差，毕竟都是Cache。</p>\n<p>Cache在项目工程中使用的范围还是挺广泛的：</p>\n<ul>\n<li>在个人开发的时候，我一般会把系统字典做缓存，方便调用提高响应速度</li>\n<li>消息推送后，会把消息实体缓存</li>\n<li>其他，自己看着办吧</li>\n</ul>\n<p>首先，引入<strong>Microsoft.Extensions.Caching.Memory</strong><br><img src=\"/2019/07/10/net-core-cache/1.png\" alt=\"Cache\"><br>这里我直接在Util引入，前面已经讲了，一个工程引入第三方，其他工程引入项目工程即可使用对应第三方类库。<br>引入完成后，我们就开始来使用这个MemoryCache吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> MemoryCache Cache = <span class=\"keyword\">new</span> MemoryCache(<span class=\"keyword\">new</span> MemoryCacheOptions());</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> 添加缓存</span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>缓存Key<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>缓存Value<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiresSliding\"&gt;</span>滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiressAbsoulte\"&gt;</span>绝对过期时长<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan expiresSliding, TimeSpan expiressAbsoulte</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(key));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       Cache.Set(key, <span class=\"keyword\">value</span>,</span><br><span class=\"line\">           <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetSlidingExpiration(expiresSliding)</span><br><span class=\"line\">               .SetAbsoluteExpiration(expiressAbsoulte));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Exists(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> 添加缓存</span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>缓存Key<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>缓存Value<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiresIn\"&gt;</span>缓存时长<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isSliding\"&gt;</span>是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan expiresIn, <span class=\"keyword\">bool</span> isSliding = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(key));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       Cache.Set(key, <span class=\"keyword\">value</span>,</span><br><span class=\"line\">           isSliding</span><br><span class=\"line\">               ? <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetSlidingExpiration(expiresIn)</span><br><span class=\"line\">               : <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetAbsoluteExpiration(expiresIn));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> Exists(key);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个地方大致列下如何使用，其实对于第三方的包，我们封装是为了减少其他开发人员的学习成本，后面的SqlSugar等类库一样，其实本身第三方已经做了一次封装整合，而我们是因为实际开发需要来针对不同的业务功能做不同的封装整合，接口开放等。</p>\n<p>补个测试效果，写到Session才想起来，唉，果然写东西不能让打断，-,-||。</p>\n<p><img src=\"/2019/07/10/net-core-cache/2.png\" alt=\"Values\"></p>\n<p><img src=\"/2019/07/10/net-core-cache/3.png\" alt=\"Cache测试\"><br>注意观察时间，一段时间后Cache过期销毁。<br><img src=\"/2019/07/10/net-core-cache/4.png\" alt=\"Cache测试\"></p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>最初鼓捣net core的时候，我确实没有过多关注Session这个会话模式，毕竟只有浏览器才能使用，之前跟别人谈到Session多爽的时候，说道Session其实本质上类似Cookie（当然我也不清楚），因为用户访问后会有个SessionID，有状态的访问会留下Cookie也是情有可原的，如果用户自己整个隐私模式访问，那，再见（你就在登录界面循环往复吧）。</p>\n<p>在用户登录后，Session存储用户基本登录信息这个是web端常用的手段，毕竟跟浏览器打交道Cookie少不了，对于无状态访问授权的<a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">JWT</a>也是折腾过，不过还是理解不透彻，统一的授发token的方式还是挺可取的，如果是多服务，多应用，负载均衡的场景，单点登录确实方便，但是我常规会自己生成token来通过Session或者Redis存储，实际效果应该是差不多吧。<br>好了，废话不多说，一样是引入<strong>Microsoft.AspNetCore.Session</strong><br><img src=\"/2019/07/10/net-core-cache/5.png\" alt=\"Session\"><br>引入完成后，在Startup.cs注册Session服务。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//…之前的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Session</span></span><br><span class=\"line\">    services.AddSession(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"April.Session\"</span>;</span><br><span class=\"line\">        options.IdleTimeout = TimeSpan.FromSeconds(<span class=\"number\">2000</span>);<span class=\"comment\">//设置session的过期时间</span></span><br><span class=\"line\">        options.Cookie.HttpOnly = <span class=\"literal\">true</span>;<span class=\"comment\">//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册服务后，需要在ConfigConfigure使用，注意所有的Use要在UserMvc之前才能生效。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//…之前的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSession();<span class=\"comment\">//这里使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Util创建一个SessionUtil，来封装Session方法，这里只简单描述下如何使用，后续代码开源后可查看源码使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 设置Session</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetSession</span>(<span class=\"params\">HttpContext content,<span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        content.Session.SetString(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取Session</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回对应的值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSession</span>(<span class=\"params\">HttpContext context, <span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> defaultValue = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = context.Session.GetString(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">value</span> = defaultValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们依然拿这个万恶的ValuesController开刀。</p>\n<p><img src=\"/2019/07/10/net-core-cache/6.png\" alt=\"Values\"><br>运行后，访问这个Values/{id}接口，发现我们的Session值已经获取到了。<br><img src=\"/2019/07/10/net-core-cache/7.png\" alt=\"数据\"></p>\n<p>HttpContext这个对象，可以通过IServiceProvider来获取，这样方便调用统一维护。<br>新建AprilConfig类文件，代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilConfig</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceProvider _provider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpContext HttpCurrent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> factory = _provider.GetService(<span class=\"keyword\">typeof</span>(IHttpContextAccessor));</span><br><span class=\"line\">            HttpContext context = ((IHttpContextAccessor)factory).HttpContext;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好后我们需要回到Startup.cs，给IserviceProvider赋值。<br><img src=\"/2019/07/10/net-core-cache/8.png\" alt=\"Startup\"><br>SessionUtil代码修改调整，不需要再传HttpContext这个参数。<br><img src=\"/2019/07/10/net-core-cache/9.png\" alt=\"SessionUtil\"><br>这样少传一个是一个，后续用到HttpContext这个上下文的时候，也不用考虑啥了，直接<strong>AprilConfig.HttpCurrent</strong>走起。</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>Cookie在web开发使用的还是相当频繁的，毕竟不占用服务器内存，跟服务器基本上没半毛钱关系，客户端的内存想咋折腾咋折腾，客户端的资源想咋使用咋使用（ps：这就是为啥你的电脑越来越卡，软件开发不考虑性能优化的种种结果）。</p>\n<p>Cookie本身在net core中已经支持，所以不需要引入啥NuGet包。</p>\n<p>新建CookieUtil（不要吐槽我的命名方法，习惯了）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CookieUtil</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置本地cookie</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"minutes\"&gt;</span>过期时长，单位：分钟<span class=\"doctag\">&lt;/param&gt;</span>      </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> minutes = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Response.Cookies.Append(key, <span class=\"keyword\">value</span>, <span class=\"keyword\">new</span> CookieOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Expires = DateTime.Now.AddMinutes(minutes)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除指定的cookie</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个地方想判断就判断下，不过内部封装的方法应该是已经做过处理</span></span><br><span class=\"line\">            AprilConfig.HttpCurrent.Response.Cookies.Delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取cookies</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回对应的值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key,<span class=\"keyword\">string</span> defaultValue=<span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Request.Cookies.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">value</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">value</span> = defaultValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好之后，老规矩ValuesController走一波。<br><img src=\"/2019/07/10/net-core-cache/10.png\" alt=\"Values\"><br>测试结果：<br><img src=\"/2019/07/10/net-core-cache/11.png\" alt=\"测试结果\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>从创建工程到在线文档，日志管理，缓存机制基本上走了一遍了，下一步，就是数据层的操作，一个工程管理肯定少不了数据的支撑，总不能每次都自己YY数据吧，下一节，<strong>数据库操作</strong>。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>针对Session.SetString的方法没有问题，需要引入一个NuGet包，这个里面包含官方的扩展方法，<strong>Microsoft.AspNetCore.Http.Abstractions</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为WebApi接口工程，性能效率是必不可少的，每次的访问请求，数据库读取，业务逻辑处理都或多或少耗费时间，偶尔再来个各种花式for循环，那就嗨翻天了，一些公有的数据，访问频繁且大致重复的数据，我们可以考虑通过缓存来放置内存存储，以内存空间换取时间上的提升，至于缓存的方法，<strong>Cache,Session,Cookie等</strong>，为什么用等呢，因为还有很多缓存的方法，如Redis，具体后面用到了会专门介绍。</p>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><p>net core中没有Cache，但是它有MemoryCache，其实，大差不差，毕竟都是Cache。</p>\n<p>Cache在项目工程中使用的范围还是挺广泛的：</p>\n<ul>\n<li>在个人开发的时候，我一般会把系统字典做缓存，方便调用提高响应速度</li>\n<li>消息推送后，会把消息实体缓存</li>\n<li>其他，自己看着办吧</li>\n</ul>\n<p>首先，引入<strong>Microsoft.Extensions.Caching.Memory</strong><br><img src=\"/2019/07/10/net-core-cache/1.png\" alt=\"Cache\"><br>这里我直接在Util引入，前面已经讲了，一个工程引入第三方，其他工程引入项目工程即可使用对应第三方类库。<br>引入完成后，我们就开始来使用这个MemoryCache吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> MemoryCache Cache = <span class=\"keyword\">new</span> MemoryCache(<span class=\"keyword\">new</span> MemoryCacheOptions());</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> 添加缓存</span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>缓存Key<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>缓存Value<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiresSliding\"&gt;</span>滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiressAbsoulte\"&gt;</span>绝对过期时长<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan expiresSliding, TimeSpan expiressAbsoulte</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(key));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       Cache.Set(key, <span class=\"keyword\">value</span>,</span><br><span class=\"line\">           <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetSlidingExpiration(expiresSliding)</span><br><span class=\"line\">               .SetAbsoluteExpiration(expiressAbsoulte));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> Exists(key);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> 添加缓存</span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>缓存Key<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>缓存Value<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expiresIn\"&gt;</span>缓存时长<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isSliding\"&gt;</span>是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">   <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">Set</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, TimeSpan expiresIn, <span class=\"keyword\">bool</span> isSliding = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(key));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">       Cache.Set(key, <span class=\"keyword\">value</span>,</span><br><span class=\"line\">           isSliding</span><br><span class=\"line\">               ? <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetSlidingExpiration(expiresIn)</span><br><span class=\"line\">               : <span class=\"keyword\">new</span> MemoryCacheEntryOptions().SetAbsoluteExpiration(expiresIn));</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> Exists(key);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个地方大致列下如何使用，其实对于第三方的包，我们封装是为了减少其他开发人员的学习成本，后面的SqlSugar等类库一样，其实本身第三方已经做了一次封装整合，而我们是因为实际开发需要来针对不同的业务功能做不同的封装整合，接口开放等。</p>\n<p>补个测试效果，写到Session才想起来，唉，果然写东西不能让打断，-,-||。</p>\n<p><img src=\"/2019/07/10/net-core-cache/2.png\" alt=\"Values\"></p>\n<p><img src=\"/2019/07/10/net-core-cache/3.png\" alt=\"Cache测试\"><br>注意观察时间，一段时间后Cache过期销毁。<br><img src=\"/2019/07/10/net-core-cache/4.png\" alt=\"Cache测试\"></p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>最初鼓捣net core的时候，我确实没有过多关注Session这个会话模式，毕竟只有浏览器才能使用，之前跟别人谈到Session多爽的时候，说道Session其实本质上类似Cookie（当然我也不清楚），因为用户访问后会有个SessionID，有状态的访问会留下Cookie也是情有可原的，如果用户自己整个隐私模式访问，那，再见（你就在登录界面循环往复吧）。</p>\n<p>在用户登录后，Session存储用户基本登录信息这个是web端常用的手段，毕竟跟浏览器打交道Cookie少不了，对于无状态访问授权的<a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener\">JWT</a>也是折腾过，不过还是理解不透彻，统一的授发token的方式还是挺可取的，如果是多服务，多应用，负载均衡的场景，单点登录确实方便，但是我常规会自己生成token来通过Session或者Redis存储，实际效果应该是差不多吧。<br>好了，废话不多说，一样是引入<strong>Microsoft.AspNetCore.Session</strong><br><img src=\"/2019/07/10/net-core-cache/5.png\" alt=\"Session\"><br>引入完成后，在Startup.cs注册Session服务。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//…之前的代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> Session</span></span><br><span class=\"line\">    services.AddSession(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.Cookie.Name = <span class=\"string\">\"April.Session\"</span>;</span><br><span class=\"line\">        options.IdleTimeout = TimeSpan.FromSeconds(<span class=\"number\">2000</span>);<span class=\"comment\">//设置session的过期时间</span></span><br><span class=\"line\">        options.Cookie.HttpOnly = <span class=\"literal\">true</span>;<span class=\"comment\">//设置在浏览器不能通过js获得该cookie的值,实际场景根据自身需要</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册服务后，需要在ConfigConfigure使用，注意所有的Use要在UserMvc之前才能生效。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//…之前的代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseSession();<span class=\"comment\">//这里使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Util创建一个SessionUtil，来封装Session方法，这里只简单描述下如何使用，后续代码开源后可查看源码使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SessionUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 设置Session</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetSession</span>(<span class=\"params\">HttpContext content,<span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        content.Session.SetString(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取Session</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回对应的值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetSession</span>(<span class=\"params\">HttpContext context, <span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> defaultValue = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = context.Session.GetString(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">value</span> = defaultValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们依然拿这个万恶的ValuesController开刀。</p>\n<p><img src=\"/2019/07/10/net-core-cache/6.png\" alt=\"Values\"><br>运行后，访问这个Values/{id}接口，发现我们的Session值已经获取到了。<br><img src=\"/2019/07/10/net-core-cache/7.png\" alt=\"数据\"></p>\n<p>HttpContext这个对象，可以通过IServiceProvider来获取，这样方便调用统一维护。<br>新建AprilConfig类文件，代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilConfig</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceProvider _provider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HttpContext HttpCurrent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">object</span> factory = _provider.GetService(<span class=\"keyword\">typeof</span>(IHttpContextAccessor));</span><br><span class=\"line\">            HttpContext context = ((IHttpContextAccessor)factory).HttpContext;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好后我们需要回到Startup.cs，给IserviceProvider赋值。<br><img src=\"/2019/07/10/net-core-cache/8.png\" alt=\"Startup\"><br>SessionUtil代码修改调整，不需要再传HttpContext这个参数。<br><img src=\"/2019/07/10/net-core-cache/9.png\" alt=\"SessionUtil\"><br>这样少传一个是一个，后续用到HttpContext这个上下文的时候，也不用考虑啥了，直接<strong>AprilConfig.HttpCurrent</strong>走起。</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>Cookie在web开发使用的还是相当频繁的，毕竟不占用服务器内存，跟服务器基本上没半毛钱关系，客户端的内存想咋折腾咋折腾，客户端的资源想咋使用咋使用（ps：这就是为啥你的电脑越来越卡，软件开发不考虑性能优化的种种结果）。</p>\n<p>Cookie本身在net core中已经支持，所以不需要引入啥NuGet包。</p>\n<p>新建CookieUtil（不要吐槽我的命名方法，习惯了）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CookieUtil</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 设置本地cookie</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"minutes\"&gt;</span>过期时长，单位：分钟<span class=\"doctag\">&lt;/param&gt;</span>      </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">string</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> minutes = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Response.Cookies.Append(key, <span class=\"keyword\">value</span>, <span class=\"keyword\">new</span> CookieOptions</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Expires = DateTime.Now.AddMinutes(minutes)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 删除指定的cookie</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个地方想判断就判断下，不过内部封装的方法应该是已经做过处理</span></span><br><span class=\"line\">            AprilConfig.HttpCurrent.Response.Cookies.Delete(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 获取cookies</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回对应的值<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCookies</span>(<span class=\"params\"><span class=\"keyword\">string</span> key,<span class=\"keyword\">string</span> defaultValue=<span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Request.Cookies.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">value</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">value</span> = defaultValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>写好之后，老规矩ValuesController走一波。<br><img src=\"/2019/07/10/net-core-cache/10.png\" alt=\"Values\"><br>测试结果：<br><img src=\"/2019/07/10/net-core-cache/11.png\" alt=\"测试结果\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>从创建工程到在线文档，日志管理，缓存机制基本上走了一遍了，下一步，就是数据层的操作，一个工程管理肯定少不了数据的支撑，总不能每次都自己YY数据吧，下一节，<strong>数据库操作</strong>。</p>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>针对Session.SetString的方法没有问题，需要引入一个NuGet包，这个里面包含官方的扩展方法，<strong>Microsoft.AspNetCore.Http.Abstractions</strong>。</p>\n"},{"title":"net core WebApi——定时任务Quartz","date":"2019-09-26T02:08:53.000Z","_content":"\n\n### 前言\n本来打算昨天都开始写这篇，就因为要把小团队的博客整理汇总，一看二哈的博客那么多，一个个复制粘贴肯定麻烦（其实是我自己觉得复制麻烦），所以穿插着写了个小爬虫，后续写差不多了就拿出来晾晾吧（py菜鸡水平）。\n\n之前开发的时候，忽略了记录，等到想写点儿啥跟后台有关的东西的时候，还得一点点回忆，最近是因为同事给我说，\"哎，每个月把数据给我统计下做个界面展示啊\"。一想到每个月我要做次操作就头疼，咦，不对，这不就是写个**定时任务**就搞定了嘛。\n\n### Quartz\n其实在选这个定时器的类库的时候，我在**Hangfire**两者间徘徊，后来是想到不管用什么方法什么工具都是次要的，主要看你怎么用，用到哪，图形界面是需要但不是必要，分秒级别的控制也都是看你自己业务需要，定时器就后台挂起运行就行了没必要让我看见，想操作了再说吧，就这样愉快的决定使用**Quartz**。\n\n首先，依然是在我们Util的工程引入包。\n\n引入完成后，在我们的入口Startup中添加实例的注册声明。\n```csharp\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n            ServiceInjection.ConfigureRepository(services);\n\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n\t\t\t//任务调度\n            services.TryAddSingleton<ISchedulerFactory, StdSchedulerFactory>();\n\t\t}\n```\n\n**SchedulerFactory**任务调度就好比一个公司的老大，**Trigger**就是一个项管，**Job**就是苦逼的码农，老大想要一天搞个app，就跟项管说一句，我要一天后要东西，这时候项管心里就有数了，一天后的那个时间，找到码农，直接剥夺他的代码执行，好了app出来了，苦逼的结束并不意味着真的结束，这老大一看可以啊，好了，以后每天我要一个成品app，如此循环往复，项管不厌其烦，码农换了又换（当然job不会）。\n\n项管还会有多个，每个项管下面可不止一个码农。\n\n> 像这样的情况可能有些夸张，但是类似的情况却真实存在。\n\nok，完了之后，我们来创建一个**MyJob**。\n\n```csharp\n    public class MyJob : IJob\n    {\n        public Task Execute(IJobExecutionContext context)\n        {\n            return Task.Run(() =>\n            {\n                LogUtil.Debug(\"执行MyJob\");\n            });\n        }\n    }\n```\n\n之后我们来写个简单的**QuartzUtil**。\n\n```csharp\n    public class QuartzUtil\n    {\n        private static ISchedulerFactory _schedulerFactory;\n        private static IScheduler _scheduler;\n\n        /// <summary>\n        /// 添加任务\n        /// </summary>\n        /// <param name=\"type\">类</param>\n        /// <param name=\"jobKey\">键</param>\n        /// <param name=\"trigger\">触发器</param>\n        public static async Task Add(Type type, JobKey jobKey, ITrigger trigger = null)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n\n            await _scheduler.Start();\n\n            if (trigger == null)\n            {\n                trigger = TriggerBuilder.Create()\n                    .WithIdentity(\"april.trigger\")\n                    .WithDescription(\"default\")\n                    .WithSimpleSchedule(x=>x.WithMisfireHandlingInstructionFireNow().WithRepeatCount(-1))\n                    .Build();\n            }\n            var job = JobBuilder.Create(type)\n                .WithIdentity(jobKey)\n                .Build();\n\n            await _scheduler.ScheduleJob(job, trigger);          \n        }\n        /// <summary>\n        /// 恢复任务\n        /// </summary>\n        /// <param name=\"jobKey\">键</param>\n        public static async Task Resume(JobKey jobKey)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n            LogUtil.Debug($\"恢复任务{jobKey.Group},{jobKey.Name}\");\n            await _scheduler.ResumeJob(jobKey);\n        }\n        /// <summary>\n        /// 停止任务\n        /// </summary>\n        /// <param name=\"jobKey\">键</param>\n        public static async Task Stop(JobKey jobKey)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n            LogUtil.Debug($\"暂停任务{jobKey.Group},{jobKey.Name}\");\n            await _scheduler.PauseJob(jobKey);\n        }\n        /// <summary>\n        /// 初始化\n        /// </summary>\n        private static void Init()\n        {\n            if (_schedulerFactory == null)\n            {\n                _schedulerFactory = AprilConfig.ServiceProvider.GetService<ISchedulerFactory>();\n            }\n        }\n    }\n```\n触发器的使用，有很多种方式，可以使用简单的执行一次/多久执行一次/循环执行几次等等。\n\n还有可以使用**Cron**表达式：\n\n简单来说，**corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份**，举个例子，就像开头说的，让我每隔一个月执行一次统计，写法就是 0 0 0 1 * ?，当然这就有涉及到什么符号的问题了，这种不需要强记，需要的时候查下就行，推荐一个工具站吧，[Cron校验工具](http://www.bejson.com/othertools/cronvalidate/)。\n\n### 测试\n>感觉我的博客内容好单调，内容框架就是开头，代码，测试，结尾，唉\n\n不过做啥东西，测试少不了，最起码你的东西能用，才说明可行。\n\n我们在**Values**添加一个方法，这里我们5s一执行（懒得等）。\n\n```csharp\n        [HttpGet]\n        [Route(\"QuartzTest\")]\n        public void QuartzTest(int type)\n        {\n            JobKey jobKey = new JobKey(\"demo\",\"group1\");\n            switch (type)\n            {\n                //添加任务\n                case 1:\n                    var trigger = TriggerBuilder.Create()\n                            .WithDescription(\"触发器描述\")\n                            .WithIdentity(\"test\")\n                            //.WithSchedule(CronScheduleBuilder.CronSchedule(\"0 0/30 * * * ? *\").WithMisfireHandlingInstructionDoNothing())\n                            .WithSimpleSchedule(x=>x.WithIntervalInSeconds(5).RepeatForever().WithMisfireHandlingInstructionIgnoreMisfires())\n                            .Build();\n                    QuartzUtil.Add(typeof(MyJob), jobKey, trigger);\n                    break;\n                //暂停任务\n                case 2:\n                    QuartzUtil.Stop(jobKey);\n                    break;\n                //恢复任务\n                case 3:\n                    QuartzUtil.Resume(jobKey);\n                    break;\n            }\n        }\n```\n\n让我们来愉快的运行吧，记得appsettings配置个路径访问白名单。\n\n![测试](net-core-quartz/1.png)\n一番1，2，3输入完之后，我们来看下日志。\n![测试](net-core-quartz/2.png)\n\n- 执行任务--- ok\n- 暂停任务--- ok\n- 恢复任务--- ok\n\n### 问题及解决方法\n\n但是问题出现了，暂停恢复后，连执行了多次（具体看你间隔时间以及你的频率），这个是有点儿怪异，当时我记得这个问题让我鼓捣了好半天，也是各种查资料查方法，但实际呢这个是Quartz的保护机制，为了防止你的操作是因为不可预知的问题导致的，所以有个重做错过的任务，另外我们的代码中触发器也有这个配置**WithMisfireHandlingInstructionIgnoreMisfires**。\n\n我们来去掉这个重做机制并测试。\n\n![测试](net-core-quartz/3.png)\n**CronTrigger**\n\n|规则| 介绍 |\n|--|--|\n| withMisfireHandlingInstructionDoNothing | 不触发立即执行; 等待下次Cron触发频率到达时刻开始按照Cron频率依次执行 |\n| withMisfireHandlingInstructionIgnoreMisfires| 以错过的第一 个频率时间立刻开始执行; 重做错过的所有频率周期后; 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行  |\n| withMisfireHandlingInstructionFireAndProceed| 以当前时间为触发频率立刻触发一次执行; 然后按照Cron频率依次执行 |\n\n**SimpleTrigger**\n\n|规则| 介绍 |\n|--|--|\n| withMisfireHandlingInstructionFireNow| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数;以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n| withMisfireHandlingInstructionIgnoreMisfires| 以错过的第一个频率时间立刻开始执行; 重做错过的所有频率周期;当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率; 共执行RepeatCount+1次  |\n| withMisfireHandlingInstructionNextWithExistingCount| 不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变 |\n| withMisfireHandlingInstructionNowWithExistingCount| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n| withMisfireHandlingInstructionNextWithRemainingCount| 不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变 |\n| withMisfireHandlingInstructionNowWithRemainingCount| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n\n\n配置规则介绍参考：[https://blog.csdn.net/yangshangwei/article/details/78539433](https://blog.csdn.net/yangshangwei/article/details/78539433)\n\n之前在net framework遇到过一个问题，IIS回收问题，网站在20分钟无请求后就停了，任务也紧跟着停了，当时的解决方法是做个windows服务来定时请求网站保持活跃，当然也可以通过禁止回收来保持网站一直运行。\n\nnet core中还没部署运行，如果有相关问题，后续也会补充上来一起交流解决。\n\n### 小结\n定时任务在一个后台系统中一般使用场景还算广泛，主要是sql数据统计，sql/文件备份，定时推送等，具体问题具体分析，**net core 3.0**都已经问世了，学无止境啊。\n\n","source":"_posts/net-core-quartz.md","raw":"---\ntitle: net core WebApi——定时任务Quartz\ndate: 2019-09-26 10:08:53\ntags: net core\ncategories: AprilBlank\n---\n\n\n### 前言\n本来打算昨天都开始写这篇，就因为要把小团队的博客整理汇总，一看二哈的博客那么多，一个个复制粘贴肯定麻烦（其实是我自己觉得复制麻烦），所以穿插着写了个小爬虫，后续写差不多了就拿出来晾晾吧（py菜鸡水平）。\n\n之前开发的时候，忽略了记录，等到想写点儿啥跟后台有关的东西的时候，还得一点点回忆，最近是因为同事给我说，\"哎，每个月把数据给我统计下做个界面展示啊\"。一想到每个月我要做次操作就头疼，咦，不对，这不就是写个**定时任务**就搞定了嘛。\n\n### Quartz\n其实在选这个定时器的类库的时候，我在**Hangfire**两者间徘徊，后来是想到不管用什么方法什么工具都是次要的，主要看你怎么用，用到哪，图形界面是需要但不是必要，分秒级别的控制也都是看你自己业务需要，定时器就后台挂起运行就行了没必要让我看见，想操作了再说吧，就这样愉快的决定使用**Quartz**。\n\n首先，依然是在我们Util的工程引入包。\n\n引入完成后，在我们的入口Startup中添加实例的注册声明。\n```csharp\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n            ServiceInjection.ConfigureRepository(services);\n\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);\n\t\t\t//任务调度\n            services.TryAddSingleton<ISchedulerFactory, StdSchedulerFactory>();\n\t\t}\n```\n\n**SchedulerFactory**任务调度就好比一个公司的老大，**Trigger**就是一个项管，**Job**就是苦逼的码农，老大想要一天搞个app，就跟项管说一句，我要一天后要东西，这时候项管心里就有数了，一天后的那个时间，找到码农，直接剥夺他的代码执行，好了app出来了，苦逼的结束并不意味着真的结束，这老大一看可以啊，好了，以后每天我要一个成品app，如此循环往复，项管不厌其烦，码农换了又换（当然job不会）。\n\n项管还会有多个，每个项管下面可不止一个码农。\n\n> 像这样的情况可能有些夸张，但是类似的情况却真实存在。\n\nok，完了之后，我们来创建一个**MyJob**。\n\n```csharp\n    public class MyJob : IJob\n    {\n        public Task Execute(IJobExecutionContext context)\n        {\n            return Task.Run(() =>\n            {\n                LogUtil.Debug(\"执行MyJob\");\n            });\n        }\n    }\n```\n\n之后我们来写个简单的**QuartzUtil**。\n\n```csharp\n    public class QuartzUtil\n    {\n        private static ISchedulerFactory _schedulerFactory;\n        private static IScheduler _scheduler;\n\n        /// <summary>\n        /// 添加任务\n        /// </summary>\n        /// <param name=\"type\">类</param>\n        /// <param name=\"jobKey\">键</param>\n        /// <param name=\"trigger\">触发器</param>\n        public static async Task Add(Type type, JobKey jobKey, ITrigger trigger = null)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n\n            await _scheduler.Start();\n\n            if (trigger == null)\n            {\n                trigger = TriggerBuilder.Create()\n                    .WithIdentity(\"april.trigger\")\n                    .WithDescription(\"default\")\n                    .WithSimpleSchedule(x=>x.WithMisfireHandlingInstructionFireNow().WithRepeatCount(-1))\n                    .Build();\n            }\n            var job = JobBuilder.Create(type)\n                .WithIdentity(jobKey)\n                .Build();\n\n            await _scheduler.ScheduleJob(job, trigger);          \n        }\n        /// <summary>\n        /// 恢复任务\n        /// </summary>\n        /// <param name=\"jobKey\">键</param>\n        public static async Task Resume(JobKey jobKey)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n            LogUtil.Debug($\"恢复任务{jobKey.Group},{jobKey.Name}\");\n            await _scheduler.ResumeJob(jobKey);\n        }\n        /// <summary>\n        /// 停止任务\n        /// </summary>\n        /// <param name=\"jobKey\">键</param>\n        public static async Task Stop(JobKey jobKey)\n        {\n            Init();\n            _scheduler = await _schedulerFactory.GetScheduler();\n            LogUtil.Debug($\"暂停任务{jobKey.Group},{jobKey.Name}\");\n            await _scheduler.PauseJob(jobKey);\n        }\n        /// <summary>\n        /// 初始化\n        /// </summary>\n        private static void Init()\n        {\n            if (_schedulerFactory == null)\n            {\n                _schedulerFactory = AprilConfig.ServiceProvider.GetService<ISchedulerFactory>();\n            }\n        }\n    }\n```\n触发器的使用，有很多种方式，可以使用简单的执行一次/多久执行一次/循环执行几次等等。\n\n还有可以使用**Cron**表达式：\n\n简单来说，**corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份**，举个例子，就像开头说的，让我每隔一个月执行一次统计，写法就是 0 0 0 1 * ?，当然这就有涉及到什么符号的问题了，这种不需要强记，需要的时候查下就行，推荐一个工具站吧，[Cron校验工具](http://www.bejson.com/othertools/cronvalidate/)。\n\n### 测试\n>感觉我的博客内容好单调，内容框架就是开头，代码，测试，结尾，唉\n\n不过做啥东西，测试少不了，最起码你的东西能用，才说明可行。\n\n我们在**Values**添加一个方法，这里我们5s一执行（懒得等）。\n\n```csharp\n        [HttpGet]\n        [Route(\"QuartzTest\")]\n        public void QuartzTest(int type)\n        {\n            JobKey jobKey = new JobKey(\"demo\",\"group1\");\n            switch (type)\n            {\n                //添加任务\n                case 1:\n                    var trigger = TriggerBuilder.Create()\n                            .WithDescription(\"触发器描述\")\n                            .WithIdentity(\"test\")\n                            //.WithSchedule(CronScheduleBuilder.CronSchedule(\"0 0/30 * * * ? *\").WithMisfireHandlingInstructionDoNothing())\n                            .WithSimpleSchedule(x=>x.WithIntervalInSeconds(5).RepeatForever().WithMisfireHandlingInstructionIgnoreMisfires())\n                            .Build();\n                    QuartzUtil.Add(typeof(MyJob), jobKey, trigger);\n                    break;\n                //暂停任务\n                case 2:\n                    QuartzUtil.Stop(jobKey);\n                    break;\n                //恢复任务\n                case 3:\n                    QuartzUtil.Resume(jobKey);\n                    break;\n            }\n        }\n```\n\n让我们来愉快的运行吧，记得appsettings配置个路径访问白名单。\n\n![测试](net-core-quartz/1.png)\n一番1，2，3输入完之后，我们来看下日志。\n![测试](net-core-quartz/2.png)\n\n- 执行任务--- ok\n- 暂停任务--- ok\n- 恢复任务--- ok\n\n### 问题及解决方法\n\n但是问题出现了，暂停恢复后，连执行了多次（具体看你间隔时间以及你的频率），这个是有点儿怪异，当时我记得这个问题让我鼓捣了好半天，也是各种查资料查方法，但实际呢这个是Quartz的保护机制，为了防止你的操作是因为不可预知的问题导致的，所以有个重做错过的任务，另外我们的代码中触发器也有这个配置**WithMisfireHandlingInstructionIgnoreMisfires**。\n\n我们来去掉这个重做机制并测试。\n\n![测试](net-core-quartz/3.png)\n**CronTrigger**\n\n|规则| 介绍 |\n|--|--|\n| withMisfireHandlingInstructionDoNothing | 不触发立即执行; 等待下次Cron触发频率到达时刻开始按照Cron频率依次执行 |\n| withMisfireHandlingInstructionIgnoreMisfires| 以错过的第一 个频率时间立刻开始执行; 重做错过的所有频率周期后; 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行  |\n| withMisfireHandlingInstructionFireAndProceed| 以当前时间为触发频率立刻触发一次执行; 然后按照Cron频率依次执行 |\n\n**SimpleTrigger**\n\n|规则| 介绍 |\n|--|--|\n| withMisfireHandlingInstructionFireNow| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数;以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n| withMisfireHandlingInstructionIgnoreMisfires| 以错过的第一个频率时间立刻开始执行; 重做错过的所有频率周期;当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率; 共执行RepeatCount+1次  |\n| withMisfireHandlingInstructionNextWithExistingCount| 不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变 |\n| withMisfireHandlingInstructionNowWithExistingCount| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n| withMisfireHandlingInstructionNextWithRemainingCount| 不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变 |\n| withMisfireHandlingInstructionNowWithRemainingCount| 以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值 |\n\n\n配置规则介绍参考：[https://blog.csdn.net/yangshangwei/article/details/78539433](https://blog.csdn.net/yangshangwei/article/details/78539433)\n\n之前在net framework遇到过一个问题，IIS回收问题，网站在20分钟无请求后就停了，任务也紧跟着停了，当时的解决方法是做个windows服务来定时请求网站保持活跃，当然也可以通过禁止回收来保持网站一直运行。\n\nnet core中还没部署运行，如果有相关问题，后续也会补充上来一起交流解决。\n\n### 小结\n定时任务在一个后台系统中一般使用场景还算广泛，主要是sql数据统计，sql/文件备份，定时推送等，具体问题具体分析，**net core 3.0**都已经问世了，学无止境啊。\n\n","slug":"net-core-quartz","published":1,"updated":"2019-09-30T05:46:23.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3l003n9sv7ljahxjfa","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本来打算昨天都开始写这篇，就因为要把小团队的博客整理汇总，一看二哈的博客那么多，一个个复制粘贴肯定麻烦（其实是我自己觉得复制麻烦），所以穿插着写了个小爬虫，后续写差不多了就拿出来晾晾吧（py菜鸡水平）。</p>\n<p>之前开发的时候，忽略了记录，等到想写点儿啥跟后台有关的东西的时候，还得一点点回忆，最近是因为同事给我说，”哎，每个月把数据给我统计下做个界面展示啊”。一想到每个月我要做次操作就头疼，咦，不对，这不就是写个<strong>定时任务</strong>就搞定了嘛。</p>\n<h3 id=\"Quartz\"><a href=\"#Quartz\" class=\"headerlink\" title=\"Quartz\"></a>Quartz</h3><p>其实在选这个定时器的类库的时候，我在<strong>Hangfire</strong>两者间徘徊，后来是想到不管用什么方法什么工具都是次要的，主要看你怎么用，用到哪，图形界面是需要但不是必要，分秒级别的控制也都是看你自己业务需要，定时器就后台挂起运行就行了没必要让我看见，想操作了再说吧，就这样愉快的决定使用<strong>Quartz</strong>。</p>\n<p>首先，依然是在我们Util的工程引入包。</p>\n<p>引入完成后，在我们的入口Startup中添加实例的注册声明。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          ServiceInjection.ConfigureRepository(services);</span><br><span class=\"line\"></span><br><span class=\"line\">          services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">\t<span class=\"comment\">//任务调度</span></span><br><span class=\"line\">          services.TryAddSingleton&lt;ISchedulerFactory, StdSchedulerFactory&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SchedulerFactory</strong>任务调度就好比一个公司的老大，<strong>Trigger</strong>就是一个项管，<strong>Job</strong>就是苦逼的码农，老大想要一天搞个app，就跟项管说一句，我要一天后要东西，这时候项管心里就有数了，一天后的那个时间，找到码农，直接剥夺他的代码执行，好了app出来了，苦逼的结束并不意味着真的结束，这老大一看可以啊，好了，以后每天我要一个成品app，如此循环往复，项管不厌其烦，码农换了又换（当然job不会）。</p>\n<p>项管还会有多个，每个项管下面可不止一个码农。</p>\n<blockquote>\n<p>像这样的情况可能有些夸张，但是类似的情况却真实存在。</p>\n</blockquote>\n<p>ok，完了之后，我们来创建一个<strong>MyJob</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyJob</span> : <span class=\"title\">IJob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Execute</span>(<span class=\"params\">IJobExecutionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.Run(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LogUtil.Debug(<span class=\"string\">\"执行MyJob\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们来写个简单的<strong>QuartzUtil</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">QuartzUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISchedulerFactory _schedulerFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IScheduler _scheduler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>类<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"trigger\"&gt;</span>触发器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Add</span>(<span class=\"params\">Type type, JobKey jobKey, ITrigger trigger = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trigger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            trigger = TriggerBuilder.Create()</span><br><span class=\"line\">                .WithIdentity(<span class=\"string\">\"april.trigger\"</span>)</span><br><span class=\"line\">                .WithDescription(<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\">                .WithSimpleSchedule(x=&gt;x.WithMisfireHandlingInstructionFireNow().WithRepeatCount(<span class=\"number\">-1</span>))</span><br><span class=\"line\">                .Build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> job = JobBuilder.Create(type)</span><br><span class=\"line\">            .WithIdentity(jobKey)</span><br><span class=\"line\">            .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.ScheduleJob(job, trigger);          </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 恢复任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Resume</span>(<span class=\"params\">JobKey jobKey</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"恢复任务<span class=\"subst\">&#123;jobKey.Group&#125;</span>,<span class=\"subst\">&#123;jobKey.Name&#125;</span>\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.ResumeJob(jobKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 停止任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Stop</span>(<span class=\"params\">JobKey jobKey</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"暂停任务<span class=\"subst\">&#123;jobKey.Group&#125;</span>,<span class=\"subst\">&#123;jobKey.Name&#125;</span>\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.PauseJob(jobKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 初始化</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_schedulerFactory == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _schedulerFactory = AprilConfig.ServiceProvider.GetService&lt;ISchedulerFactory&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>触发器的使用，有很多种方式，可以使用简单的执行一次/多久执行一次/循环执行几次等等。</p>\n<p>还有可以使用<strong>Cron</strong>表达式：</p>\n<p>简单来说，<strong>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</strong>，举个例子，就像开头说的，让我每隔一个月执行一次统计，写法就是 0 0 0 1 * ?，当然这就有涉及到什么符号的问题了，这种不需要强记，需要的时候查下就行，推荐一个工具站吧，<a href=\"http://www.bejson.com/othertools/cronvalidate/\" target=\"_blank\" rel=\"noopener\">Cron校验工具</a>。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>感觉我的博客内容好单调，内容框架就是开头，代码，测试，结尾，唉</p>\n</blockquote>\n<p>不过做啥东西，测试少不了，最起码你的东西能用，才说明可行。</p>\n<p>我们在<strong>Values</strong>添加一个方法，这里我们5s一执行（懒得等）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"QuartzTest\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">QuartzTest</span>(<span class=\"params\"><span class=\"keyword\">int</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    JobKey jobKey = <span class=\"keyword\">new</span> JobKey(<span class=\"string\">\"demo\"</span>,<span class=\"string\">\"group1\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> trigger = TriggerBuilder.Create()</span><br><span class=\"line\">                    .WithDescription(<span class=\"string\">\"触发器描述\"</span>)</span><br><span class=\"line\">                    .WithIdentity(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//.WithSchedule(CronScheduleBuilder.CronSchedule(\"0 0/30 * * * ? *\").WithMisfireHandlingInstructionDoNothing())</span></span><br><span class=\"line\">                    .WithSimpleSchedule(x=&gt;x.WithIntervalInSeconds(<span class=\"number\">5</span>).RepeatForever().WithMisfireHandlingInstructionIgnoreMisfires())</span><br><span class=\"line\">                    .Build();</span><br><span class=\"line\">            QuartzUtil.Add(<span class=\"keyword\">typeof</span>(MyJob), jobKey, trigger);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//暂停任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            QuartzUtil.Stop(jobKey);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//恢复任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            QuartzUtil.Resume(jobKey);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>让我们来愉快的运行吧，记得appsettings配置个路径访问白名单。</p>\n<p><img src=\"/2019/09/26/net-core-quartz/1.png\" alt=\"测试\"><br>一番1，2，3输入完之后，我们来看下日志。<br><img src=\"/2019/09/26/net-core-quartz/2.png\" alt=\"测试\"></p>\n<ul>\n<li>执行任务— ok</li>\n<li>暂停任务— ok</li>\n<li>恢复任务— ok</li>\n</ul>\n<h3 id=\"问题及解决方法\"><a href=\"#问题及解决方法\" class=\"headerlink\" title=\"问题及解决方法\"></a>问题及解决方法</h3><p>但是问题出现了，暂停恢复后，连执行了多次（具体看你间隔时间以及你的频率），这个是有点儿怪异，当时我记得这个问题让我鼓捣了好半天，也是各种查资料查方法，但实际呢这个是Quartz的保护机制，为了防止你的操作是因为不可预知的问题导致的，所以有个重做错过的任务，另外我们的代码中触发器也有这个配置<strong>WithMisfireHandlingInstructionIgnoreMisfires</strong>。</p>\n<p>我们来去掉这个重做机制并测试。</p>\n<p><img src=\"/2019/09/26/net-core-quartz/3.png\" alt=\"测试\"><br><strong>CronTrigger</strong></p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>withMisfireHandlingInstructionDoNothing</td>\n<td>不触发立即执行; 等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionIgnoreMisfires</td>\n<td>以错过的第一 个频率时间立刻开始执行; 重做错过的所有频率周期后; 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionFireAndProceed</td>\n<td>以当前时间为触发频率立刻触发一次执行; 然后按照Cron频率依次执行</td>\n</tr>\n</tbody></table>\n<p><strong>SimpleTrigger</strong></p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>withMisfireHandlingInstructionFireNow</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数;以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionIgnoreMisfires</td>\n<td>以错过的第一个频率时间立刻开始执行; 重做错过的所有频率周期;当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率; 共执行RepeatCount+1次</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNextWithExistingCount</td>\n<td>不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNowWithExistingCount</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNextWithRemainingCount</td>\n<td>不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNowWithRemainingCount</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n</tbody></table>\n<p>配置规则介绍参考：<a href=\"https://blog.csdn.net/yangshangwei/article/details/78539433\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yangshangwei/article/details/78539433</a></p>\n<p>之前在net framework遇到过一个问题，IIS回收问题，网站在20分钟无请求后就停了，任务也紧跟着停了，当时的解决方法是做个windows服务来定时请求网站保持活跃，当然也可以通过禁止回收来保持网站一直运行。</p>\n<p>net core中还没部署运行，如果有相关问题，后续也会补充上来一起交流解决。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>定时任务在一个后台系统中一般使用场景还算广泛，主要是sql数据统计，sql/文件备份，定时推送等，具体问题具体分析，<strong>net core 3.0</strong>都已经问世了，学无止境啊。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本来打算昨天都开始写这篇，就因为要把小团队的博客整理汇总，一看二哈的博客那么多，一个个复制粘贴肯定麻烦（其实是我自己觉得复制麻烦），所以穿插着写了个小爬虫，后续写差不多了就拿出来晾晾吧（py菜鸡水平）。</p>\n<p>之前开发的时候，忽略了记录，等到想写点儿啥跟后台有关的东西的时候，还得一点点回忆，最近是因为同事给我说，”哎，每个月把数据给我统计下做个界面展示啊”。一想到每个月我要做次操作就头疼，咦，不对，这不就是写个<strong>定时任务</strong>就搞定了嘛。</p>\n<h3 id=\"Quartz\"><a href=\"#Quartz\" class=\"headerlink\" title=\"Quartz\"></a>Quartz</h3><p>其实在选这个定时器的类库的时候，我在<strong>Hangfire</strong>两者间徘徊，后来是想到不管用什么方法什么工具都是次要的，主要看你怎么用，用到哪，图形界面是需要但不是必要，分秒级别的控制也都是看你自己业务需要，定时器就后台挂起运行就行了没必要让我看见，想操作了再说吧，就这样愉快的决定使用<strong>Quartz</strong>。</p>\n<p>首先，依然是在我们Util的工程引入包。</p>\n<p>引入完成后，在我们的入口Startup中添加实例的注册声明。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          ServiceInjection.ConfigureRepository(services);</span><br><span class=\"line\"></span><br><span class=\"line\">          services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class=\"line\">\t<span class=\"comment\">//任务调度</span></span><br><span class=\"line\">          services.TryAddSingleton&lt;ISchedulerFactory, StdSchedulerFactory&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SchedulerFactory</strong>任务调度就好比一个公司的老大，<strong>Trigger</strong>就是一个项管，<strong>Job</strong>就是苦逼的码农，老大想要一天搞个app，就跟项管说一句，我要一天后要东西，这时候项管心里就有数了，一天后的那个时间，找到码农，直接剥夺他的代码执行，好了app出来了，苦逼的结束并不意味着真的结束，这老大一看可以啊，好了，以后每天我要一个成品app，如此循环往复，项管不厌其烦，码农换了又换（当然job不会）。</p>\n<p>项管还会有多个，每个项管下面可不止一个码农。</p>\n<blockquote>\n<p>像这样的情况可能有些夸张，但是类似的情况却真实存在。</p>\n</blockquote>\n<p>ok，完了之后，我们来创建一个<strong>MyJob</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyJob</span> : <span class=\"title\">IJob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Execute</span>(<span class=\"params\">IJobExecutionContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.Run(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LogUtil.Debug(<span class=\"string\">\"执行MyJob\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们来写个简单的<strong>QuartzUtil</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">QuartzUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISchedulerFactory _schedulerFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> IScheduler _scheduler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 添加任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"type\"&gt;</span>类<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"trigger\"&gt;</span>触发器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Add</span>(<span class=\"params\">Type type, JobKey jobKey, ITrigger trigger = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (trigger == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            trigger = TriggerBuilder.Create()</span><br><span class=\"line\">                .WithIdentity(<span class=\"string\">\"april.trigger\"</span>)</span><br><span class=\"line\">                .WithDescription(<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\">                .WithSimpleSchedule(x=&gt;x.WithMisfireHandlingInstructionFireNow().WithRepeatCount(<span class=\"number\">-1</span>))</span><br><span class=\"line\">                .Build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> job = JobBuilder.Create(type)</span><br><span class=\"line\">            .WithIdentity(jobKey)</span><br><span class=\"line\">            .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.ScheduleJob(job, trigger);          </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 恢复任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Resume</span>(<span class=\"params\">JobKey jobKey</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"恢复任务<span class=\"subst\">&#123;jobKey.Group&#125;</span>,<span class=\"subst\">&#123;jobKey.Name&#125;</span>\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.ResumeJob(jobKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 停止任务</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"jobKey\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Stop</span>(<span class=\"params\">JobKey jobKey</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Init();</span><br><span class=\"line\">        _scheduler = <span class=\"keyword\">await</span> _schedulerFactory.GetScheduler();</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">$\"暂停任务<span class=\"subst\">&#123;jobKey.Group&#125;</span>,<span class=\"subst\">&#123;jobKey.Name&#125;</span>\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _scheduler.PauseJob(jobKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 初始化</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_schedulerFactory == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _schedulerFactory = AprilConfig.ServiceProvider.GetService&lt;ISchedulerFactory&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>触发器的使用，有很多种方式，可以使用简单的执行一次/多久执行一次/循环执行几次等等。</p>\n<p>还有可以使用<strong>Cron</strong>表达式：</p>\n<p>简单来说，<strong>corn从左到右（用空格隔开）：秒 分 小时 月份中的日期 月份 星期中的日期 年份</strong>，举个例子，就像开头说的，让我每隔一个月执行一次统计，写法就是 0 0 0 1 * ?，当然这就有涉及到什么符号的问题了，这种不需要强记，需要的时候查下就行，推荐一个工具站吧，<a href=\"http://www.bejson.com/othertools/cronvalidate/\" target=\"_blank\" rel=\"noopener\">Cron校验工具</a>。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><blockquote>\n<p>感觉我的博客内容好单调，内容框架就是开头，代码，测试，结尾，唉</p>\n</blockquote>\n<p>不过做啥东西，测试少不了，最起码你的东西能用，才说明可行。</p>\n<p>我们在<strong>Values</strong>添加一个方法，这里我们5s一执行（懒得等）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"QuartzTest\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">QuartzTest</span>(<span class=\"params\"><span class=\"keyword\">int</span> type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    JobKey jobKey = <span class=\"keyword\">new</span> JobKey(<span class=\"string\">\"demo\"</span>,<span class=\"string\">\"group1\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">var</span> trigger = TriggerBuilder.Create()</span><br><span class=\"line\">                    .WithDescription(<span class=\"string\">\"触发器描述\"</span>)</span><br><span class=\"line\">                    .WithIdentity(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">                    <span class=\"comment\">//.WithSchedule(CronScheduleBuilder.CronSchedule(\"0 0/30 * * * ? *\").WithMisfireHandlingInstructionDoNothing())</span></span><br><span class=\"line\">                    .WithSimpleSchedule(x=&gt;x.WithIntervalInSeconds(<span class=\"number\">5</span>).RepeatForever().WithMisfireHandlingInstructionIgnoreMisfires())</span><br><span class=\"line\">                    .Build();</span><br><span class=\"line\">            QuartzUtil.Add(<span class=\"keyword\">typeof</span>(MyJob), jobKey, trigger);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//暂停任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            QuartzUtil.Stop(jobKey);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//恢复任务</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            QuartzUtil.Resume(jobKey);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>让我们来愉快的运行吧，记得appsettings配置个路径访问白名单。</p>\n<p><img src=\"/2019/09/26/net-core-quartz/1.png\" alt=\"测试\"><br>一番1，2，3输入完之后，我们来看下日志。<br><img src=\"/2019/09/26/net-core-quartz/2.png\" alt=\"测试\"></p>\n<ul>\n<li>执行任务— ok</li>\n<li>暂停任务— ok</li>\n<li>恢复任务— ok</li>\n</ul>\n<h3 id=\"问题及解决方法\"><a href=\"#问题及解决方法\" class=\"headerlink\" title=\"问题及解决方法\"></a>问题及解决方法</h3><p>但是问题出现了，暂停恢复后，连执行了多次（具体看你间隔时间以及你的频率），这个是有点儿怪异，当时我记得这个问题让我鼓捣了好半天，也是各种查资料查方法，但实际呢这个是Quartz的保护机制，为了防止你的操作是因为不可预知的问题导致的，所以有个重做错过的任务，另外我们的代码中触发器也有这个配置<strong>WithMisfireHandlingInstructionIgnoreMisfires</strong>。</p>\n<p>我们来去掉这个重做机制并测试。</p>\n<p><img src=\"/2019/09/26/net-core-quartz/3.png\" alt=\"测试\"><br><strong>CronTrigger</strong></p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>withMisfireHandlingInstructionDoNothing</td>\n<td>不触发立即执行; 等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionIgnoreMisfires</td>\n<td>以错过的第一 个频率时间立刻开始执行; 重做错过的所有频率周期后; 当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionFireAndProceed</td>\n<td>以当前时间为触发频率立刻触发一次执行; 然后按照Cron频率依次执行</td>\n</tr>\n</tbody></table>\n<p><strong>SimpleTrigger</strong></p>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>withMisfireHandlingInstructionFireNow</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数;以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionIgnoreMisfires</td>\n<td>以错过的第一个频率时间立刻开始执行; 重做错过的所有频率周期;当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率; 共执行RepeatCount+1次</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNextWithExistingCount</td>\n<td>不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNowWithExistingCount</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNextWithRemainingCount</td>\n<td>不触发立即执行; 等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数; 以startTime为基准计算周期频率，并得到FinalTime; 即使中间出现pause，resume以后保持FinalTime时间不变</td>\n</tr>\n<tr>\n<td>withMisfireHandlingInstructionNowWithRemainingCount</td>\n<td>以当前时间为触发频率立即触发执行; 执行至FinalTIme的剩余周期次数; 以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到; 调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</td>\n</tr>\n</tbody></table>\n<p>配置规则介绍参考：<a href=\"https://blog.csdn.net/yangshangwei/article/details/78539433\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yangshangwei/article/details/78539433</a></p>\n<p>之前在net framework遇到过一个问题，IIS回收问题，网站在20分钟无请求后就停了，任务也紧跟着停了，当时的解决方法是做个windows服务来定时请求网站保持活跃，当然也可以通过禁止回收来保持网站一直运行。</p>\n<p>net core中还没部署运行，如果有相关问题，后续也会补充上来一起交流解决。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>定时任务在一个后台系统中一般使用场景还算广泛，主要是sql数据统计，sql/文件备份，定时推送等，具体问题具体分析，<strong>net core 3.0</strong>都已经问世了，学无止境啊。</p>\n"},{"title":"net core WebApi——尝试企业微信来开发企业内部应用","date":"2019-09-02T08:37:06.000Z","_content":"\n\n### 前言\n这几天忙活着别的东西，耽误了很长时间，从文件操作完了之后就在考虑着下一步鼓捣点儿啥，因为最开始的业务开发就是企业微信相关的，这刚好来做个内部应用的小例子玩玩。\n\n### 企业微信\n前身是企业号，当时微信主推的还是公众号与服务号，后续战略考虑到企业的OA了（当然还是跟某个抢市场），企业号应该是在16年还是具体啥时候出的，刚出的时候也是问题不断一直在修复更新，最近这两年基本上没咋关注企业微信了，也都是偶尔上去看看有没有新东西啊什么的，不过不得不说，在这几年的成长中已经修复逐渐成为一个不错的产品了（大厂的效率还是有的），相对于公众号的开发，为什么我选这个作为例子呢，因为企业微信我可以通过个人来使用（注册的早，现在不清楚注册流程，主要看是否需要企业认证），个人开发者在不论啥时候啥平台都或多或少有些不友好（当然，认证了说明你是个好人，为了信息安全，都懂）。\n### 开始\n注册企业微信的流程我就不多说了，直接说注册完成之后，我们来看下这个界面，标注的就是我们需要的关键参数。\n![企业微信](net-core-qywx-application/1.png)\n记好这个东西之后，我们转到**应用管理**。\n![企业微信](net-core-qywx-application/2.png)\n这个创建就是你添张图片打个名字而已，不多说，创建完成之后我们来看下图的标记。\n![企业微信](net-core-qywx-application/3.png)\n记好这两个参数，OK，下来我们就来看[API](https://work.weixin.qq.com/api/doc#90000/90003/90487)吧，这里我只是介绍下消息推送。\n微信等相关的第三方开发大致流程都类似，如下：\n1. 注册账号（这不废话么）\n2. 账号认证（为了权限，当然企业微信内部应用不需要）\n3. 服务域名确定好\n4. AppID、Secret等等的配置（为了accesstoken）\n5. 几乎所有的接口都是先获取accesstoken，相当于你在微信的登录\n6. 根据接口文档来传参啊获取回调啊获取事件等等\n7. 根据返回值来看看错误信息\n\n> 我这里不做服务端，只是写个示例，需要服务端什么的开发之类的可以给我联系，互相学习。\n\n首先，在我们的**Util**新建一个类**QyThirdUtil**（名字感觉起的好没水平，玩游戏止于起名字，别人都10级了，我还在想名字），先把我们需要的配置信息搞了。\n```csharp\n\t\tprivate static string _CorpID = string.Empty;\n        private static string _Secret = string.Empty;\n        private static string _AgentID = string.Empty;\n        /// <summary>\n        /// 企业微信id\n        /// </summary>\n        public static string CorpID\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_CorpID))\n                {\n                    _CorpID = AprilConfig.Configuration[\"QyThird:CorpID\"];\n                }\n                return _CorpID;\n            }\n        }\n        /// <summary>\n        /// 企业微信应用秘钥\n        /// </summary>\n        public static string Secret\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_Secret))\n                {\n                    _Secret = AprilConfig.Configuration[\"QyThird:Secret\"];\n                }\n                return _Secret;\n            }\n        }\n        /// <summary>\n        /// 企业微信应用id\n        /// </summary>\n        public static string AgentID\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_Secret))\n                {\n                    _AgentID = AprilConfig.Configuration[\"QyThird:AgentID\"];\n                }\n                return _AgentID;\n            }\n        }\n```\n然后我们来划分下方法，我们需要获取accesstoken，需要执行发送消息的方法。\n```csharp\n\t\t/// <summary>\n        /// 获取AccessToken\n        /// </summary>\n        /// <returns></returns>\n        public static string GetAccessToken()\n        {\n            QyAccessToken accessToken = null;\n            bool isGet = false;\n            if (CacheUtil.Exists(\"QyAccessToken\"))\n            {\n                accessToken = CacheUtil.Get<QyAccessToken>(\"QyAccessToken\");\n                if (accessToken.Expire_Time >= DateTime.Now.AddMinutes(1))\n                {\n                    isGet = true;\n                }\n            }\n            if (!isGet)\n            {\n                string url = $\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={CorpID}&corpsecret={Secret}\";\n                //请求获取\n                string res = RequestUtil.HttpGet(url);\n                accessToken = JsonConvert.DeserializeObject<QyAccessToken>(res);\n                if (accessToken != null && accessToken.ErrCode == 0)\n                {\n                    accessToken.Expire_Time = DateTime.Now.AddSeconds(accessToken.Expires_In);\n                    CacheUtil.Set(\"QyAccessToken\", accessToken, new TimeSpan(2, 0, 0));\n                }\n                else\n                {\n                    LogUtil.Error($\"获取accesstoken失败——{accessToken.ErrCode},{accessToken.ErrMsg}\");\n                }\n            }\n\n            return accessToken.Access_Token;\n        }\n```\n这里用到了两个地方，一个是微信端回调的对象实例**QyAccessToken**，需要的朋友可以在源码里cv，我这里就不贴出来了。\n\n另一个是HttpClient的简单封装请求方法**RequestUtil**，看了有些博客说HttpClient的生命周期之类的，有推荐直接实例化一个私有静态的，也有做工厂模式创建的，没细究，这块儿要多注意下。\n```csharp\n\tpublic class RequestUtil\n    {\n\n        /// <summary>\n        /// 发起POST同步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <param name=\"postData\">请求数据</param>\n        /// <param name=\"contentType\">数据类型</param>  \n        /// <param name=\"timeOut\">超时时间</param>  \n        /// <returns></returns>\n        public static string HttpPost(string url, string postData = null, string contentType = null, int timeOut = 30)\n        {\n            if (string.IsNullOrEmpty(postData))\n            {\n                postData = \"\";\n            }\n            using (HttpClient client = new HttpClient())\n            {\n                client.Timeout = new TimeSpan(0, 0, timeOut);\n                using (HttpContent httpContent = new StringContent(postData, Encoding.UTF8))\n                {\n                    if (contentType != null)\n                        httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);\n\n                    HttpResponseMessage response = client.PostAsync(url, httpContent).Result;\n                    return response.Content.ReadAsStringAsync().Result;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 发起POST异步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <param name=\"postData\">请求数据</param>\n        /// <param name=\"contentType\">数据类型</param>\n        /// <param name=\"timeOut\">超时时间</param>      \n        /// <returns></returns>\n        public static async Task<string> HttpPostAsync(string url, string postData = null, string contentType = null, int timeOut = 30)\n        {\n            if (string.IsNullOrEmpty(postData))\n            {\n                postData = \"\";\n            }\n            using (HttpClient client = new HttpClient())\n            {\n                client.Timeout = new TimeSpan(0, 0, timeOut);\n                using (HttpContent httpContent = new StringContent(postData, Encoding.UTF8))\n                {\n                    if (contentType != null)\n                        httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);\n\n                    HttpResponseMessage response = await client.PostAsync(url, httpContent);\n                    return await response.Content.ReadAsStringAsync();\n                }\n            }\n        }\n\n        /// <summary>\n        /// 发起GET同步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <returns></returns>\n        public static string HttpGet(string url)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                return client.GetStringAsync(url).Result;\n            }\n        }\n\n        /// <summary>\n        /// 发起GET异步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <returns></returns>\n        public static async Task<string> HttpGetAsync(string url)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                return await response.Content.ReadAsStringAsync();\n            }\n        }\n    }\n```\n\n然后我们来写个发送消息的方法**SendMessage**，这里我只写了下普通文本推送。\n```csharp\n\t\t/// <summary>\n        /// 消息推送\n        /// </summary>\n        /// <param name=\"content\">文本内容</param>\n        /// <param name=\"range\">推送范围</param>\n        /// <param name=\"messageType\">消息类型</param>\n        /// <returns></returns>\n        public static bool SendMessage(string content, MessageRange range, AprilEnums.MessageType messageType)\n        {\n            bool isSend = false;\n            if (string.IsNullOrEmpty(content) || content.Length > 2048 || range==null)\n            {\n                return false;\n            }\n            string accessToken = GetAccessToken();\n            if (string.IsNullOrEmpty(accessToken))\n            {\n                return false;\n            }\n            string url = $\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={accessToken}\";\n            StringBuilder data = new StringBuilder();\n            bool isVaildRange = false;\n            if (range.IsAll)\n            {\n                data.Append($\"\\\"touser\\\":\\\"@all\\\"\");\n                isVaildRange = true;\n            }\n            else\n            {\n                if (range.Users != null && range.Users.Count > 0)\n                {\n                    data.AppendFormat(\"\\\"touser\\\" : {0}\", GetRangeValue(range.Users));\n                    isVaildRange = true;\n                }\n\n                if (range.Tags != null && range.Tags.Count > 0)\n                {\n                    if (data.Length > 0)\n                    {\n                        data.Append(\",\");\n                    }\n                    data.AppendFormat(\"\\\"totag\\\" : {0}\", GetRangeValue(range.Tags));\n                    isVaildRange = true;\n                }\n\n                if (range.Departments != null && range.Departments.Count > 0)\n                {\n                    if (data.Length > 0)\n                    {\n                        data.Append(\",\");\n                    }\n                    data.AppendFormat(\"\\\"totag\\\" : {0}\", GetRangeValue(range.Departments));\n                    isVaildRange = true;\n                }\n            }\n            if (!isVaildRange)\n            {\n                //没有发送范围\n                return false;\n            }\n            data.AppendFormat(\",\\\"msgtype\\\":\\\"{0}\\\"\", GetMessageType(messageType));\n            data.AppendFormat(\",\\\"agentid\\\":\\\"{0}\\\"\", AgentID);\n            data.Append(\",\\\"text\\\": {\");\n            data.AppendFormat(\"\\\"content\\\":\\\"{0}\\\"\", content);\n            data.Insert(0, \"{\");\n            data.Append(\"}}\");\n            LogUtil.Debug($\"获取到发送消息请求：{data.ToString()}\");\n            string res = RequestUtil.HttpPost(url, data.ToString(), \"application/json\");\n            LogUtil.Debug($\"获取到发送消息回调：{res}\");\n\n            return false;\n        }\n```\n简单说下消息推送，第一个就是你的推送类型，是普通文本还是啥（文档都有，我这净扯淡），然后就是你的范围，再然后就是你的推送内容了，当然根据不同的推送类型你的内容参数也不同，需要进一步封装的朋友可以去看下API。\n\n### 测试\n我们在控制器中（不再说**Values**了）加上消息推送的测试，这里的范围可以在你自己的通讯录中查看。\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n        \t//…\n            MessageRange range = new MessageRange();\n            range.Users = new List<string>();\n            range.Users.Add(\"10001\");\n            QyThridUtil.SendMessage(\"我就是来测试\", range, AprilEnums.MessageType.Text);\n            //…\n        }\n```\n\n![测试](net-core-qywx-application/4.png)\n\n![测试](net-core-qywx-application/5.png)\n### 小结\n写到这里基本上都结束了，为什么我特意拿出来企业微信的内部应用来写这篇呢，其实是做下这个消息推送，以后的自己的工程就可以写个这个然后做异常警告之类的东西，这样想想这篇就不是废话了，编程的奇淫技巧（咳咳，乐趣，乐趣）就在于此，代码自己敲，东西自己组，全在于你自己怎么玩了。","source":"_posts/net-core-qywx-application.md","raw":"---\ntitle: net core WebApi——尝试企业微信来开发企业内部应用\ndate: 2019-09-02 16:37:06\ntags: net core\ncategories: AprilBlank\n---\n\n\n### 前言\n这几天忙活着别的东西，耽误了很长时间，从文件操作完了之后就在考虑着下一步鼓捣点儿啥，因为最开始的业务开发就是企业微信相关的，这刚好来做个内部应用的小例子玩玩。\n\n### 企业微信\n前身是企业号，当时微信主推的还是公众号与服务号，后续战略考虑到企业的OA了（当然还是跟某个抢市场），企业号应该是在16年还是具体啥时候出的，刚出的时候也是问题不断一直在修复更新，最近这两年基本上没咋关注企业微信了，也都是偶尔上去看看有没有新东西啊什么的，不过不得不说，在这几年的成长中已经修复逐渐成为一个不错的产品了（大厂的效率还是有的），相对于公众号的开发，为什么我选这个作为例子呢，因为企业微信我可以通过个人来使用（注册的早，现在不清楚注册流程，主要看是否需要企业认证），个人开发者在不论啥时候啥平台都或多或少有些不友好（当然，认证了说明你是个好人，为了信息安全，都懂）。\n### 开始\n注册企业微信的流程我就不多说了，直接说注册完成之后，我们来看下这个界面，标注的就是我们需要的关键参数。\n![企业微信](net-core-qywx-application/1.png)\n记好这个东西之后，我们转到**应用管理**。\n![企业微信](net-core-qywx-application/2.png)\n这个创建就是你添张图片打个名字而已，不多说，创建完成之后我们来看下图的标记。\n![企业微信](net-core-qywx-application/3.png)\n记好这两个参数，OK，下来我们就来看[API](https://work.weixin.qq.com/api/doc#90000/90003/90487)吧，这里我只是介绍下消息推送。\n微信等相关的第三方开发大致流程都类似，如下：\n1. 注册账号（这不废话么）\n2. 账号认证（为了权限，当然企业微信内部应用不需要）\n3. 服务域名确定好\n4. AppID、Secret等等的配置（为了accesstoken）\n5. 几乎所有的接口都是先获取accesstoken，相当于你在微信的登录\n6. 根据接口文档来传参啊获取回调啊获取事件等等\n7. 根据返回值来看看错误信息\n\n> 我这里不做服务端，只是写个示例，需要服务端什么的开发之类的可以给我联系，互相学习。\n\n首先，在我们的**Util**新建一个类**QyThirdUtil**（名字感觉起的好没水平，玩游戏止于起名字，别人都10级了，我还在想名字），先把我们需要的配置信息搞了。\n```csharp\n\t\tprivate static string _CorpID = string.Empty;\n        private static string _Secret = string.Empty;\n        private static string _AgentID = string.Empty;\n        /// <summary>\n        /// 企业微信id\n        /// </summary>\n        public static string CorpID\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_CorpID))\n                {\n                    _CorpID = AprilConfig.Configuration[\"QyThird:CorpID\"];\n                }\n                return _CorpID;\n            }\n        }\n        /// <summary>\n        /// 企业微信应用秘钥\n        /// </summary>\n        public static string Secret\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_Secret))\n                {\n                    _Secret = AprilConfig.Configuration[\"QyThird:Secret\"];\n                }\n                return _Secret;\n            }\n        }\n        /// <summary>\n        /// 企业微信应用id\n        /// </summary>\n        public static string AgentID\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_Secret))\n                {\n                    _AgentID = AprilConfig.Configuration[\"QyThird:AgentID\"];\n                }\n                return _AgentID;\n            }\n        }\n```\n然后我们来划分下方法，我们需要获取accesstoken，需要执行发送消息的方法。\n```csharp\n\t\t/// <summary>\n        /// 获取AccessToken\n        /// </summary>\n        /// <returns></returns>\n        public static string GetAccessToken()\n        {\n            QyAccessToken accessToken = null;\n            bool isGet = false;\n            if (CacheUtil.Exists(\"QyAccessToken\"))\n            {\n                accessToken = CacheUtil.Get<QyAccessToken>(\"QyAccessToken\");\n                if (accessToken.Expire_Time >= DateTime.Now.AddMinutes(1))\n                {\n                    isGet = true;\n                }\n            }\n            if (!isGet)\n            {\n                string url = $\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid={CorpID}&corpsecret={Secret}\";\n                //请求获取\n                string res = RequestUtil.HttpGet(url);\n                accessToken = JsonConvert.DeserializeObject<QyAccessToken>(res);\n                if (accessToken != null && accessToken.ErrCode == 0)\n                {\n                    accessToken.Expire_Time = DateTime.Now.AddSeconds(accessToken.Expires_In);\n                    CacheUtil.Set(\"QyAccessToken\", accessToken, new TimeSpan(2, 0, 0));\n                }\n                else\n                {\n                    LogUtil.Error($\"获取accesstoken失败——{accessToken.ErrCode},{accessToken.ErrMsg}\");\n                }\n            }\n\n            return accessToken.Access_Token;\n        }\n```\n这里用到了两个地方，一个是微信端回调的对象实例**QyAccessToken**，需要的朋友可以在源码里cv，我这里就不贴出来了。\n\n另一个是HttpClient的简单封装请求方法**RequestUtil**，看了有些博客说HttpClient的生命周期之类的，有推荐直接实例化一个私有静态的，也有做工厂模式创建的，没细究，这块儿要多注意下。\n```csharp\n\tpublic class RequestUtil\n    {\n\n        /// <summary>\n        /// 发起POST同步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <param name=\"postData\">请求数据</param>\n        /// <param name=\"contentType\">数据类型</param>  \n        /// <param name=\"timeOut\">超时时间</param>  \n        /// <returns></returns>\n        public static string HttpPost(string url, string postData = null, string contentType = null, int timeOut = 30)\n        {\n            if (string.IsNullOrEmpty(postData))\n            {\n                postData = \"\";\n            }\n            using (HttpClient client = new HttpClient())\n            {\n                client.Timeout = new TimeSpan(0, 0, timeOut);\n                using (HttpContent httpContent = new StringContent(postData, Encoding.UTF8))\n                {\n                    if (contentType != null)\n                        httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);\n\n                    HttpResponseMessage response = client.PostAsync(url, httpContent).Result;\n                    return response.Content.ReadAsStringAsync().Result;\n                }\n            }\n        }\n\n\n        /// <summary>\n        /// 发起POST异步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <param name=\"postData\">请求数据</param>\n        /// <param name=\"contentType\">数据类型</param>\n        /// <param name=\"timeOut\">超时时间</param>      \n        /// <returns></returns>\n        public static async Task<string> HttpPostAsync(string url, string postData = null, string contentType = null, int timeOut = 30)\n        {\n            if (string.IsNullOrEmpty(postData))\n            {\n                postData = \"\";\n            }\n            using (HttpClient client = new HttpClient())\n            {\n                client.Timeout = new TimeSpan(0, 0, timeOut);\n                using (HttpContent httpContent = new StringContent(postData, Encoding.UTF8))\n                {\n                    if (contentType != null)\n                        httpContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);\n\n                    HttpResponseMessage response = await client.PostAsync(url, httpContent);\n                    return await response.Content.ReadAsStringAsync();\n                }\n            }\n        }\n\n        /// <summary>\n        /// 发起GET同步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <returns></returns>\n        public static string HttpGet(string url)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                return client.GetStringAsync(url).Result;\n            }\n        }\n\n        /// <summary>\n        /// 发起GET异步请求\n        /// </summary>\n        /// <param name=\"url\">请求地址</param>\n        /// <returns></returns>\n        public static async Task<string> HttpGetAsync(string url)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                HttpResponseMessage response = await client.GetAsync(url);\n                return await response.Content.ReadAsStringAsync();\n            }\n        }\n    }\n```\n\n然后我们来写个发送消息的方法**SendMessage**，这里我只写了下普通文本推送。\n```csharp\n\t\t/// <summary>\n        /// 消息推送\n        /// </summary>\n        /// <param name=\"content\">文本内容</param>\n        /// <param name=\"range\">推送范围</param>\n        /// <param name=\"messageType\">消息类型</param>\n        /// <returns></returns>\n        public static bool SendMessage(string content, MessageRange range, AprilEnums.MessageType messageType)\n        {\n            bool isSend = false;\n            if (string.IsNullOrEmpty(content) || content.Length > 2048 || range==null)\n            {\n                return false;\n            }\n            string accessToken = GetAccessToken();\n            if (string.IsNullOrEmpty(accessToken))\n            {\n                return false;\n            }\n            string url = $\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token={accessToken}\";\n            StringBuilder data = new StringBuilder();\n            bool isVaildRange = false;\n            if (range.IsAll)\n            {\n                data.Append($\"\\\"touser\\\":\\\"@all\\\"\");\n                isVaildRange = true;\n            }\n            else\n            {\n                if (range.Users != null && range.Users.Count > 0)\n                {\n                    data.AppendFormat(\"\\\"touser\\\" : {0}\", GetRangeValue(range.Users));\n                    isVaildRange = true;\n                }\n\n                if (range.Tags != null && range.Tags.Count > 0)\n                {\n                    if (data.Length > 0)\n                    {\n                        data.Append(\",\");\n                    }\n                    data.AppendFormat(\"\\\"totag\\\" : {0}\", GetRangeValue(range.Tags));\n                    isVaildRange = true;\n                }\n\n                if (range.Departments != null && range.Departments.Count > 0)\n                {\n                    if (data.Length > 0)\n                    {\n                        data.Append(\",\");\n                    }\n                    data.AppendFormat(\"\\\"totag\\\" : {0}\", GetRangeValue(range.Departments));\n                    isVaildRange = true;\n                }\n            }\n            if (!isVaildRange)\n            {\n                //没有发送范围\n                return false;\n            }\n            data.AppendFormat(\",\\\"msgtype\\\":\\\"{0}\\\"\", GetMessageType(messageType));\n            data.AppendFormat(\",\\\"agentid\\\":\\\"{0}\\\"\", AgentID);\n            data.Append(\",\\\"text\\\": {\");\n            data.AppendFormat(\"\\\"content\\\":\\\"{0}\\\"\", content);\n            data.Insert(0, \"{\");\n            data.Append(\"}}\");\n            LogUtil.Debug($\"获取到发送消息请求：{data.ToString()}\");\n            string res = RequestUtil.HttpPost(url, data.ToString(), \"application/json\");\n            LogUtil.Debug($\"获取到发送消息回调：{res}\");\n\n            return false;\n        }\n```\n简单说下消息推送，第一个就是你的推送类型，是普通文本还是啥（文档都有，我这净扯淡），然后就是你的范围，再然后就是你的推送内容了，当然根据不同的推送类型你的内容参数也不同，需要进一步封装的朋友可以去看下API。\n\n### 测试\n我们在控制器中（不再说**Values**了）加上消息推送的测试，这里的范围可以在你自己的通讯录中查看。\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n        \t//…\n            MessageRange range = new MessageRange();\n            range.Users = new List<string>();\n            range.Users.Add(\"10001\");\n            QyThridUtil.SendMessage(\"我就是来测试\", range, AprilEnums.MessageType.Text);\n            //…\n        }\n```\n\n![测试](net-core-qywx-application/4.png)\n\n![测试](net-core-qywx-application/5.png)\n### 小结\n写到这里基本上都结束了，为什么我特意拿出来企业微信的内部应用来写这篇呢，其实是做下这个消息推送，以后的自己的工程就可以写个这个然后做异常警告之类的东西，这样想想这篇就不是废话了，编程的奇淫技巧（咳咳，乐趣，乐趣）就在于此，代码自己敲，东西自己组，全在于你自己怎么玩了。","slug":"net-core-qywx-application","published":1,"updated":"2019-09-30T05:46:26.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3p003q9sv7ojwxduwe","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这几天忙活着别的东西，耽误了很长时间，从文件操作完了之后就在考虑着下一步鼓捣点儿啥，因为最开始的业务开发就是企业微信相关的，这刚好来做个内部应用的小例子玩玩。</p>\n<h3 id=\"企业微信\"><a href=\"#企业微信\" class=\"headerlink\" title=\"企业微信\"></a>企业微信</h3><p>前身是企业号，当时微信主推的还是公众号与服务号，后续战略考虑到企业的OA了（当然还是跟某个抢市场），企业号应该是在16年还是具体啥时候出的，刚出的时候也是问题不断一直在修复更新，最近这两年基本上没咋关注企业微信了，也都是偶尔上去看看有没有新东西啊什么的，不过不得不说，在这几年的成长中已经修复逐渐成为一个不错的产品了（大厂的效率还是有的），相对于公众号的开发，为什么我选这个作为例子呢，因为企业微信我可以通过个人来使用（注册的早，现在不清楚注册流程，主要看是否需要企业认证），个人开发者在不论啥时候啥平台都或多或少有些不友好（当然，认证了说明你是个好人，为了信息安全，都懂）。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>注册企业微信的流程我就不多说了，直接说注册完成之后，我们来看下这个界面，标注的就是我们需要的关键参数。<br><img src=\"/2019/09/02/net-core-qywx-application/1.png\" alt=\"企业微信\"><br>记好这个东西之后，我们转到<strong>应用管理</strong>。<br><img src=\"/2019/09/02/net-core-qywx-application/2.png\" alt=\"企业微信\"><br>这个创建就是你添张图片打个名字而已，不多说，创建完成之后我们来看下图的标记。<br><img src=\"/2019/09/02/net-core-qywx-application/3.png\" alt=\"企业微信\"><br>记好这两个参数，OK，下来我们就来看<a href=\"https://work.weixin.qq.com/api/doc#90000/90003/90487\" target=\"_blank\" rel=\"noopener\">API</a>吧，这里我只是介绍下消息推送。<br>微信等相关的第三方开发大致流程都类似，如下：</p>\n<ol>\n<li>注册账号（这不废话么）</li>\n<li>账号认证（为了权限，当然企业微信内部应用不需要）</li>\n<li>服务域名确定好</li>\n<li>AppID、Secret等等的配置（为了accesstoken）</li>\n<li>几乎所有的接口都是先获取accesstoken，相当于你在微信的登录</li>\n<li>根据接口文档来传参啊获取回调啊获取事件等等</li>\n<li>根据返回值来看看错误信息</li>\n</ol>\n<blockquote>\n<p>我这里不做服务端，只是写个示例，需要服务端什么的开发之类的可以给我联系，互相学习。</p>\n</blockquote>\n<p>首先，在我们的<strong>Util</strong>新建一个类<strong>QyThirdUtil</strong>（名字感觉起的好没水平，玩游戏止于起名字，别人都10级了，我还在想名字），先把我们需要的配置信息搞了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _CorpID = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _Secret = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _AgentID = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信id</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> CorpID</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_CorpID))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _CorpID = AprilConfig.Configuration[<span class=\"string\">\"QyThird:CorpID\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _CorpID;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信应用秘钥</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> Secret</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_Secret))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _Secret = AprilConfig.Configuration[<span class=\"string\">\"QyThird:Secret\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _Secret;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信应用id</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> AgentID</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_Secret))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _AgentID = AprilConfig.Configuration[<span class=\"string\">\"QyThird:AgentID\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _AgentID;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来划分下方法，我们需要获取accesstoken，需要执行发送消息的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 获取AccessToken</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetAccessToken</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          QyAccessToken accessToken = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isGet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (CacheUtil.Exists(<span class=\"string\">\"QyAccessToken\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              accessToken = CacheUtil.Get&lt;QyAccessToken&gt;(<span class=\"string\">\"QyAccessToken\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (accessToken.Expire_Time &gt;= DateTime.Now.AddMinutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  isGet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isGet)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> url = <span class=\"string\">$\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=<span class=\"subst\">&#123;CorpID&#125;</span>&amp;corpsecret=<span class=\"subst\">&#123;Secret&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"comment\">//请求获取</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> res = RequestUtil.HttpGet(url);</span><br><span class=\"line\">              accessToken = JsonConvert.DeserializeObject&lt;QyAccessToken&gt;(res);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (accessToken != <span class=\"literal\">null</span> &amp;&amp; accessToken.ErrCode == <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  accessToken.Expire_Time = DateTime.Now.AddSeconds(accessToken.Expires_In);</span><br><span class=\"line\">                  CacheUtil.Set(<span class=\"string\">\"QyAccessToken\"</span>, accessToken, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  LogUtil.Error(<span class=\"string\">$\"获取accesstoken失败——<span class=\"subst\">&#123;accessToken.ErrCode&#125;</span>,<span class=\"subst\">&#123;accessToken.ErrMsg&#125;</span>\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> accessToken.Access_Token;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里用到了两个地方，一个是微信端回调的对象实例<strong>QyAccessToken</strong>，需要的朋友可以在源码里cv，我这里就不贴出来了。</p>\n<p>另一个是HttpClient的简单封装请求方法<strong>RequestUtil</strong>，看了有些博客说HttpClient的生命周期之类的，有推荐直接实例化一个私有静态的，也有做工厂模式创建的，没细究，这块儿要多注意下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RequestUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起POST同步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"postData\"&gt;</span>请求数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contentType\"&gt;</span>数据类型<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>超时时间<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">HttpPost</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> postData = <span class=\"literal\">null</span>, <span class=\"keyword\">string</span> contentType = <span class=\"literal\">null</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">30</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(postData))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               client.Timeout = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">0</span>, timeOut);</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (HttpContent httpContent = <span class=\"keyword\">new</span> StringContent(postData, Encoding.UTF8))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                       httpContent.Headers.ContentType = <span class=\"keyword\">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(contentType);</span><br><span class=\"line\"></span><br><span class=\"line\">                   HttpResponseMessage response = client.PostAsync(url, httpContent).Result;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> response.Content.ReadAsStringAsync().Result;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起POST异步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"postData\"&gt;</span>请求数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contentType\"&gt;</span>数据类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>超时时间<span class=\"doctag\">&lt;/param&gt;</span>      </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">HttpPostAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> postData = <span class=\"literal\">null</span>, <span class=\"keyword\">string</span> contentType = <span class=\"literal\">null</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">30</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(postData))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               client.Timeout = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">0</span>, timeOut);</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (HttpContent httpContent = <span class=\"keyword\">new</span> StringContent(postData, Encoding.UTF8))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                       httpContent.Headers.ContentType = <span class=\"keyword\">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(contentType);</span><br><span class=\"line\"></span><br><span class=\"line\">                   HttpResponseMessage response = <span class=\"keyword\">await</span> client.PostAsync(url, httpContent);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.Content.ReadAsStringAsync();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起GET同步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">HttpGet</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> client.GetStringAsync(url).Result;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起GET异步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">HttpGetAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               HttpResponseMessage response = <span class=\"keyword\">await</span> client.GetAsync(url);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.Content.ReadAsStringAsync();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来写个发送消息的方法<strong>SendMessage</strong>，这里我只写了下普通文本推送。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 消息推送</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"content\"&gt;</span>文本内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"range\"&gt;</span>推送范围<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>消息类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> content, MessageRange range, AprilEnums.MessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isSend = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(content) || content.Length &gt; <span class=\"number\">2048</span> || range==<span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">string</span> accessToken = GetAccessToken();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(accessToken))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">string</span> url = <span class=\"string\">$\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class=\"subst\">&#123;accessToken&#125;</span>\"</span>;</span><br><span class=\"line\">          StringBuilder data = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isVaildRange = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (range.IsAll)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              data.Append(<span class=\"string\">$\"\\\"touser\\\":\\\"@all\\\"\"</span>);</span><br><span class=\"line\">              isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Users != <span class=\"literal\">null</span> &amp;&amp; range.Users.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"touser\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Users));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Tags != <span class=\"literal\">null</span> &amp;&amp; range.Tags.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      data.Append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"totag\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Tags));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Departments != <span class=\"literal\">null</span> &amp;&amp; range.Departments.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      data.Append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"totag\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Departments));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isVaildRange)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//没有发送范围</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\",\\\"msgtype\\\":\\\"&#123;0&#125;\\\"\"</span>, GetMessageType(messageType));</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\",\\\"agentid\\\":\\\"&#123;0&#125;\\\"\"</span>, AgentID);</span><br><span class=\"line\">          data.Append(<span class=\"string\">\",\\\"text\\\": &#123;\"</span>);</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\"\\\"content\\\":\\\"&#123;0&#125;\\\"\"</span>, content);</span><br><span class=\"line\">          data.Insert(<span class=\"number\">0</span>, <span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">          data.Append(<span class=\"string\">\"&#125;&#125;\"</span>);</span><br><span class=\"line\">          LogUtil.Debug(<span class=\"string\">$\"获取到发送消息请求：<span class=\"subst\">&#123;data.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">string</span> res = RequestUtil.HttpPost(url, data.ToString(), <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">          LogUtil.Debug(<span class=\"string\">$\"获取到发送消息回调：<span class=\"subst\">&#123;res&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单说下消息推送，第一个就是你的推送类型，是普通文本还是啥（文档都有，我这净扯淡），然后就是你的范围，再然后就是你的推送内容了，当然根据不同的推送类型你的内容参数也不同，需要进一步封装的朋友可以去看下API。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们在控制器中（不再说<strong>Values</strong>了）加上消息推送的测试，这里的范围可以在你自己的通讯录中查看。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…</span></span><br><span class=\"line\">    MessageRange range = <span class=\"keyword\">new</span> MessageRange();</span><br><span class=\"line\">    range.Users = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    range.Users.Add(<span class=\"string\">\"10001\"</span>);</span><br><span class=\"line\">    QyThridUtil.SendMessage(<span class=\"string\">\"我就是来测试\"</span>, range, AprilEnums.MessageType.Text);</span><br><span class=\"line\">    <span class=\"comment\">//…</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/09/02/net-core-qywx-application/4.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/09/02/net-core-qywx-application/5.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里基本上都结束了，为什么我特意拿出来企业微信的内部应用来写这篇呢，其实是做下这个消息推送，以后的自己的工程就可以写个这个然后做异常警告之类的东西，这样想想这篇就不是废话了，编程的奇淫技巧（咳咳，乐趣，乐趣）就在于此，代码自己敲，东西自己组，全在于你自己怎么玩了。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这几天忙活着别的东西，耽误了很长时间，从文件操作完了之后就在考虑着下一步鼓捣点儿啥，因为最开始的业务开发就是企业微信相关的，这刚好来做个内部应用的小例子玩玩。</p>\n<h3 id=\"企业微信\"><a href=\"#企业微信\" class=\"headerlink\" title=\"企业微信\"></a>企业微信</h3><p>前身是企业号，当时微信主推的还是公众号与服务号，后续战略考虑到企业的OA了（当然还是跟某个抢市场），企业号应该是在16年还是具体啥时候出的，刚出的时候也是问题不断一直在修复更新，最近这两年基本上没咋关注企业微信了，也都是偶尔上去看看有没有新东西啊什么的，不过不得不说，在这几年的成长中已经修复逐渐成为一个不错的产品了（大厂的效率还是有的），相对于公众号的开发，为什么我选这个作为例子呢，因为企业微信我可以通过个人来使用（注册的早，现在不清楚注册流程，主要看是否需要企业认证），个人开发者在不论啥时候啥平台都或多或少有些不友好（当然，认证了说明你是个好人，为了信息安全，都懂）。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>注册企业微信的流程我就不多说了，直接说注册完成之后，我们来看下这个界面，标注的就是我们需要的关键参数。<br><img src=\"/2019/09/02/net-core-qywx-application/1.png\" alt=\"企业微信\"><br>记好这个东西之后，我们转到<strong>应用管理</strong>。<br><img src=\"/2019/09/02/net-core-qywx-application/2.png\" alt=\"企业微信\"><br>这个创建就是你添张图片打个名字而已，不多说，创建完成之后我们来看下图的标记。<br><img src=\"/2019/09/02/net-core-qywx-application/3.png\" alt=\"企业微信\"><br>记好这两个参数，OK，下来我们就来看<a href=\"https://work.weixin.qq.com/api/doc#90000/90003/90487\" target=\"_blank\" rel=\"noopener\">API</a>吧，这里我只是介绍下消息推送。<br>微信等相关的第三方开发大致流程都类似，如下：</p>\n<ol>\n<li>注册账号（这不废话么）</li>\n<li>账号认证（为了权限，当然企业微信内部应用不需要）</li>\n<li>服务域名确定好</li>\n<li>AppID、Secret等等的配置（为了accesstoken）</li>\n<li>几乎所有的接口都是先获取accesstoken，相当于你在微信的登录</li>\n<li>根据接口文档来传参啊获取回调啊获取事件等等</li>\n<li>根据返回值来看看错误信息</li>\n</ol>\n<blockquote>\n<p>我这里不做服务端，只是写个示例，需要服务端什么的开发之类的可以给我联系，互相学习。</p>\n</blockquote>\n<p>首先，在我们的<strong>Util</strong>新建一个类<strong>QyThirdUtil</strong>（名字感觉起的好没水平，玩游戏止于起名字，别人都10级了，我还在想名字），先把我们需要的配置信息搞了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _CorpID = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _Secret = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _AgentID = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信id</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> CorpID</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_CorpID))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _CorpID = AprilConfig.Configuration[<span class=\"string\">\"QyThird:CorpID\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _CorpID;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信应用秘钥</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> Secret</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_Secret))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _Secret = AprilConfig.Configuration[<span class=\"string\">\"QyThird:Secret\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _Secret;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 企业微信应用id</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> AgentID</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">get</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_Secret))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  _AgentID = AprilConfig.Configuration[<span class=\"string\">\"QyThird:AgentID\"</span>];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> _AgentID;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来划分下方法，我们需要获取accesstoken，需要执行发送消息的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 获取AccessToken</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetAccessToken</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          QyAccessToken accessToken = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isGet = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (CacheUtil.Exists(<span class=\"string\">\"QyAccessToken\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              accessToken = CacheUtil.Get&lt;QyAccessToken&gt;(<span class=\"string\">\"QyAccessToken\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (accessToken.Expire_Time &gt;= DateTime.Now.AddMinutes(<span class=\"number\">1</span>))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  isGet = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isGet)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> url = <span class=\"string\">$\"https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=<span class=\"subst\">&#123;CorpID&#125;</span>&amp;corpsecret=<span class=\"subst\">&#123;Secret&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"comment\">//请求获取</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> res = RequestUtil.HttpGet(url);</span><br><span class=\"line\">              accessToken = JsonConvert.DeserializeObject&lt;QyAccessToken&gt;(res);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (accessToken != <span class=\"literal\">null</span> &amp;&amp; accessToken.ErrCode == <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  accessToken.Expire_Time = DateTime.Now.AddSeconds(accessToken.Expires_In);</span><br><span class=\"line\">                  CacheUtil.Set(<span class=\"string\">\"QyAccessToken\"</span>, accessToken, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  LogUtil.Error(<span class=\"string\">$\"获取accesstoken失败——<span class=\"subst\">&#123;accessToken.ErrCode&#125;</span>,<span class=\"subst\">&#123;accessToken.ErrMsg&#125;</span>\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> accessToken.Access_Token;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里用到了两个地方，一个是微信端回调的对象实例<strong>QyAccessToken</strong>，需要的朋友可以在源码里cv，我这里就不贴出来了。</p>\n<p>另一个是HttpClient的简单封装请求方法<strong>RequestUtil</strong>，看了有些博客说HttpClient的生命周期之类的，有推荐直接实例化一个私有静态的，也有做工厂模式创建的，没细究，这块儿要多注意下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RequestUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起POST同步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"postData\"&gt;</span>请求数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contentType\"&gt;</span>数据类型<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>超时时间<span class=\"doctag\">&lt;/param&gt;</span>  </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">HttpPost</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> postData = <span class=\"literal\">null</span>, <span class=\"keyword\">string</span> contentType = <span class=\"literal\">null</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">30</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(postData))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               client.Timeout = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">0</span>, timeOut);</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (HttpContent httpContent = <span class=\"keyword\">new</span> StringContent(postData, Encoding.UTF8))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                       httpContent.Headers.ContentType = <span class=\"keyword\">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(contentType);</span><br><span class=\"line\"></span><br><span class=\"line\">                   HttpResponseMessage response = client.PostAsync(url, httpContent).Result;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> response.Content.ReadAsStringAsync().Result;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起POST异步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"postData\"&gt;</span>请求数据<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contentType\"&gt;</span>数据类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timeOut\"&gt;</span>超时时间<span class=\"doctag\">&lt;/param&gt;</span>      </span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">HttpPostAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> url, <span class=\"keyword\">string</span> postData = <span class=\"literal\">null</span>, <span class=\"keyword\">string</span> contentType = <span class=\"literal\">null</span>, <span class=\"keyword\">int</span> timeOut = <span class=\"number\">30</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(postData))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               client.Timeout = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">0</span>, timeOut);</span><br><span class=\"line\">               <span class=\"keyword\">using</span> (HttpContent httpContent = <span class=\"keyword\">new</span> StringContent(postData, Encoding.UTF8))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (contentType != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                       httpContent.Headers.ContentType = <span class=\"keyword\">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(contentType);</span><br><span class=\"line\"></span><br><span class=\"line\">                   HttpResponseMessage response = <span class=\"keyword\">await</span> client.PostAsync(url, httpContent);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.Content.ReadAsStringAsync();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起GET同步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">HttpGet</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> client.GetStringAsync(url).Result;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 发起GET异步请求</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"url\"&gt;</span>请求地址<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">HttpGetAsync</span>(<span class=\"params\"><span class=\"keyword\">string</span> url</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               HttpResponseMessage response = <span class=\"keyword\">await</span> client.GetAsync(url);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.Content.ReadAsStringAsync();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来写个发送消息的方法<strong>SendMessage</strong>，这里我只写了下普通文本推送。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 消息推送</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"content\"&gt;</span>文本内容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"range\"&gt;</span>推送范围<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"messageType\"&gt;</span>消息类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> content, MessageRange range, AprilEnums.MessageType messageType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isSend = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(content) || content.Length &gt; <span class=\"number\">2048</span> || range==<span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">string</span> accessToken = GetAccessToken();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(accessToken))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">string</span> url = <span class=\"string\">$\"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=<span class=\"subst\">&#123;accessToken&#125;</span>\"</span>;</span><br><span class=\"line\">          StringBuilder data = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">          <span class=\"keyword\">bool</span> isVaildRange = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (range.IsAll)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              data.Append(<span class=\"string\">$\"\\\"touser\\\":\\\"@all\\\"\"</span>);</span><br><span class=\"line\">              isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Users != <span class=\"literal\">null</span> &amp;&amp; range.Users.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"touser\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Users));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Tags != <span class=\"literal\">null</span> &amp;&amp; range.Tags.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      data.Append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"totag\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Tags));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (range.Departments != <span class=\"literal\">null</span> &amp;&amp; range.Departments.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      data.Append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  data.AppendFormat(<span class=\"string\">\"\\\"totag\\\" : &#123;0&#125;\"</span>, GetRangeValue(range.Departments));</span><br><span class=\"line\">                  isVaildRange = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!isVaildRange)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//没有发送范围</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\",\\\"msgtype\\\":\\\"&#123;0&#125;\\\"\"</span>, GetMessageType(messageType));</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\",\\\"agentid\\\":\\\"&#123;0&#125;\\\"\"</span>, AgentID);</span><br><span class=\"line\">          data.Append(<span class=\"string\">\",\\\"text\\\": &#123;\"</span>);</span><br><span class=\"line\">          data.AppendFormat(<span class=\"string\">\"\\\"content\\\":\\\"&#123;0&#125;\\\"\"</span>, content);</span><br><span class=\"line\">          data.Insert(<span class=\"number\">0</span>, <span class=\"string\">\"&#123;\"</span>);</span><br><span class=\"line\">          data.Append(<span class=\"string\">\"&#125;&#125;\"</span>);</span><br><span class=\"line\">          LogUtil.Debug(<span class=\"string\">$\"获取到发送消息请求：<span class=\"subst\">&#123;data.ToString()&#125;</span>\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">string</span> res = RequestUtil.HttpPost(url, data.ToString(), <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">          LogUtil.Debug(<span class=\"string\">$\"获取到发送消息回调：<span class=\"subst\">&#123;res&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单说下消息推送，第一个就是你的推送类型，是普通文本还是啥（文档都有，我这净扯淡），然后就是你的范围，再然后就是你的推送内容了，当然根据不同的推送类型你的内容参数也不同，需要进一步封装的朋友可以去看下API。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们在控制器中（不再说<strong>Values</strong>了）加上消息推送的测试，这里的范围可以在你自己的通讯录中查看。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…</span></span><br><span class=\"line\">    MessageRange range = <span class=\"keyword\">new</span> MessageRange();</span><br><span class=\"line\">    range.Users = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    range.Users.Add(<span class=\"string\">\"10001\"</span>);</span><br><span class=\"line\">    QyThridUtil.SendMessage(<span class=\"string\">\"我就是来测试\"</span>, range, AprilEnums.MessageType.Text);</span><br><span class=\"line\">    <span class=\"comment\">//…</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/09/02/net-core-qywx-application/4.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/09/02/net-core-qywx-application/5.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里基本上都结束了，为什么我特意拿出来企业微信的内部应用来写这篇呢，其实是做下这个消息推送，以后的自己的工程就可以写个这个然后做异常警告之类的东西，这样想想这篇就不是废话了，编程的奇淫技巧（咳咳，乐趣，乐趣）就在于此，代码自己敲，东西自己组，全在于你自己怎么玩了。</p>\n"},{"title":"net core WebApi——缓存神器Redis","date":"2019-09-23T01:48:56.000Z","_content":"\n### 前言\n中秋过完不知不觉都已经快两周没动这个工程了，最近业务需要总算开始搞后台云服务了，果断直接net core搞起，在做的中间遇到了不少问题，这个后续会一点点列出来包括解决方法，今天就先把之前挖的坑填一个。\n\n### Redis\n之前在缓存那篇提到过，**Cookie**，**Session**，**Cache**这几个不同的缓存方式，Cookie是存在客户端浏览器的，Session实质上也是客户端的存储，至于Cache是服务端的，但是如果是分布式的话，这几个方式可能除了Cookie其他两个都要有点儿问题，毕竟一台服务只存储自身一台，如果多台的话，需要涉及到多服务的交互，比如一台服务做了Cache存储，需要给其他服务发送内部信号或是http请求，其他服务根据请求执行对应操作。\n\n当然这是在没有用到**Redis**的前提下，Redis是解决分布式缓存的神器，相当于是自身一台服务器专门处理数据的读写，可以理解为数据服务器（个人感觉。。。），至于自己业务的分布式只是为了业务需要去执行，需要用到数据缓存即可直接调用Redis的读写操作（当然，各个服务的Redis配置要保持一致）。\n\nRedis的安装和配置在[Linux配置部署_新手向（四）——Redis安装与配置](/2019/09/12/vmware-redis/)已经说过，当时就是为了使用Redis而做了个小铺垫。\n\n### 使用\n首先，只要是类库肯定是引入Nuget包了，我们在**April.Util**引入**Microsoft.Extensions.Caching.Redis**，当然其他也有**StackExchange.Redis**，**CSRedisCore**，这里先试试官方的吧，[官方扩展包地址](https://github.com/aspnet/Extensions/tree/9bc79b2f25a3724376d7af19617c33749a30ea3a)。\n\n引入完之后，我们在appsettings.json来配置下地址目录。\n![配置](net-core-redis/1.png)\n之后我们看下Redis的方法，毕竟调用第三方都是看看然后根据自己需要裹一下。\n![Redis](net-core-redis/2.png)\n也是先要初始化配置信息，然后创建实体对象，调用方法，这里说明下，默认的value值是byte[]，当然官方也有扩展方法。\n![Redis](net-core-redis/3.png)\n好了，看完了方法，我们来开始Util吧。\n\n### RedisUtil\n首先，我们还是要先做配置信息，前面已经在appsettings写过配置信息，这里直接在**AprilConfig**中添加上。\n```csharp\nprivate static string _IsOpenCache = string.Empty;\n        /// <summary>\n        /// 是否使用Redis\n        /// </summary>\n        public static bool IsOpenCache\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_IsOpenCache))\n                {\n                    _IsOpenCache = Configuration[\"Redis:IsOpenRedis\"];\n                }\n                if (_IsOpenCache.ToLower() == \"true\")\n                {\n                    return true;\n                }\n                return false;\n            }\n        }\n\n        private static string _RedisConnectionString = string.Empty;\n        /// <summary>\n        /// Redis默认连接串\n        /// </summary>\n        public static string RedisConnectionString\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_RedisConnectionString))\n                {\n                    _RedisConnectionString = Configuration[\"Redis:ConnectionString\"];\n                }\n                return _RedisConnectionString;\n            }\n        }\n```\n\n配置信息设置完成之后，开始初始化Redis的方法。\n```csharp\n        private static RedisCache _redisCache = null;\n        private static RedisCacheOptions options = null;\n        /// <summary>\n        /// 初始化Redis\n        /// </summary>\n        public static void InitRedis()\n        {\n            if (AprilConfig.IsOpenCache)\n            {\n                _redisCache = new RedisCache(GetOptions());\n            }\n        }\n        /// <summary>\n        /// 获取配置项信息\n        /// </summary>\n        /// <returns></returns>\n        protected static RedisCacheOptions GetOptions()\n        {\n            options = new RedisCacheOptions();\n            options.Configuration = AprilConfig.RedisConnectionString;\n            options.InstanceName = \"April.Redis\";\n            return options;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        /// <param name=\"ExprireTime\">过期时间</param>\n        public static void Add(string key, object value, int ExprireTime = 10)\n        {\n            if (string.IsNullOrEmpty(key))\n            {\n                return;\n            }\n            string strValue = string.Empty;\n            try\n            {\n                strValue = JsonConvert.SerializeObject(value);\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"Redis.Add转换失败:{ex.Message}\");\n            }\n            if (!string.IsNullOrEmpty(strValue))\n            {\n                _redisCache.SetString(key, strValue, new Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions()\n                {\n                    AbsoluteExpiration = DateTime.Now.AddMinutes(ExprireTime)\n                });\n            }\n        }\n        /// <summary>\n        /// 获取数据（对象）\n        /// </summary>\n        /// <typeparam name=\"T\">对象类型</typeparam>\n        /// <param name=\"key\">键</param>\n        /// <returns></returns>\n        public static T Get<T>(string key)\n        {\n            string value = Get(key);\n            if (string.IsNullOrEmpty(value))\n            {\n                return default(T);\n            }\n            T obj = default(T);\n            try\n            {\n                obj = JsonConvert.DeserializeObject<T>(value);\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"Redis.Get转换失败：{ex.Message},数据：{value}\");\n            }\n            return obj;\n        }\n        /// <summary>\n        /// 移除数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        public static void Remove(string key)\n        {\n            if (!string.IsNullOrEmpty(key))\n            {\n                _redisCache.Remove(key);\n            }\n        }\n        /// <summary>\n        /// 重置数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        /// <param name=\"expireTime\">过期时间</param>\n        public static void Replace(string key, object value, int expireTime = 10)\n        {\n            if (!string.IsNullOrEmpty(key))\n            {\n                Remove(key);\n                Add(key, value, expireTime);\n            }\n        }\n```\n\n具体使用的方法，这里不多写了，代码地址见[net core Webapi 总目录](/2019/07/19/net-core-webapi-main/)，感觉代码贴的多了，自己也习惯了复制粘贴，看一个封装好的方法，就要去看他的源码（如果只是用的话就算了），这样对方法的使用以及自身的业务需要封装会有很好的帮助，毕竟会用是第一步，会改是第二步，封装是第三步，自己写那就是最终级了（这句纯属自勉）。\n\n### 测试\n好了，写完之后，习惯来一遍测试，不想自己整理的东西最终还是不能用，千篇一律不可怕，可怕的是不知道最终的效果。\n**新增**\n![测试](net-core-redis/4.png)\n![结果](net-core-redis/5.png)\n**获取**\n![测试](net-core-redis/6.png)\n![结果](net-core-redis/7.png)\n**覆盖**\nps:说是覆盖，其实就是删除然后新增-,-|||\n![测试](net-core-redis/8.png)\n![结果](net-core-redis/9.png)\n**删除**\n![测试](net-core-redis/10.png)\n![结果](net-core-redis/11.png)\n\n### 小结\n写到这里基本上都结束了，简单的说明了Redis的使用，后续还是会不断更新，比如那么多database，如果随意切换，redis存储之后会不会有什么其他问题等等，**学以致用，用方知错，错而能改，改了就行**。","source":"_posts/net-core-redis.md","raw":"---\ntitle: net core WebApi——缓存神器Redis\ndate: 2019-09-23 09:48:56\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n中秋过完不知不觉都已经快两周没动这个工程了，最近业务需要总算开始搞后台云服务了，果断直接net core搞起，在做的中间遇到了不少问题，这个后续会一点点列出来包括解决方法，今天就先把之前挖的坑填一个。\n\n### Redis\n之前在缓存那篇提到过，**Cookie**，**Session**，**Cache**这几个不同的缓存方式，Cookie是存在客户端浏览器的，Session实质上也是客户端的存储，至于Cache是服务端的，但是如果是分布式的话，这几个方式可能除了Cookie其他两个都要有点儿问题，毕竟一台服务只存储自身一台，如果多台的话，需要涉及到多服务的交互，比如一台服务做了Cache存储，需要给其他服务发送内部信号或是http请求，其他服务根据请求执行对应操作。\n\n当然这是在没有用到**Redis**的前提下，Redis是解决分布式缓存的神器，相当于是自身一台服务器专门处理数据的读写，可以理解为数据服务器（个人感觉。。。），至于自己业务的分布式只是为了业务需要去执行，需要用到数据缓存即可直接调用Redis的读写操作（当然，各个服务的Redis配置要保持一致）。\n\nRedis的安装和配置在[Linux配置部署_新手向（四）——Redis安装与配置](/2019/09/12/vmware-redis/)已经说过，当时就是为了使用Redis而做了个小铺垫。\n\n### 使用\n首先，只要是类库肯定是引入Nuget包了，我们在**April.Util**引入**Microsoft.Extensions.Caching.Redis**，当然其他也有**StackExchange.Redis**，**CSRedisCore**，这里先试试官方的吧，[官方扩展包地址](https://github.com/aspnet/Extensions/tree/9bc79b2f25a3724376d7af19617c33749a30ea3a)。\n\n引入完之后，我们在appsettings.json来配置下地址目录。\n![配置](net-core-redis/1.png)\n之后我们看下Redis的方法，毕竟调用第三方都是看看然后根据自己需要裹一下。\n![Redis](net-core-redis/2.png)\n也是先要初始化配置信息，然后创建实体对象，调用方法，这里说明下，默认的value值是byte[]，当然官方也有扩展方法。\n![Redis](net-core-redis/3.png)\n好了，看完了方法，我们来开始Util吧。\n\n### RedisUtil\n首先，我们还是要先做配置信息，前面已经在appsettings写过配置信息，这里直接在**AprilConfig**中添加上。\n```csharp\nprivate static string _IsOpenCache = string.Empty;\n        /// <summary>\n        /// 是否使用Redis\n        /// </summary>\n        public static bool IsOpenCache\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_IsOpenCache))\n                {\n                    _IsOpenCache = Configuration[\"Redis:IsOpenRedis\"];\n                }\n                if (_IsOpenCache.ToLower() == \"true\")\n                {\n                    return true;\n                }\n                return false;\n            }\n        }\n\n        private static string _RedisConnectionString = string.Empty;\n        /// <summary>\n        /// Redis默认连接串\n        /// </summary>\n        public static string RedisConnectionString\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_RedisConnectionString))\n                {\n                    _RedisConnectionString = Configuration[\"Redis:ConnectionString\"];\n                }\n                return _RedisConnectionString;\n            }\n        }\n```\n\n配置信息设置完成之后，开始初始化Redis的方法。\n```csharp\n        private static RedisCache _redisCache = null;\n        private static RedisCacheOptions options = null;\n        /// <summary>\n        /// 初始化Redis\n        /// </summary>\n        public static void InitRedis()\n        {\n            if (AprilConfig.IsOpenCache)\n            {\n                _redisCache = new RedisCache(GetOptions());\n            }\n        }\n        /// <summary>\n        /// 获取配置项信息\n        /// </summary>\n        /// <returns></returns>\n        protected static RedisCacheOptions GetOptions()\n        {\n            options = new RedisCacheOptions();\n            options.Configuration = AprilConfig.RedisConnectionString;\n            options.InstanceName = \"April.Redis\";\n            return options;\n        }\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        /// <param name=\"ExprireTime\">过期时间</param>\n        public static void Add(string key, object value, int ExprireTime = 10)\n        {\n            if (string.IsNullOrEmpty(key))\n            {\n                return;\n            }\n            string strValue = string.Empty;\n            try\n            {\n                strValue = JsonConvert.SerializeObject(value);\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"Redis.Add转换失败:{ex.Message}\");\n            }\n            if (!string.IsNullOrEmpty(strValue))\n            {\n                _redisCache.SetString(key, strValue, new Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions()\n                {\n                    AbsoluteExpiration = DateTime.Now.AddMinutes(ExprireTime)\n                });\n            }\n        }\n        /// <summary>\n        /// 获取数据（对象）\n        /// </summary>\n        /// <typeparam name=\"T\">对象类型</typeparam>\n        /// <param name=\"key\">键</param>\n        /// <returns></returns>\n        public static T Get<T>(string key)\n        {\n            string value = Get(key);\n            if (string.IsNullOrEmpty(value))\n            {\n                return default(T);\n            }\n            T obj = default(T);\n            try\n            {\n                obj = JsonConvert.DeserializeObject<T>(value);\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"Redis.Get转换失败：{ex.Message},数据：{value}\");\n            }\n            return obj;\n        }\n        /// <summary>\n        /// 移除数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        public static void Remove(string key)\n        {\n            if (!string.IsNullOrEmpty(key))\n            {\n                _redisCache.Remove(key);\n            }\n        }\n        /// <summary>\n        /// 重置数据\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        /// <param name=\"expireTime\">过期时间</param>\n        public static void Replace(string key, object value, int expireTime = 10)\n        {\n            if (!string.IsNullOrEmpty(key))\n            {\n                Remove(key);\n                Add(key, value, expireTime);\n            }\n        }\n```\n\n具体使用的方法，这里不多写了，代码地址见[net core Webapi 总目录](/2019/07/19/net-core-webapi-main/)，感觉代码贴的多了，自己也习惯了复制粘贴，看一个封装好的方法，就要去看他的源码（如果只是用的话就算了），这样对方法的使用以及自身的业务需要封装会有很好的帮助，毕竟会用是第一步，会改是第二步，封装是第三步，自己写那就是最终级了（这句纯属自勉）。\n\n### 测试\n好了，写完之后，习惯来一遍测试，不想自己整理的东西最终还是不能用，千篇一律不可怕，可怕的是不知道最终的效果。\n**新增**\n![测试](net-core-redis/4.png)\n![结果](net-core-redis/5.png)\n**获取**\n![测试](net-core-redis/6.png)\n![结果](net-core-redis/7.png)\n**覆盖**\nps:说是覆盖，其实就是删除然后新增-,-|||\n![测试](net-core-redis/8.png)\n![结果](net-core-redis/9.png)\n**删除**\n![测试](net-core-redis/10.png)\n![结果](net-core-redis/11.png)\n\n### 小结\n写到这里基本上都结束了，简单的说明了Redis的使用，后续还是会不断更新，比如那么多database，如果随意切换，redis存储之后会不会有什么其他问题等等，**学以致用，用方知错，错而能改，改了就行**。","slug":"net-core-redis","published":1,"updated":"2019-09-30T05:47:07.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m3u003t9sv7275oj29e","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>中秋过完不知不觉都已经快两周没动这个工程了，最近业务需要总算开始搞后台云服务了，果断直接net core搞起，在做的中间遇到了不少问题，这个后续会一点点列出来包括解决方法，今天就先把之前挖的坑填一个。</p>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>之前在缓存那篇提到过，<strong>Cookie</strong>，<strong>Session</strong>，<strong>Cache</strong>这几个不同的缓存方式，Cookie是存在客户端浏览器的，Session实质上也是客户端的存储，至于Cache是服务端的，但是如果是分布式的话，这几个方式可能除了Cookie其他两个都要有点儿问题，毕竟一台服务只存储自身一台，如果多台的话，需要涉及到多服务的交互，比如一台服务做了Cache存储，需要给其他服务发送内部信号或是http请求，其他服务根据请求执行对应操作。</p>\n<p>当然这是在没有用到<strong>Redis</strong>的前提下，Redis是解决分布式缓存的神器，相当于是自身一台服务器专门处理数据的读写，可以理解为数据服务器（个人感觉。。。），至于自己业务的分布式只是为了业务需要去执行，需要用到数据缓存即可直接调用Redis的读写操作（当然，各个服务的Redis配置要保持一致）。</p>\n<p>Redis的安装和配置在<a href=\"/2019/09/12/vmware-redis/\">Linux配置部署_新手向（四）——Redis安装与配置</a>已经说过，当时就是为了使用Redis而做了个小铺垫。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>首先，只要是类库肯定是引入Nuget包了，我们在<strong>April.Util</strong>引入<strong>Microsoft.Extensions.Caching.Redis</strong>，当然其他也有<strong>StackExchange.Redis</strong>，<strong>CSRedisCore</strong>，这里先试试官方的吧，<a href=\"https://github.com/aspnet/Extensions/tree/9bc79b2f25a3724376d7af19617c33749a30ea3a\" target=\"_blank\" rel=\"noopener\">官方扩展包地址</a>。</p>\n<p>引入完之后，我们在appsettings.json来配置下地址目录。<br><img src=\"/2019/09/23/net-core-redis/1.png\" alt=\"配置\"><br>之后我们看下Redis的方法，毕竟调用第三方都是看看然后根据自己需要裹一下。<br><img src=\"/2019/09/23/net-core-redis/2.png\" alt=\"Redis\"><br>也是先要初始化配置信息，然后创建实体对象，调用方法，这里说明下，默认的value值是byte[]，当然官方也有扩展方法。<br><img src=\"/2019/09/23/net-core-redis/3.png\" alt=\"Redis\"><br>好了，看完了方法，我们来开始Util吧。</p>\n<h3 id=\"RedisUtil\"><a href=\"#RedisUtil\" class=\"headerlink\" title=\"RedisUtil\"></a>RedisUtil</h3><p>首先，我们还是要先做配置信息，前面已经在appsettings写过配置信息，这里直接在<strong>AprilConfig</strong>中添加上。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _IsOpenCache = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 是否使用Redis</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> IsOpenCache</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_IsOpenCache))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _IsOpenCache = Configuration[<span class=\"string\">\"Redis:IsOpenRedis\"</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_IsOpenCache.ToLower() == <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _RedisConnectionString = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Redis默认连接串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> RedisConnectionString</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_RedisConnectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _RedisConnectionString = Configuration[<span class=\"string\">\"Redis:ConnectionString\"</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _RedisConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置信息设置完成之后，开始初始化Redis的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RedisCache _redisCache = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RedisCacheOptions options = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 初始化Redis</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">InitRedis</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AprilConfig.IsOpenCache)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache = <span class=\"keyword\">new</span> RedisCache(GetOptions());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取配置项信息</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> RedisCacheOptions <span class=\"title\">GetOptions</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    options = <span class=\"keyword\">new</span> RedisCacheOptions();</span><br><span class=\"line\">    options.Configuration = AprilConfig.RedisConnectionString;</span><br><span class=\"line\">    options.InstanceName = <span class=\"string\">\"April.Redis\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ExprireTime\"&gt;</span>过期时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> ExprireTime = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> strValue = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        strValue = JsonConvert.SerializeObject(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Error(<span class=\"string\">$\"Redis.Add转换失败:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(strValue))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache.SetString(key, strValue, <span class=\"keyword\">new</span> Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AbsoluteExpiration = DateTime.Now.AddMinutes(ExprireTime)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取数据（对象）</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>对象类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Get&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = Get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T obj = <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        obj = JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Error(<span class=\"string\">$\"Redis.Get转换失败：<span class=\"subst\">&#123;ex.Message&#125;</span>,数据：<span class=\"subst\">&#123;<span class=\"keyword\">value</span>&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 移除数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache.Remove(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 重置数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expireTime\"&gt;</span>过期时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Replace</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> expireTime = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Remove(key);</span><br><span class=\"line\">        Add(key, <span class=\"keyword\">value</span>, expireTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用的方法，这里不多写了，代码地址见<a href=\"/2019/07/19/net-core-webapi-main/\">net core Webapi 总目录</a>，感觉代码贴的多了，自己也习惯了复制粘贴，看一个封装好的方法，就要去看他的源码（如果只是用的话就算了），这样对方法的使用以及自身的业务需要封装会有很好的帮助，毕竟会用是第一步，会改是第二步，封装是第三步，自己写那就是最终级了（这句纯属自勉）。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>好了，写完之后，习惯来一遍测试，不想自己整理的东西最终还是不能用，千篇一律不可怕，可怕的是不知道最终的效果。<br><strong>新增</strong><br><img src=\"/2019/09/23/net-core-redis/4.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/5.png\" alt=\"结果\"><br><strong>获取</strong><br><img src=\"/2019/09/23/net-core-redis/6.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/7.png\" alt=\"结果\"><br><strong>覆盖</strong><br>ps:说是覆盖，其实就是删除然后新增-,-|||<br><img src=\"/2019/09/23/net-core-redis/8.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/9.png\" alt=\"结果\"><br><strong>删除</strong><br><img src=\"/2019/09/23/net-core-redis/10.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/11.png\" alt=\"结果\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里基本上都结束了，简单的说明了Redis的使用，后续还是会不断更新，比如那么多database，如果随意切换，redis存储之后会不会有什么其他问题等等，<strong>学以致用，用方知错，错而能改，改了就行</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>中秋过完不知不觉都已经快两周没动这个工程了，最近业务需要总算开始搞后台云服务了，果断直接net core搞起，在做的中间遇到了不少问题，这个后续会一点点列出来包括解决方法，今天就先把之前挖的坑填一个。</p>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>之前在缓存那篇提到过，<strong>Cookie</strong>，<strong>Session</strong>，<strong>Cache</strong>这几个不同的缓存方式，Cookie是存在客户端浏览器的，Session实质上也是客户端的存储，至于Cache是服务端的，但是如果是分布式的话，这几个方式可能除了Cookie其他两个都要有点儿问题，毕竟一台服务只存储自身一台，如果多台的话，需要涉及到多服务的交互，比如一台服务做了Cache存储，需要给其他服务发送内部信号或是http请求，其他服务根据请求执行对应操作。</p>\n<p>当然这是在没有用到<strong>Redis</strong>的前提下，Redis是解决分布式缓存的神器，相当于是自身一台服务器专门处理数据的读写，可以理解为数据服务器（个人感觉。。。），至于自己业务的分布式只是为了业务需要去执行，需要用到数据缓存即可直接调用Redis的读写操作（当然，各个服务的Redis配置要保持一致）。</p>\n<p>Redis的安装和配置在<a href=\"/2019/09/12/vmware-redis/\">Linux配置部署_新手向（四）——Redis安装与配置</a>已经说过，当时就是为了使用Redis而做了个小铺垫。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>首先，只要是类库肯定是引入Nuget包了，我们在<strong>April.Util</strong>引入<strong>Microsoft.Extensions.Caching.Redis</strong>，当然其他也有<strong>StackExchange.Redis</strong>，<strong>CSRedisCore</strong>，这里先试试官方的吧，<a href=\"https://github.com/aspnet/Extensions/tree/9bc79b2f25a3724376d7af19617c33749a30ea3a\" target=\"_blank\" rel=\"noopener\">官方扩展包地址</a>。</p>\n<p>引入完之后，我们在appsettings.json来配置下地址目录。<br><img src=\"/2019/09/23/net-core-redis/1.png\" alt=\"配置\"><br>之后我们看下Redis的方法，毕竟调用第三方都是看看然后根据自己需要裹一下。<br><img src=\"/2019/09/23/net-core-redis/2.png\" alt=\"Redis\"><br>也是先要初始化配置信息，然后创建实体对象，调用方法，这里说明下，默认的value值是byte[]，当然官方也有扩展方法。<br><img src=\"/2019/09/23/net-core-redis/3.png\" alt=\"Redis\"><br>好了，看完了方法，我们来开始Util吧。</p>\n<h3 id=\"RedisUtil\"><a href=\"#RedisUtil\" class=\"headerlink\" title=\"RedisUtil\"></a>RedisUtil</h3><p>首先，我们还是要先做配置信息，前面已经在appsettings写过配置信息，这里直接在<strong>AprilConfig</strong>中添加上。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _IsOpenCache = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 是否使用Redis</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> IsOpenCache</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_IsOpenCache))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _IsOpenCache = Configuration[<span class=\"string\">\"Redis:IsOpenRedis\"</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_IsOpenCache.ToLower() == <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _RedisConnectionString = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Redis默认连接串</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> RedisConnectionString</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_RedisConnectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _RedisConnectionString = Configuration[<span class=\"string\">\"Redis:ConnectionString\"</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _RedisConnectionString;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置信息设置完成之后，开始初始化Redis的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RedisCache _redisCache = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> RedisCacheOptions options = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 初始化Redis</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">InitRedis</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (AprilConfig.IsOpenCache)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache = <span class=\"keyword\">new</span> RedisCache(GetOptions());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取配置项信息</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> RedisCacheOptions <span class=\"title\">GetOptions</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    options = <span class=\"keyword\">new</span> RedisCacheOptions();</span><br><span class=\"line\">    options.Configuration = AprilConfig.RedisConnectionString;</span><br><span class=\"line\">    options.InstanceName = <span class=\"string\">\"April.Redis\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 添加数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ExprireTime\"&gt;</span>过期时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> ExprireTime = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> strValue = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        strValue = JsonConvert.SerializeObject(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Error(<span class=\"string\">$\"Redis.Add转换失败:<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(strValue))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache.SetString(key, strValue, <span class=\"keyword\">new</span> Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AbsoluteExpiration = DateTime.Now.AddMinutes(ExprireTime)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 获取数据（对象）</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>对象类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> T Get&lt;T&gt;(<span class=\"keyword\">string</span> key)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = Get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    T obj = <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        obj = JsonConvert.DeserializeObject&lt;T&gt;(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LogUtil.Error(<span class=\"string\">$\"Redis.Get转换失败：<span class=\"subst\">&#123;ex.Message&#125;</span>,数据：<span class=\"subst\">&#123;<span class=\"keyword\">value</span>&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 移除数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _redisCache.Remove(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 重置数据</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"expireTime\"&gt;</span>过期时间<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Replace</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span>, <span class=\"keyword\">int</span> expireTime = <span class=\"number\">10</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(key))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Remove(key);</span><br><span class=\"line\">        Add(key, <span class=\"keyword\">value</span>, expireTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具体使用的方法，这里不多写了，代码地址见<a href=\"/2019/07/19/net-core-webapi-main/\">net core Webapi 总目录</a>，感觉代码贴的多了，自己也习惯了复制粘贴，看一个封装好的方法，就要去看他的源码（如果只是用的话就算了），这样对方法的使用以及自身的业务需要封装会有很好的帮助，毕竟会用是第一步，会改是第二步，封装是第三步，自己写那就是最终级了（这句纯属自勉）。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>好了，写完之后，习惯来一遍测试，不想自己整理的东西最终还是不能用，千篇一律不可怕，可怕的是不知道最终的效果。<br><strong>新增</strong><br><img src=\"/2019/09/23/net-core-redis/4.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/5.png\" alt=\"结果\"><br><strong>获取</strong><br><img src=\"/2019/09/23/net-core-redis/6.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/7.png\" alt=\"结果\"><br><strong>覆盖</strong><br>ps:说是覆盖，其实就是删除然后新增-,-|||<br><img src=\"/2019/09/23/net-core-redis/8.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/9.png\" alt=\"结果\"><br><strong>删除</strong><br><img src=\"/2019/09/23/net-core-redis/10.png\" alt=\"测试\"><br><img src=\"/2019/09/23/net-core-redis/11.png\" alt=\"结果\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>写到这里基本上都结束了，简单的说明了Redis的使用，后续还是会不断更新，比如那么多database，如果随意切换，redis存储之后会不会有什么其他问题等等，<strong>学以致用，用方知错，错而能改，改了就行</strong>。</p>\n"},{"title":"net core Webapi基础工程搭建（六）——数据库操作_Part 2","date":"2019-07-19T09:49:58.000Z","_content":"\n### 前言\n昨天是写着写着发现，时间不早了，已经养成了晚上下班抽时间看看能写点儿啥的习惯（貌似），今天实在是不想让昨天没做完的事情影响，所以又坐下，沉下心（周末了），开始把数据库这块儿的补充完整。\n\n昨天已经介绍过大部分的东西，包括方法封装也是基本的展示了下，实际上应该先介绍这一篇，从怎么用来引导封装类库，但是既然写都写出来了就不想再调整了，今天就主要说下怎么实际使用方法吧，需要查看具体使用的类库可查看[net core Webapi基础工程搭建（六）——数据库操作_Part 1](/2019/07/18/net-core-sqlsugar-1/)。（懒的不能行）\n\n### 开始\n闲话不多说，Service层搞起，新建两个文件夹，一个**Interfaces**，一个**Implements**，另外顺带新建个**Common**的文件夹，把上一篇的三个类放进去（纯粹是看的，归类，放不放不影响使用）。\n\n![Service](net-core-sqlsugar-2/1.png)\n上一篇我们创建了一个StudentEntity这个对象，忘了的朋友可以去看下。\n新建一个**IStudentService**接口，继承IBaseService\n```csharp\n    public interface IStudentService : IBaseService<StudentEntity>\n    {\n    }\n```\n新建一个**StudentService**实现类，继承BaseService，实现IStudentService\n```csharp\n    public class StudentService : BaseService<StudentEntity>, IStudentService\n    {\n    }\n```\n好了，完了，回家睡觉吧。\n\n### 使用\n如果你看到上面的直接走了，对不起，娱乐一下，做开发千万不敢像乌鸦学盖房子，没听过自行度娘，我也不会讲故事。\n\n我们需要在StartUp这里将接口与实现关联，有些博客会介绍自动关联用于解耦，需要也可以自行百度。\n\n> 补充说明，昨天好像忘记在WebApi工程引入Service与Entity两个工程了，见谅见谅，特此补充。\n\n这里我在Service项目下Common下新建Depends文件夹，新建一个类**ServiceInjection**，在这统一放接口与实现的对应关系。\n\n```csharp\n    public class ServiceInjection\n    {\n        public static void ConfigureRepository(IServiceCollection services)\n        {\n            services.AddSingleton<IStudentService, StudentService>();\n        }\n    }\n```\n\n对于依赖注入，这里简短穿插几句，后续有新的感受会再补充。\n\n| 方法 |  说明 |\n|--|--|\n| Transient | 每一次调用都会创建一个新的实例 |\n| Scoped | 一个作用域中只实例化一个 |\n| Singleton | 整个应用程序生命周期以内只创建一个实例  |\n\n然后我们在StartUp的ConfigureServices最前面加上这句话，这里在构造函数加上这句，用途就是由AprilConfig来统一接管配置信息。\n```csharp\n\t\tpublic Startup(IConfiguration configuration)\n        {\n\t\t\t...之前的东西\n            AprilConfig.InitConfig(configuration);\n        }\n\t\t\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ServiceInjection.ConfigureRepository(services);\n            \n\t\t\t...之前的东西\n\t\t}\n```\n当然对应要有接收的方法。\n```csharp\n    public class AprilConfig\n    {\n        public static IServiceProvider ServiceProvider;\n        public static IConfiguration Configuration;\n\n        public static void InitConfig(IConfiguration _configuration)\n        {\n            Configuration = _configuration;\n        }\n\t}\n```\n\n好了，所有的都写好后，我们继续拿万恶的Values控制器（多好的开刀对象）实验。\n\n在这之前，确定好你的数据库是哪类，SqlServer请按1，MySql请按0，其他请自行查看文档。\n\n为了方便项目统一管理，我们要好好利用appsettings，就像我们当时使用web.config一样，连接串自己根据实际情况修改。\n```json\n  //新加一个\n  \"DefaultSqlConnectionString\": {\n    \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"\n  }\n```\n在我们Util层的**AprilConfig**，来获取参数。\n\n```csharp\n        private static string _MySqlConnectionString = string.Empty;\n        /// <summary>\n        /// MySql默认连接串\n        /// </summary>\n        public static string MySqlConnectionString\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_MySqlConnectionString))\n                {\n                    _MySqlConnectionString = Configuration[\"DefaultSqlConnectionString:MySql\"];\n                }\n                return _MySqlConnectionString;\n            }\n        }\n```\n\n然后我们来修改BaseService当时留的连接串信息。\n![BaseService](net-core-sqlsugar-2/2.png)\n创建表结构，这里说明下，不是说非要创建，毕竟SqlSugar有CodeFirst（当然也有DbFirst），需要的朋友可去文档查看，也比较简单，在程序启动的时候来判断是否有表，或者专门做个接口做初始化操作也可以，下图做用法简介，具体还是查看文档吧，毕竟还有备份啊改列名什么的。\n![说明](net-core-sqlsugar-2/3.png)\n![mysql](net-core-sqlsugar-2/4.png)\n\n万事具备，之前Values这个挨千刀的东风，构造函数来获取IStudentService这个接口。\n\n```csharp\n    public class ValuesController : ControllerBase\n    {\n\n        private readonly IStudentService _service;\n\n        public ValuesController(IStudentService service)\n        {\n            _service = service;\n        }\n    }\n```\n\n- **插入**\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n            StudentEntity entity = new StudentEntity();\n            entity.Name = \"小明\";\n            entity.Age = 18;\n            entity.Number = \"007\";\n            entity.Sex = 0;\n            entity.Address = \"大洛阳\";\n            _service.Insert(entity);\n            return new string[] { \"value1\", \"value2\" };\n        }\n```\n![插入](net-core-sqlsugar-2/5.png)\n- **修改**\n这里刚好也演示下SqlFilterEntity这个自己写的方法的用法，并且扩展了下实体的方法，方便使用。\n\n*SqlFilterEntity扩展方法*\n```csharp\n\t\t//...之前的实体对象\n\t\t\n\t\t/// <summary>\n        /// 添加查询条件\n        /// </summary>\n        /// <param name=\"filter\">条件</param>\n        /// <param name=\"relation\">关系</param>\n        public void Append(string filter, string relation = \"and\")\n        {\n            if (string.IsNullOrEmpty(filter))\n            {\n                return;\n            }\n            if (Filter.Length > 0)\n            {\n                Filter += relation;\n            }\n            Filter += filter;\n        }\n        /// <summary>\n        /// 添加查询参数\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        public void Add(string key, object value)\n        {\n            if (string.IsNullOrEmpty(key) || value == null)\n            {\n                return;\n            }\n            if (Value == null)\n            {\n                Value = new Dictionary<string, object>();\n            }\n            if (Value.ContainsKey(key))\n            {\n                Value[key] = value;\n            }\n            else\n            {\n                Value.Add(key, value);\n            }\n        }\n```\n\n*修改测试*\n```csharp\n\t\t\tStudentEntity entity = null;\n            SqlFilterEntity filter = new SqlFilterEntity();\n            filter.Append($\"ID=@ID\");\n            filter.Add(\"@ID\", 1);\n            entity = _service.GetEntity(filter);\n            if (entity != null)\n            {\n                entity.Name = \"我被修改了\";\n                _service.Update(entity);\n            }\n\t\n```\n![修改](net-core-sqlsugar-2/6.png)\n\n- **删除**\n删除这个不多说，就是把修改的换个方法。\n![删除](net-core-sqlsugar-2/7.png)\n![删除](net-core-sqlsugar-2/8.png)\n\n- **查看**\n\n这里直接做分页的测试，拿Values/{id}这个接口做实验。\n```csharp\n        [HttpGet(\"{id}\")]\n        public ActionResult<string> Get(int id)\n        {\n            string value = string.Empty;\n            //value = CacheUtil.Get<string>(\"cachetest\");\n            //value = SessionUtil.GetSession(\"test\");\n            //value = CookieUtil.GetCookies(\"apirlcookietest\");\n\n            int count = 0;\n            List<StudentEntity> lists = _service.GetPageList(id, 10, \"\", null, \"\", out count);\n\n            value = JsonConvert.SerializeObject(lists);\n\n            return value;\n        }\n```\n![查看](net-core-sqlsugar-2/9.png)\n\n### 小结\n\n这里大致上介绍了SqlSugar的用法已经一些基础的不能基础的封装，实际使用的话，肯定需要扩展完善的，但是作为教程来讲，我也不可能把全部的情况都考虑到，毕竟业务不同，**没有万金油，只有不停的完善更新**，业务场景多了，功能就完善了，一步一步来，一口吃不成个胖子（这个胖子不是你认识的那个胖子），不过还是感慨下这些开源的好类库，真的是方便了开发人员，为了解放程序猿的双手（yy）做出了嗨翻天的贡献，好了，回归正题，下一篇**Aop的测试以及小东西**。","source":"_posts/net-core-sqlsugar-2.md","raw":"---\ntitle: net core Webapi基础工程搭建（六）——数据库操作_Part 2\ndate: 2019-07-19 17:49:58\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n昨天是写着写着发现，时间不早了，已经养成了晚上下班抽时间看看能写点儿啥的习惯（貌似），今天实在是不想让昨天没做完的事情影响，所以又坐下，沉下心（周末了），开始把数据库这块儿的补充完整。\n\n昨天已经介绍过大部分的东西，包括方法封装也是基本的展示了下，实际上应该先介绍这一篇，从怎么用来引导封装类库，但是既然写都写出来了就不想再调整了，今天就主要说下怎么实际使用方法吧，需要查看具体使用的类库可查看[net core Webapi基础工程搭建（六）——数据库操作_Part 1](/2019/07/18/net-core-sqlsugar-1/)。（懒的不能行）\n\n### 开始\n闲话不多说，Service层搞起，新建两个文件夹，一个**Interfaces**，一个**Implements**，另外顺带新建个**Common**的文件夹，把上一篇的三个类放进去（纯粹是看的，归类，放不放不影响使用）。\n\n![Service](net-core-sqlsugar-2/1.png)\n上一篇我们创建了一个StudentEntity这个对象，忘了的朋友可以去看下。\n新建一个**IStudentService**接口，继承IBaseService\n```csharp\n    public interface IStudentService : IBaseService<StudentEntity>\n    {\n    }\n```\n新建一个**StudentService**实现类，继承BaseService，实现IStudentService\n```csharp\n    public class StudentService : BaseService<StudentEntity>, IStudentService\n    {\n    }\n```\n好了，完了，回家睡觉吧。\n\n### 使用\n如果你看到上面的直接走了，对不起，娱乐一下，做开发千万不敢像乌鸦学盖房子，没听过自行度娘，我也不会讲故事。\n\n我们需要在StartUp这里将接口与实现关联，有些博客会介绍自动关联用于解耦，需要也可以自行百度。\n\n> 补充说明，昨天好像忘记在WebApi工程引入Service与Entity两个工程了，见谅见谅，特此补充。\n\n这里我在Service项目下Common下新建Depends文件夹，新建一个类**ServiceInjection**，在这统一放接口与实现的对应关系。\n\n```csharp\n    public class ServiceInjection\n    {\n        public static void ConfigureRepository(IServiceCollection services)\n        {\n            services.AddSingleton<IStudentService, StudentService>();\n        }\n    }\n```\n\n对于依赖注入，这里简短穿插几句，后续有新的感受会再补充。\n\n| 方法 |  说明 |\n|--|--|\n| Transient | 每一次调用都会创建一个新的实例 |\n| Scoped | 一个作用域中只实例化一个 |\n| Singleton | 整个应用程序生命周期以内只创建一个实例  |\n\n然后我们在StartUp的ConfigureServices最前面加上这句话，这里在构造函数加上这句，用途就是由AprilConfig来统一接管配置信息。\n```csharp\n\t\tpublic Startup(IConfiguration configuration)\n        {\n\t\t\t...之前的东西\n            AprilConfig.InitConfig(configuration);\n        }\n\t\t\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ServiceInjection.ConfigureRepository(services);\n            \n\t\t\t...之前的东西\n\t\t}\n```\n当然对应要有接收的方法。\n```csharp\n    public class AprilConfig\n    {\n        public static IServiceProvider ServiceProvider;\n        public static IConfiguration Configuration;\n\n        public static void InitConfig(IConfiguration _configuration)\n        {\n            Configuration = _configuration;\n        }\n\t}\n```\n\n好了，所有的都写好后，我们继续拿万恶的Values控制器（多好的开刀对象）实验。\n\n在这之前，确定好你的数据库是哪类，SqlServer请按1，MySql请按0，其他请自行查看文档。\n\n为了方便项目统一管理，我们要好好利用appsettings，就像我们当时使用web.config一样，连接串自己根据实际情况修改。\n```json\n  //新加一个\n  \"DefaultSqlConnectionString\": {\n    \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"\n  }\n```\n在我们Util层的**AprilConfig**，来获取参数。\n\n```csharp\n        private static string _MySqlConnectionString = string.Empty;\n        /// <summary>\n        /// MySql默认连接串\n        /// </summary>\n        public static string MySqlConnectionString\n        {\n            get\n            {\n                if (string.IsNullOrEmpty(_MySqlConnectionString))\n                {\n                    _MySqlConnectionString = Configuration[\"DefaultSqlConnectionString:MySql\"];\n                }\n                return _MySqlConnectionString;\n            }\n        }\n```\n\n然后我们来修改BaseService当时留的连接串信息。\n![BaseService](net-core-sqlsugar-2/2.png)\n创建表结构，这里说明下，不是说非要创建，毕竟SqlSugar有CodeFirst（当然也有DbFirst），需要的朋友可去文档查看，也比较简单，在程序启动的时候来判断是否有表，或者专门做个接口做初始化操作也可以，下图做用法简介，具体还是查看文档吧，毕竟还有备份啊改列名什么的。\n![说明](net-core-sqlsugar-2/3.png)\n![mysql](net-core-sqlsugar-2/4.png)\n\n万事具备，之前Values这个挨千刀的东风，构造函数来获取IStudentService这个接口。\n\n```csharp\n    public class ValuesController : ControllerBase\n    {\n\n        private readonly IStudentService _service;\n\n        public ValuesController(IStudentService service)\n        {\n            _service = service;\n        }\n    }\n```\n\n- **插入**\n```csharp\n        [HttpGet]\n        public ActionResult<IEnumerable<string>> Get()\n        {\n            StudentEntity entity = new StudentEntity();\n            entity.Name = \"小明\";\n            entity.Age = 18;\n            entity.Number = \"007\";\n            entity.Sex = 0;\n            entity.Address = \"大洛阳\";\n            _service.Insert(entity);\n            return new string[] { \"value1\", \"value2\" };\n        }\n```\n![插入](net-core-sqlsugar-2/5.png)\n- **修改**\n这里刚好也演示下SqlFilterEntity这个自己写的方法的用法，并且扩展了下实体的方法，方便使用。\n\n*SqlFilterEntity扩展方法*\n```csharp\n\t\t//...之前的实体对象\n\t\t\n\t\t/// <summary>\n        /// 添加查询条件\n        /// </summary>\n        /// <param name=\"filter\">条件</param>\n        /// <param name=\"relation\">关系</param>\n        public void Append(string filter, string relation = \"and\")\n        {\n            if (string.IsNullOrEmpty(filter))\n            {\n                return;\n            }\n            if (Filter.Length > 0)\n            {\n                Filter += relation;\n            }\n            Filter += filter;\n        }\n        /// <summary>\n        /// 添加查询参数\n        /// </summary>\n        /// <param name=\"key\">键</param>\n        /// <param name=\"value\">值</param>\n        public void Add(string key, object value)\n        {\n            if (string.IsNullOrEmpty(key) || value == null)\n            {\n                return;\n            }\n            if (Value == null)\n            {\n                Value = new Dictionary<string, object>();\n            }\n            if (Value.ContainsKey(key))\n            {\n                Value[key] = value;\n            }\n            else\n            {\n                Value.Add(key, value);\n            }\n        }\n```\n\n*修改测试*\n```csharp\n\t\t\tStudentEntity entity = null;\n            SqlFilterEntity filter = new SqlFilterEntity();\n            filter.Append($\"ID=@ID\");\n            filter.Add(\"@ID\", 1);\n            entity = _service.GetEntity(filter);\n            if (entity != null)\n            {\n                entity.Name = \"我被修改了\";\n                _service.Update(entity);\n            }\n\t\n```\n![修改](net-core-sqlsugar-2/6.png)\n\n- **删除**\n删除这个不多说，就是把修改的换个方法。\n![删除](net-core-sqlsugar-2/7.png)\n![删除](net-core-sqlsugar-2/8.png)\n\n- **查看**\n\n这里直接做分页的测试，拿Values/{id}这个接口做实验。\n```csharp\n        [HttpGet(\"{id}\")]\n        public ActionResult<string> Get(int id)\n        {\n            string value = string.Empty;\n            //value = CacheUtil.Get<string>(\"cachetest\");\n            //value = SessionUtil.GetSession(\"test\");\n            //value = CookieUtil.GetCookies(\"apirlcookietest\");\n\n            int count = 0;\n            List<StudentEntity> lists = _service.GetPageList(id, 10, \"\", null, \"\", out count);\n\n            value = JsonConvert.SerializeObject(lists);\n\n            return value;\n        }\n```\n![查看](net-core-sqlsugar-2/9.png)\n\n### 小结\n\n这里大致上介绍了SqlSugar的用法已经一些基础的不能基础的封装，实际使用的话，肯定需要扩展完善的，但是作为教程来讲，我也不可能把全部的情况都考虑到，毕竟业务不同，**没有万金油，只有不停的完善更新**，业务场景多了，功能就完善了，一步一步来，一口吃不成个胖子（这个胖子不是你认识的那个胖子），不过还是感慨下这些开源的好类库，真的是方便了开发人员，为了解放程序猿的双手（yy）做出了嗨翻天的贡献，好了，回归正题，下一篇**Aop的测试以及小东西**。","slug":"net-core-sqlsugar-2","published":1,"updated":"2019-09-30T05:47:17.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m41003w9sv79xftjxlw","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>昨天是写着写着发现，时间不早了，已经养成了晚上下班抽时间看看能写点儿啥的习惯（貌似），今天实在是不想让昨天没做完的事情影响，所以又坐下，沉下心（周末了），开始把数据库这块儿的补充完整。</p>\n<p>昨天已经介绍过大部分的东西，包括方法封装也是基本的展示了下，实际上应该先介绍这一篇，从怎么用来引导封装类库，但是既然写都写出来了就不想再调整了，今天就主要说下怎么实际使用方法吧，需要查看具体使用的类库可查看<a href=\"/2019/07/18/net-core-sqlsugar-1/\">net core Webapi基础工程搭建（六）——数据库操作_Part 1</a>。（懒的不能行）</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>闲话不多说，Service层搞起，新建两个文件夹，一个<strong>Interfaces</strong>，一个<strong>Implements</strong>，另外顺带新建个<strong>Common</strong>的文件夹，把上一篇的三个类放进去（纯粹是看的，归类，放不放不影响使用）。</p>\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/1.png\" alt=\"Service\"><br>上一篇我们创建了一个StudentEntity这个对象，忘了的朋友可以去看下。<br>新建一个<strong>IStudentService</strong>接口，继承IBaseService</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentService : IBaseService&lt;StudentEntity&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<strong>StudentService</strong>实现类，继承BaseService，实现IStudentService</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StudentService : BaseService&lt;StudentEntity&gt;, IStudentService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，完了，回家睡觉吧。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>如果你看到上面的直接走了，对不起，娱乐一下，做开发千万不敢像乌鸦学盖房子，没听过自行度娘，我也不会讲故事。</p>\n<p>我们需要在StartUp这里将接口与实现关联，有些博客会介绍自动关联用于解耦，需要也可以自行百度。</p>\n<blockquote>\n<p>补充说明，昨天好像忘记在WebApi工程引入Service与Entity两个工程了，见谅见谅，特此补充。</p>\n</blockquote>\n<p>这里我在Service项目下Common下新建Depends文件夹，新建一个类<strong>ServiceInjection</strong>，在这统一放接口与实现的对应关系。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceInjection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureRepository</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddSingleton&lt;IStudentService, StudentService&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于依赖注入，这里简短穿插几句，后续有新的感受会再补充。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Transient</td>\n<td>每一次调用都会创建一个新的实例</td>\n</tr>\n<tr>\n<td>Scoped</td>\n<td>一个作用域中只实例化一个</td>\n</tr>\n<tr>\n<td>Singleton</td>\n<td>整个应用程序生命周期以内只创建一个实例</td>\n</tr>\n</tbody></table>\n<p>然后我们在StartUp的ConfigureServices最前面加上这句话，这里在构造函数加上这句，用途就是由AprilConfig来统一接管配置信息。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">\t...之前的东西</span><br><span class=\"line\">          AprilConfig.InitConfig(configuration);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          ServiceInjection.ConfigureRepository(services);</span><br><span class=\"line\">          </span><br><span class=\"line\">\t...之前的东西</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然对应要有接收的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilConfig</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceProvider ServiceProvider;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfiguration Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">InitConfig</span>(<span class=\"params\">IConfiguration _configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Configuration = _configuration;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，所有的都写好后，我们继续拿万恶的Values控制器（多好的开刀对象）实验。</p>\n<p>在这之前，确定好你的数据库是哪类，SqlServer请按1，MySql请按0，其他请自行查看文档。</p>\n<p>为了方便项目统一管理，我们要好好利用appsettings，就像我们当时使用web.config一样，连接串自己根据实际情况修改。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新加一个</span><br><span class=\"line\">\"DefaultSqlConnectionString\": &#123;</span><br><span class=\"line\">  \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我们Util层的<strong>AprilConfig</strong>，来获取参数。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _MySqlConnectionString = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> MySql默认连接串</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> MySqlConnectionString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_MySqlConnectionString))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _MySqlConnectionString = Configuration[<span class=\"string\">\"DefaultSqlConnectionString:MySql\"</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _MySqlConnectionString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来修改BaseService当时留的连接串信息。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/2.png\" alt=\"BaseService\"><br>创建表结构，这里说明下，不是说非要创建，毕竟SqlSugar有CodeFirst（当然也有DbFirst），需要的朋友可去文档查看，也比较简单，在程序启动的时候来判断是否有表，或者专门做个接口做初始化操作也可以，下图做用法简介，具体还是查看文档吧，毕竟还有备份啊改列名什么的。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/3.png\" alt=\"说明\"><br><img src=\"/2019/07/19/net-core-sqlsugar-2/4.png\" alt=\"mysql\"></p>\n<p>万事具备，之前Values这个挨千刀的东风，构造函数来获取IStudentService这个接口。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IStudentService _service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ValuesController</span>(<span class=\"params\">IStudentService service</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _service = service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>插入</strong><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    StudentEntity entity = <span class=\"keyword\">new</span> StudentEntity();</span><br><span class=\"line\">    entity.Name = <span class=\"string\">\"小明\"</span>;</span><br><span class=\"line\">    entity.Age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    entity.Number = <span class=\"string\">\"007\"</span>;</span><br><span class=\"line\">    entity.Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    entity.Address = <span class=\"string\">\"大洛阳\"</span>;</span><br><span class=\"line\">    _service.Insert(entity);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/5.png\" alt=\"插入\"></p>\n<ul>\n<li><strong>修改</strong><br>这里刚好也演示下SqlFilterEntity这个自己写的方法的用法，并且扩展了下实体的方法，方便使用。</li>\n</ul>\n<p><em>SqlFilterEntity扩展方法</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...之前的实体对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 添加查询条件</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"relation\"&gt;</span>关系<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Append</span>(<span class=\"params\"><span class=\"keyword\">string</span> filter, <span class=\"keyword\">string</span> relation = <span class=\"string\">\"and\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(filter))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Filter.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Filter += relation;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          Filter += filter;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 添加查询参数</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(key) || <span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Value.ContainsKey(key))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value[key] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value.Add(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>修改测试</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StudentEntity entity = <span class=\"literal\">null</span>;</span><br><span class=\"line\">         SqlFilterEntity filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">         filter.Append(<span class=\"string\">$\"ID=@ID\"</span>);</span><br><span class=\"line\">         filter.Add(<span class=\"string\">\"@ID\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">         entity = _service.GetEntity(filter);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (entity != <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             entity.Name = <span class=\"string\">\"我被修改了\"</span>;</span><br><span class=\"line\">             _service.Update(entity);</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/6.png\" alt=\"修改\"></p>\n<ul>\n<li><p><strong>删除</strong><br>删除这个不多说，就是把修改的换个方法。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/7.png\" alt=\"删除\"><br><img src=\"/2019/07/19/net-core-sqlsugar-2/8.png\" alt=\"删除\"></p>\n</li>\n<li><p><strong>查看</strong></p>\n</li>\n</ul>\n<p>这里直接做分页的测试，拿Values/{id}这个接口做实验。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//value = CacheUtil.Get&lt;string&gt;(\"cachetest\");</span></span><br><span class=\"line\">    <span class=\"comment\">//value = SessionUtil.GetSession(\"test\");</span></span><br><span class=\"line\">    <span class=\"comment\">//value = CookieUtil.GetCookies(\"apirlcookietest\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    List&lt;StudentEntity&gt; lists = _service.GetPageList(id, <span class=\"number\">10</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">out</span> count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">value</span> = JsonConvert.SerializeObject(lists);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/9.png\" alt=\"查看\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这里大致上介绍了SqlSugar的用法已经一些基础的不能基础的封装，实际使用的话，肯定需要扩展完善的，但是作为教程来讲，我也不可能把全部的情况都考虑到，毕竟业务不同，<strong>没有万金油，只有不停的完善更新</strong>，业务场景多了，功能就完善了，一步一步来，一口吃不成个胖子（这个胖子不是你认识的那个胖子），不过还是感慨下这些开源的好类库，真的是方便了开发人员，为了解放程序猿的双手（yy）做出了嗨翻天的贡献，好了，回归正题，下一篇<strong>Aop的测试以及小东西</strong>。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>昨天是写着写着发现，时间不早了，已经养成了晚上下班抽时间看看能写点儿啥的习惯（貌似），今天实在是不想让昨天没做完的事情影响，所以又坐下，沉下心（周末了），开始把数据库这块儿的补充完整。</p>\n<p>昨天已经介绍过大部分的东西，包括方法封装也是基本的展示了下，实际上应该先介绍这一篇，从怎么用来引导封装类库，但是既然写都写出来了就不想再调整了，今天就主要说下怎么实际使用方法吧，需要查看具体使用的类库可查看<a href=\"/2019/07/18/net-core-sqlsugar-1/\">net core Webapi基础工程搭建（六）——数据库操作_Part 1</a>。（懒的不能行）</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>闲话不多说，Service层搞起，新建两个文件夹，一个<strong>Interfaces</strong>，一个<strong>Implements</strong>，另外顺带新建个<strong>Common</strong>的文件夹，把上一篇的三个类放进去（纯粹是看的，归类，放不放不影响使用）。</p>\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/1.png\" alt=\"Service\"><br>上一篇我们创建了一个StudentEntity这个对象，忘了的朋友可以去看下。<br>新建一个<strong>IStudentService</strong>接口，继承IBaseService</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentService : IBaseService&lt;StudentEntity&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<strong>StudentService</strong>实现类，继承BaseService，实现IStudentService</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class StudentService : BaseService&lt;StudentEntity&gt;, IStudentService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，完了，回家睡觉吧。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>如果你看到上面的直接走了，对不起，娱乐一下，做开发千万不敢像乌鸦学盖房子，没听过自行度娘，我也不会讲故事。</p>\n<p>我们需要在StartUp这里将接口与实现关联，有些博客会介绍自动关联用于解耦，需要也可以自行百度。</p>\n<blockquote>\n<p>补充说明，昨天好像忘记在WebApi工程引入Service与Entity两个工程了，见谅见谅，特此补充。</p>\n</blockquote>\n<p>这里我在Service项目下Common下新建Depends文件夹，新建一个类<strong>ServiceInjection</strong>，在这统一放接口与实现的对应关系。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceInjection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureRepository</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        services.AddSingleton&lt;IStudentService, StudentService&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于依赖注入，这里简短穿插几句，后续有新的感受会再补充。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Transient</td>\n<td>每一次调用都会创建一个新的实例</td>\n</tr>\n<tr>\n<td>Scoped</td>\n<td>一个作用域中只实例化一个</td>\n</tr>\n<tr>\n<td>Singleton</td>\n<td>整个应用程序生命周期以内只创建一个实例</td>\n</tr>\n</tbody></table>\n<p>然后我们在StartUp的ConfigureServices最前面加上这句话，这里在构造函数加上这句，用途就是由AprilConfig来统一接管配置信息。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">\t...之前的东西</span><br><span class=\"line\">          AprilConfig.InitConfig(configuration);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          ServiceInjection.ConfigureRepository(services);</span><br><span class=\"line\">          </span><br><span class=\"line\">\t...之前的东西</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然对应要有接收的方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilConfig</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IServiceProvider ServiceProvider;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfiguration Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">InitConfig</span>(<span class=\"params\">IConfiguration _configuration</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Configuration = _configuration;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，所有的都写好后，我们继续拿万恶的Values控制器（多好的开刀对象）实验。</p>\n<p>在这之前，确定好你的数据库是哪类，SqlServer请按1，MySql请按0，其他请自行查看文档。</p>\n<p>为了方便项目统一管理，我们要好好利用appsettings，就像我们当时使用web.config一样，连接串自己根据实际情况修改。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新加一个</span><br><span class=\"line\">\"DefaultSqlConnectionString\": &#123;</span><br><span class=\"line\">  \"MySql\": \"server=127.0.0.1;userid=root;password=root;database=test;\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我们Util层的<strong>AprilConfig</strong>，来获取参数。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> _MySqlConnectionString = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> MySql默认连接串</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> MySqlConnectionString</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(_MySqlConnectionString))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _MySqlConnectionString = Configuration[<span class=\"string\">\"DefaultSqlConnectionString:MySql\"</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _MySqlConnectionString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们来修改BaseService当时留的连接串信息。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/2.png\" alt=\"BaseService\"><br>创建表结构，这里说明下，不是说非要创建，毕竟SqlSugar有CodeFirst（当然也有DbFirst），需要的朋友可去文档查看，也比较简单，在程序启动的时候来判断是否有表，或者专门做个接口做初始化操作也可以，下图做用法简介，具体还是查看文档吧，毕竟还有备份啊改列名什么的。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/3.png\" alt=\"说明\"><br><img src=\"/2019/07/19/net-core-sqlsugar-2/4.png\" alt=\"mysql\"></p>\n<p>万事具备，之前Values这个挨千刀的东风，构造函数来获取IStudentService这个接口。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValuesController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IStudentService _service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ValuesController</span>(<span class=\"params\">IStudentService service</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        _service = service;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>插入</strong><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> ActionResult&lt;IEnumerable&lt;<span class=\"keyword\">string</span>&gt;&gt; Get()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    StudentEntity entity = <span class=\"keyword\">new</span> StudentEntity();</span><br><span class=\"line\">    entity.Name = <span class=\"string\">\"小明\"</span>;</span><br><span class=\"line\">    entity.Age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    entity.Number = <span class=\"string\">\"007\"</span>;</span><br><span class=\"line\">    entity.Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    entity.Address = <span class=\"string\">\"大洛阳\"</span>;</span><br><span class=\"line\">    _service.Insert(entity);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] &#123; <span class=\"string\">\"value1\"</span>, <span class=\"string\">\"value2\"</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/5.png\" alt=\"插入\"></p>\n<ul>\n<li><strong>修改</strong><br>这里刚好也演示下SqlFilterEntity这个自己写的方法的用法，并且扩展了下实体的方法，方便使用。</li>\n</ul>\n<p><em>SqlFilterEntity扩展方法</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...之前的实体对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 添加查询条件</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"relation\"&gt;</span>关系<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Append</span>(<span class=\"params\"><span class=\"keyword\">string</span> filter, <span class=\"keyword\">string</span> relation = <span class=\"string\">\"and\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(filter))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Filter.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Filter += relation;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          Filter += filter;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 添加查询参数</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"key\"&gt;</span>键<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"value\"&gt;</span>值<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> key, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(key) || <span class=\"keyword\">value</span> == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Value == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt;();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (Value.ContainsKey(key))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value[key] = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              Value.Add(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>修改测试</em></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StudentEntity entity = <span class=\"literal\">null</span>;</span><br><span class=\"line\">         SqlFilterEntity filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">         filter.Append(<span class=\"string\">$\"ID=@ID\"</span>);</span><br><span class=\"line\">         filter.Add(<span class=\"string\">\"@ID\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">         entity = _service.GetEntity(filter);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (entity != <span class=\"literal\">null</span>)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             entity.Name = <span class=\"string\">\"我被修改了\"</span>;</span><br><span class=\"line\">             _service.Update(entity);</span><br><span class=\"line\">         &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/6.png\" alt=\"修改\"></p>\n<ul>\n<li><p><strong>删除</strong><br>删除这个不多说，就是把修改的换个方法。<br><img src=\"/2019/07/19/net-core-sqlsugar-2/7.png\" alt=\"删除\"><br><img src=\"/2019/07/19/net-core-sqlsugar-2/8.png\" alt=\"删除\"></p>\n</li>\n<li><p><strong>查看</strong></p>\n</li>\n</ul>\n<p>这里直接做分页的测试，拿Values/{id}这个接口做实验。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(<span class=\"meta-string\">\"&#123;id&#125;\"</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">int</span> id</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\">//value = CacheUtil.Get&lt;string&gt;(\"cachetest\");</span></span><br><span class=\"line\">    <span class=\"comment\">//value = SessionUtil.GetSession(\"test\");</span></span><br><span class=\"line\">    <span class=\"comment\">//value = CookieUtil.GetCookies(\"apirlcookietest\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    List&lt;StudentEntity&gt; lists = _service.GetPageList(id, <span class=\"number\">10</span>, <span class=\"string\">\"\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">out</span> count);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">value</span> = JsonConvert.SerializeObject(lists);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/07/19/net-core-sqlsugar-2/9.png\" alt=\"查看\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这里大致上介绍了SqlSugar的用法已经一些基础的不能基础的封装，实际使用的话，肯定需要扩展完善的，但是作为教程来讲，我也不可能把全部的情况都考虑到，毕竟业务不同，<strong>没有万金油，只有不停的完善更新</strong>，业务场景多了，功能就完善了，一步一步来，一口吃不成个胖子（这个胖子不是你认识的那个胖子），不过还是感慨下这些开源的好类库，真的是方便了开发人员，为了解放程序猿的双手（yy）做出了嗨翻天的贡献，好了，回归正题，下一篇<strong>Aop的测试以及小东西</strong>。</p>\n"},{"title":"net core WebApi——使用NPOI导入导出操作","date":"2019-10-18T06:47:36.000Z","_content":"\n### 前言\n时间过得好快，在之前升级到3.0之后，就感觉好久没再动过啥东西了，之前有问到Swagger的中文汉化，虽说我觉得这种操作的意义不是太大，也是多少鼓捣了下，其实个人感觉就是元素内容替换，既然可以执行js了那不就是网页上随便搞了，所以就没往下再折腾，但是现在需要用到Excel的操作了，那就不得不提起这个**NPOI**了。\n\n### NPOI\n在之前.net framework的时候，工程需要用到Excel的导入导出，当然用这个NPOI是偶然，也就是找了下这个看着可以就用了，之后遇到的各种问题也都找资料解决，什么多行合并啊，打开2007版本错误啊之类的，但是不得不说，用着还挺好，所以既然net core需要了，那就看看呗，刚好也是支持的。\n\n在**Util**我们来引入这个类库**NPOI**。![引入](net-core-v3-npoi/1.png)\n- **导入**\n\n在使用之前，我们先缕一下获取Excel数据需要哪些准备操作。\n\n1. 获取文件（这个就不多说）\n2. 获取sheet信息（考虑有可能多sheet操作）\n3. 根据sheet获取对应文件信息（多少行，当然有些还有合并）\n4. 根据合并行来判断第一行是否为标题\n5. 判断哪一行是列名（用于对应数据）\n6. 遍历每一行并根据每一行的数据格式来获取（有可能是公式/日期/数字/普通文本等等）\n\nok，大致上清楚了之后，我们就一步步来看吧，这里我创建一个**ExcelUtil**，来写第一个方法（这里只做说明展示吧）。\n\n```csharp\n\tpublic class ExcelUtil\n    {\n        /// <summary>\n        /// 读取Excel多Sheet数据\n        /// </summary>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"sheetName\">Sheet名</param>\n        /// <returns></returns>\n        public static DataSet ReadExcelToDataSet(string filePath, string sheetName = null)\n        {\n            if (!File.Exists(filePath))\n            {\n                LogUtil.Debug($\"未找到文件{filePath}\");\n                return null;\n            }\n            //获取文件信息\n            FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);\n            IWorkbook workbook = WorkbookFactory.Create(fs);\n            //获取sheet信息\n            ISheet sheet = null;\n            DataSet ds = new DataSet();\n            if (!string.IsNullOrEmpty(sheetName))\n            {\n                sheet = workbook.GetSheet(sheetName);\n                if (sheet == null)\n                {\n                    LogUtil.Debug($\"{filePath}未找到sheet:{sheetName}\");\n                    return null;\n                }\n                DataTable dt = ReadExcelFunc(workbook, sheet);\n                ds.Tables.Add(dt);\n            }\n            else\n            {\n                //遍历获取所有数据\n                int sheetCount = workbook.NumberOfSheets;\n                for (int i = 0; i < sheetCount; i++) {\n                    sheet = workbook.GetSheetAt(i);\n                    if (sheet != null)\n                    {\n                        DataTable dt = ReadExcelFunc(workbook, sheet);\n                        ds.Tables.Add(dt);\n                    }\n                }\n            }\n            return ds;\n        }\n\n        /// <summary>\n        /// 读取Excel信息\n        /// </summary>\n        /// <param name=\"workbook\">工作区</param>\n        /// <param name=\"sheet\">sheet</param>\n        /// <returns></returns>\n        private static DataTable ReadExcelFunc(IWorkbook workbook, ISheet sheet)\n        {\n            DataTable dt = new DataTable();\n            //获取列信息\n            IRow cells = sheet.GetRow(sheet.FirstRowNum);\n            int cellsCount = cells.PhysicalNumberOfCells;\n            int emptyCount = 0;\n            int cellIndex = sheet.FirstRowNum;\n            List<string> listColumns = new List<string>();\n            bool isFindColumn = false;\n            while (!isFindColumn)\n            {\n                emptyCount = 0;\n                listColumns.Clear();\n                for (int i = 0; i < cellsCount; i++)\n                {\n                    if (string.IsNullOrEmpty(cells.GetCell(i).StringCellValue))\n                    {\n                        emptyCount++;\n                    }\n                    listColumns.Add(cells.GetCell(i).StringCellValue);\n                }\n                //这里根据逻辑需要，空列超过多少判断\n                if (emptyCount == 0)\n                {\n                    isFindColumn = true;\n                }\n                cellIndex++;\n                cells = sheet.GetRow(cellIndex);\n            }\n\n            foreach (string columnName in listColumns)\n            {\n                if (dt.Columns.Contains(columnName))\n                {\n                    //如果允许有重复列名，自己做处理\n                    continue;\n                }\n                dt.Columns.Add(columnName, typeof(string));\n            }\n            //开始获取数据\n            int rowsCount = sheet.PhysicalNumberOfRows;\n            cellIndex += 1;\n            DataRow dr = null;\n            for (int i = cellIndex; i < rowsCount; i++) {\n                cells = sheet.GetRow(i);\n                dr = dt.NewRow();\n                for (int j = 0; j < dt.Columns.Count; j++)\n                {\n                    //这里可以判断数据类型\n                    switch (cells.GetCell(j).CellType)\n                    {\n                        case CellType.String:\n                            dr[j] = cells.GetCell(j).StringCellValue;\n                            break;\n                        case CellType.Numeric:\n                            dr[j] = cells.GetCell(j).NumericCellValue.ToString();\n                            break;\n                        case CellType.Unknown:\n                            dr[j] = cells.GetCell(j).StringCellValue;\n                            break;\n                    }\n                }\n                dt.Rows.Add(dr);\n            }\n            return dt;\n        }\n    }\n```\n\n文件的导入操作就不再演示了，之前有文件上传的相关操作方法[net core WebApi——文件分片上传与跨域请求处理](/2019/08/23/net-core-fileuploader-and-cors/)。\n\n导入的处理这里也只是大致演示下，具体需要的东西包括情况可能会比较复杂，但是终归数据还是那些，只是操作方法不同罢了（别说什么骚操作）。\n\n- **导出**\n\n相对于导入，导出的流程就比较简单了。\n\n1. 获取数据信息（sql或文件）\n2. 组成数据集合（List或DataTable）\n3. 创建sheet\n4. 设置相关样式等等\n5. 遍历赋值row\n6. 导出文件流\n\n了解完，我们就继续来搞吧。\n\n```csharp\n\t\t/// <summary>\n        /// 导出Excel文件\n        /// </summary>\n        /// <typeparam name=\"T\">数据类型</typeparam>\n        /// <param name=\"entities\">数据实体</param>\n        /// <param name=\"dicColumns\">列对应关系,如Name->姓名</param>\n        /// <param name=\"title\">标题</param>\n        /// <returns></returns>\n        public static byte[] ExportExcel<T>(List<T> entities,Dictionary<string,string> dicColumns, string title = null)\n        {\n            if (entities.Count <= 0)\n            {\n                return null;\n            }\n            //HSSFWorkbook => xls\n            //XSSFWorkbook => xlsx\n            IWorkbook workbook = new XSSFWorkbook();\n            ISheet sheet = workbook.CreateSheet(\"test\");//名称自定义\n            IRow cellsColumn = null;\n            IRow cellsData = null;\n            //获取实体属性名\n            PropertyInfo[] properties = entities[0].GetType().GetProperties();\n            int cellsIndex = 0;\n            //标题\n            if (!string.IsNullOrEmpty(title))\n            {\n                ICellStyle style = workbook.CreateCellStyle();\n                //边框  \n                style.BorderBottom = BorderStyle.Dotted;\n                style.BorderLeft = BorderStyle.Hair;\n                style.BorderRight = BorderStyle.Hair;\n                style.BorderTop = BorderStyle.Dotted;\n                //水平对齐  \n                style.Alignment = HorizontalAlignment.Left;\n\n                //垂直对齐  \n                style.VerticalAlignment = VerticalAlignment.Center;\n\n                //设置字体\n                IFont font = workbook.CreateFont();\n                font.FontHeightInPoints = 10;\n                font.FontName = \"微软雅黑\";\n                style.SetFont(font);\n\n                IRow cellsTitle = sheet.CreateRow(0);\n                cellsTitle.CreateCell(0).SetCellValue(title);\n                cellsTitle.RowStyle = style;\n                //合并单元格\n                sheet.AddMergedRegion(new NPOI.SS.Util.CellRangeAddress(0, 1, 0, dicColumns.Count - 1));\n                cellsIndex = 2;\n            }\n            //列名\n            cellsColumn = sheet.CreateRow(cellsIndex);\n            int index = 0;\n            Dictionary<string, int> columns = new Dictionary<string, int>();\n            foreach (var item in dicColumns)\n            {\n                cellsColumn.CreateCell(index).SetCellValue(item.Value);\n                columns.Add(item.Value, index);\n                index++;\n            }\n            cellsIndex += 1;\n            //数据\n            foreach (var item in entities)\n            {\n                cellsData = sheet.CreateRow(cellsIndex);\n                for (int i = 0; i < properties.Length; i++)\n                {\n                    if (!dicColumns.ContainsKey(properties[i].Name)) continue;\n                    //这里可以也根据数据类型做不同的赋值，也可以根据不同的格式参考上面的ICellStyle设置不同的样式\n                    object[] entityValues = new object[properties.Length];\n                    entityValues[i] = properties[i].GetValue(item);\n                    //获取对应列下标\n                    index = columns[dicColumns[properties[i].Name]];\n                    cellsData.CreateCell(index).SetCellValue(entityValues[i].ToString());\n                }\n                cellsIndex++;\n            }\n\n            byte[] buffer = null;\n            using (MemoryStream ms = new MemoryStream())\n            {\n                workbook.Write(ms);\n                buffer = ms.GetBuffer();\n                ms.Close();\n            }\n\n            return buffer;\n        }\n```\n\n### 测试\n写完，免不了一通测试，这里不多说了，直接上图。\n\n导入这里前面也说了没做界面上传什么的，就是一个文件路径，直接执行，Excel原文件我也会同步上传到代码仓库。\n![测试导入](net-core-v3-npoi/2.png)\n\n导出的话，这里也是用Swagger神器来测试。\n![测试导出](net-core-v3-npoi/3.png)\n数据库数据如下图。\n![测试](net-core-v3-npoi/4.png)\n\n![测试导出](net-core-v3-npoi/5.png)\n\n带标题导出。\n![测试](net-core-v3-npoi/6.png)\n\n### 小结\n最近真的是有点儿忙，一直在鼓捣opengl这类图形化的东西，各种矩阵转换模型转换，要么是用c++，qt写opengl，要么是用threejs搞opengl，唉，整的最近也只能是晚上回去摸索会儿net core，**工作总是不那么尽如人意，但是身为程序猿的我们，不都是不断的摸索前进么？我们可以不会，但那不是我们不整的借口。**","source":"_posts/net-core-v3-npoi.md","raw":"---\ntitle: net core WebApi——使用NPOI导入导出操作\ndate: 2019-10-18 14:47:36\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n时间过得好快，在之前升级到3.0之后，就感觉好久没再动过啥东西了，之前有问到Swagger的中文汉化，虽说我觉得这种操作的意义不是太大，也是多少鼓捣了下，其实个人感觉就是元素内容替换，既然可以执行js了那不就是网页上随便搞了，所以就没往下再折腾，但是现在需要用到Excel的操作了，那就不得不提起这个**NPOI**了。\n\n### NPOI\n在之前.net framework的时候，工程需要用到Excel的导入导出，当然用这个NPOI是偶然，也就是找了下这个看着可以就用了，之后遇到的各种问题也都找资料解决，什么多行合并啊，打开2007版本错误啊之类的，但是不得不说，用着还挺好，所以既然net core需要了，那就看看呗，刚好也是支持的。\n\n在**Util**我们来引入这个类库**NPOI**。![引入](net-core-v3-npoi/1.png)\n- **导入**\n\n在使用之前，我们先缕一下获取Excel数据需要哪些准备操作。\n\n1. 获取文件（这个就不多说）\n2. 获取sheet信息（考虑有可能多sheet操作）\n3. 根据sheet获取对应文件信息（多少行，当然有些还有合并）\n4. 根据合并行来判断第一行是否为标题\n5. 判断哪一行是列名（用于对应数据）\n6. 遍历每一行并根据每一行的数据格式来获取（有可能是公式/日期/数字/普通文本等等）\n\nok，大致上清楚了之后，我们就一步步来看吧，这里我创建一个**ExcelUtil**，来写第一个方法（这里只做说明展示吧）。\n\n```csharp\n\tpublic class ExcelUtil\n    {\n        /// <summary>\n        /// 读取Excel多Sheet数据\n        /// </summary>\n        /// <param name=\"filePath\">文件路径</param>\n        /// <param name=\"sheetName\">Sheet名</param>\n        /// <returns></returns>\n        public static DataSet ReadExcelToDataSet(string filePath, string sheetName = null)\n        {\n            if (!File.Exists(filePath))\n            {\n                LogUtil.Debug($\"未找到文件{filePath}\");\n                return null;\n            }\n            //获取文件信息\n            FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);\n            IWorkbook workbook = WorkbookFactory.Create(fs);\n            //获取sheet信息\n            ISheet sheet = null;\n            DataSet ds = new DataSet();\n            if (!string.IsNullOrEmpty(sheetName))\n            {\n                sheet = workbook.GetSheet(sheetName);\n                if (sheet == null)\n                {\n                    LogUtil.Debug($\"{filePath}未找到sheet:{sheetName}\");\n                    return null;\n                }\n                DataTable dt = ReadExcelFunc(workbook, sheet);\n                ds.Tables.Add(dt);\n            }\n            else\n            {\n                //遍历获取所有数据\n                int sheetCount = workbook.NumberOfSheets;\n                for (int i = 0; i < sheetCount; i++) {\n                    sheet = workbook.GetSheetAt(i);\n                    if (sheet != null)\n                    {\n                        DataTable dt = ReadExcelFunc(workbook, sheet);\n                        ds.Tables.Add(dt);\n                    }\n                }\n            }\n            return ds;\n        }\n\n        /// <summary>\n        /// 读取Excel信息\n        /// </summary>\n        /// <param name=\"workbook\">工作区</param>\n        /// <param name=\"sheet\">sheet</param>\n        /// <returns></returns>\n        private static DataTable ReadExcelFunc(IWorkbook workbook, ISheet sheet)\n        {\n            DataTable dt = new DataTable();\n            //获取列信息\n            IRow cells = sheet.GetRow(sheet.FirstRowNum);\n            int cellsCount = cells.PhysicalNumberOfCells;\n            int emptyCount = 0;\n            int cellIndex = sheet.FirstRowNum;\n            List<string> listColumns = new List<string>();\n            bool isFindColumn = false;\n            while (!isFindColumn)\n            {\n                emptyCount = 0;\n                listColumns.Clear();\n                for (int i = 0; i < cellsCount; i++)\n                {\n                    if (string.IsNullOrEmpty(cells.GetCell(i).StringCellValue))\n                    {\n                        emptyCount++;\n                    }\n                    listColumns.Add(cells.GetCell(i).StringCellValue);\n                }\n                //这里根据逻辑需要，空列超过多少判断\n                if (emptyCount == 0)\n                {\n                    isFindColumn = true;\n                }\n                cellIndex++;\n                cells = sheet.GetRow(cellIndex);\n            }\n\n            foreach (string columnName in listColumns)\n            {\n                if (dt.Columns.Contains(columnName))\n                {\n                    //如果允许有重复列名，自己做处理\n                    continue;\n                }\n                dt.Columns.Add(columnName, typeof(string));\n            }\n            //开始获取数据\n            int rowsCount = sheet.PhysicalNumberOfRows;\n            cellIndex += 1;\n            DataRow dr = null;\n            for (int i = cellIndex; i < rowsCount; i++) {\n                cells = sheet.GetRow(i);\n                dr = dt.NewRow();\n                for (int j = 0; j < dt.Columns.Count; j++)\n                {\n                    //这里可以判断数据类型\n                    switch (cells.GetCell(j).CellType)\n                    {\n                        case CellType.String:\n                            dr[j] = cells.GetCell(j).StringCellValue;\n                            break;\n                        case CellType.Numeric:\n                            dr[j] = cells.GetCell(j).NumericCellValue.ToString();\n                            break;\n                        case CellType.Unknown:\n                            dr[j] = cells.GetCell(j).StringCellValue;\n                            break;\n                    }\n                }\n                dt.Rows.Add(dr);\n            }\n            return dt;\n        }\n    }\n```\n\n文件的导入操作就不再演示了，之前有文件上传的相关操作方法[net core WebApi——文件分片上传与跨域请求处理](/2019/08/23/net-core-fileuploader-and-cors/)。\n\n导入的处理这里也只是大致演示下，具体需要的东西包括情况可能会比较复杂，但是终归数据还是那些，只是操作方法不同罢了（别说什么骚操作）。\n\n- **导出**\n\n相对于导入，导出的流程就比较简单了。\n\n1. 获取数据信息（sql或文件）\n2. 组成数据集合（List或DataTable）\n3. 创建sheet\n4. 设置相关样式等等\n5. 遍历赋值row\n6. 导出文件流\n\n了解完，我们就继续来搞吧。\n\n```csharp\n\t\t/// <summary>\n        /// 导出Excel文件\n        /// </summary>\n        /// <typeparam name=\"T\">数据类型</typeparam>\n        /// <param name=\"entities\">数据实体</param>\n        /// <param name=\"dicColumns\">列对应关系,如Name->姓名</param>\n        /// <param name=\"title\">标题</param>\n        /// <returns></returns>\n        public static byte[] ExportExcel<T>(List<T> entities,Dictionary<string,string> dicColumns, string title = null)\n        {\n            if (entities.Count <= 0)\n            {\n                return null;\n            }\n            //HSSFWorkbook => xls\n            //XSSFWorkbook => xlsx\n            IWorkbook workbook = new XSSFWorkbook();\n            ISheet sheet = workbook.CreateSheet(\"test\");//名称自定义\n            IRow cellsColumn = null;\n            IRow cellsData = null;\n            //获取实体属性名\n            PropertyInfo[] properties = entities[0].GetType().GetProperties();\n            int cellsIndex = 0;\n            //标题\n            if (!string.IsNullOrEmpty(title))\n            {\n                ICellStyle style = workbook.CreateCellStyle();\n                //边框  \n                style.BorderBottom = BorderStyle.Dotted;\n                style.BorderLeft = BorderStyle.Hair;\n                style.BorderRight = BorderStyle.Hair;\n                style.BorderTop = BorderStyle.Dotted;\n                //水平对齐  \n                style.Alignment = HorizontalAlignment.Left;\n\n                //垂直对齐  \n                style.VerticalAlignment = VerticalAlignment.Center;\n\n                //设置字体\n                IFont font = workbook.CreateFont();\n                font.FontHeightInPoints = 10;\n                font.FontName = \"微软雅黑\";\n                style.SetFont(font);\n\n                IRow cellsTitle = sheet.CreateRow(0);\n                cellsTitle.CreateCell(0).SetCellValue(title);\n                cellsTitle.RowStyle = style;\n                //合并单元格\n                sheet.AddMergedRegion(new NPOI.SS.Util.CellRangeAddress(0, 1, 0, dicColumns.Count - 1));\n                cellsIndex = 2;\n            }\n            //列名\n            cellsColumn = sheet.CreateRow(cellsIndex);\n            int index = 0;\n            Dictionary<string, int> columns = new Dictionary<string, int>();\n            foreach (var item in dicColumns)\n            {\n                cellsColumn.CreateCell(index).SetCellValue(item.Value);\n                columns.Add(item.Value, index);\n                index++;\n            }\n            cellsIndex += 1;\n            //数据\n            foreach (var item in entities)\n            {\n                cellsData = sheet.CreateRow(cellsIndex);\n                for (int i = 0; i < properties.Length; i++)\n                {\n                    if (!dicColumns.ContainsKey(properties[i].Name)) continue;\n                    //这里可以也根据数据类型做不同的赋值，也可以根据不同的格式参考上面的ICellStyle设置不同的样式\n                    object[] entityValues = new object[properties.Length];\n                    entityValues[i] = properties[i].GetValue(item);\n                    //获取对应列下标\n                    index = columns[dicColumns[properties[i].Name]];\n                    cellsData.CreateCell(index).SetCellValue(entityValues[i].ToString());\n                }\n                cellsIndex++;\n            }\n\n            byte[] buffer = null;\n            using (MemoryStream ms = new MemoryStream())\n            {\n                workbook.Write(ms);\n                buffer = ms.GetBuffer();\n                ms.Close();\n            }\n\n            return buffer;\n        }\n```\n\n### 测试\n写完，免不了一通测试，这里不多说了，直接上图。\n\n导入这里前面也说了没做界面上传什么的，就是一个文件路径，直接执行，Excel原文件我也会同步上传到代码仓库。\n![测试导入](net-core-v3-npoi/2.png)\n\n导出的话，这里也是用Swagger神器来测试。\n![测试导出](net-core-v3-npoi/3.png)\n数据库数据如下图。\n![测试](net-core-v3-npoi/4.png)\n\n![测试导出](net-core-v3-npoi/5.png)\n\n带标题导出。\n![测试](net-core-v3-npoi/6.png)\n\n### 小结\n最近真的是有点儿忙，一直在鼓捣opengl这类图形化的东西，各种矩阵转换模型转换，要么是用c++，qt写opengl，要么是用threejs搞opengl，唉，整的最近也只能是晚上回去摸索会儿net core，**工作总是不那么尽如人意，但是身为程序猿的我们，不都是不断的摸索前进么？我们可以不会，但那不是我们不整的借口。**","slug":"net-core-v3-npoi","published":1,"updated":"2019-10-29T02:28:12.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m45003z9sv705kdpamw","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>时间过得好快，在之前升级到3.0之后，就感觉好久没再动过啥东西了，之前有问到Swagger的中文汉化，虽说我觉得这种操作的意义不是太大，也是多少鼓捣了下，其实个人感觉就是元素内容替换，既然可以执行js了那不就是网页上随便搞了，所以就没往下再折腾，但是现在需要用到Excel的操作了，那就不得不提起这个<strong>NPOI</strong>了。</p>\n<h3 id=\"NPOI\"><a href=\"#NPOI\" class=\"headerlink\" title=\"NPOI\"></a>NPOI</h3><p>在之前.net framework的时候，工程需要用到Excel的导入导出，当然用这个NPOI是偶然，也就是找了下这个看着可以就用了，之后遇到的各种问题也都找资料解决，什么多行合并啊，打开2007版本错误啊之类的，但是不得不说，用着还挺好，所以既然net core需要了，那就看看呗，刚好也是支持的。</p>\n<p>在<strong>Util</strong>我们来引入这个类库<strong>NPOI</strong>。<img src=\"/2019/10/18/net-core-v3-npoi/1.png\" alt=\"引入\"></p>\n<ul>\n<li><strong>导入</strong></li>\n</ul>\n<p>在使用之前，我们先缕一下获取Excel数据需要哪些准备操作。</p>\n<ol>\n<li>获取文件（这个就不多说）</li>\n<li>获取sheet信息（考虑有可能多sheet操作）</li>\n<li>根据sheet获取对应文件信息（多少行，当然有些还有合并）</li>\n<li>根据合并行来判断第一行是否为标题</li>\n<li>判断哪一行是列名（用于对应数据）</li>\n<li>遍历每一行并根据每一行的数据格式来获取（有可能是公式/日期/数字/普通文本等等）</li>\n</ol>\n<p>ok，大致上清楚了之后，我们就一步步来看吧，这里我创建一个<strong>ExcelUtil</strong>，来写第一个方法（这里只做说明展示吧）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExcelUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 读取Excel多Sheet数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filePath\"&gt;</span>文件路径<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sheetName\"&gt;</span>Sheet名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSet <span class=\"title\">ReadExcelToDataSet</span>(<span class=\"params\"><span class=\"keyword\">string</span> filePath, <span class=\"keyword\">string</span> sheetName = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!File.Exists(filePath))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               LogUtil.Debug(<span class=\"string\">$\"未找到文件<span class=\"subst\">&#123;filePath&#125;</span>\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//获取文件信息</span></span><br><span class=\"line\">           FileStream fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open, FileAccess.Read);</span><br><span class=\"line\">           IWorkbook workbook = WorkbookFactory.Create(fs);</span><br><span class=\"line\">           <span class=\"comment\">//获取sheet信息</span></span><br><span class=\"line\">           ISheet sheet = <span class=\"literal\">null</span>;</span><br><span class=\"line\">           DataSet ds = <span class=\"keyword\">new</span> DataSet();</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(sheetName))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               sheet = workbook.GetSheet(sheetName);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (sheet == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   LogUtil.Debug(<span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span>未找到sheet:<span class=\"subst\">&#123;sheetName&#125;</span>\"</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               DataTable dt = ReadExcelFunc(workbook, sheet);</span><br><span class=\"line\">               ds.Tables.Add(dt);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//遍历获取所有数据</span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> sheetCount = workbook.NumberOfSheets;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sheetCount; i++) &#123;</span><br><span class=\"line\">                   sheet = workbook.GetSheetAt(i);</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (sheet != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       DataTable dt = ReadExcelFunc(workbook, sheet);</span><br><span class=\"line\">                       ds.Tables.Add(dt);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 读取Excel信息</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"workbook\"&gt;</span>工作区<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sheet\"&gt;</span>sheet<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataTable <span class=\"title\">ReadExcelFunc</span>(<span class=\"params\">IWorkbook workbook, ISheet sheet</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           DataTable dt = <span class=\"keyword\">new</span> DataTable();</span><br><span class=\"line\">           <span class=\"comment\">//获取列信息</span></span><br><span class=\"line\">           IRow cells = sheet.GetRow(sheet.FirstRowNum);</span><br><span class=\"line\">           <span class=\"keyword\">int</span> cellsCount = cells.PhysicalNumberOfCells;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> emptyCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> cellIndex = sheet.FirstRowNum;</span><br><span class=\"line\">           List&lt;<span class=\"keyword\">string</span>&gt; listColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">           <span class=\"keyword\">bool</span> isFindColumn = <span class=\"literal\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (!isFindColumn)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               emptyCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">               listColumns.Clear();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cellsCount; i++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cells.GetCell(i).StringCellValue))</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       emptyCount++;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   listColumns.Add(cells.GetCell(i).StringCellValue);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//这里根据逻辑需要，空列超过多少判断</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (emptyCount == <span class=\"number\">0</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   isFindColumn = <span class=\"literal\">true</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cellIndex++;</span><br><span class=\"line\">               cells = sheet.GetRow(cellIndex);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> columnName <span class=\"keyword\">in</span> listColumns)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (dt.Columns.Contains(columnName))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果允许有重复列名，自己做处理</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dt.Columns.Add(columnName, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">string</span>));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//开始获取数据</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> rowsCount = sheet.PhysicalNumberOfRows;</span><br><span class=\"line\">           cellIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">           DataRow dr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cellIndex; i &lt; rowsCount; i++) &#123;</span><br><span class=\"line\">               cells = sheet.GetRow(i);</span><br><span class=\"line\">               dr = dt.NewRow();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; dt.Columns.Count; j++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//这里可以判断数据类型</span></span><br><span class=\"line\">                   <span class=\"keyword\">switch</span> (cells.GetCell(j).CellType)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.String:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).StringCellValue;</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.Numeric:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).NumericCellValue.ToString();</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.Unknown:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).StringCellValue;</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dt.Rows.Add(dr);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> dt;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件的导入操作就不再演示了，之前有文件上传的相关操作方法<a href=\"/2019/08/23/net-core-fileuploader-and-cors/\">net core WebApi——文件分片上传与跨域请求处理</a>。</p>\n<p>导入的处理这里也只是大致演示下，具体需要的东西包括情况可能会比较复杂，但是终归数据还是那些，只是操作方法不同罢了（别说什么骚操作）。</p>\n<ul>\n<li><strong>导出</strong></li>\n</ul>\n<p>相对于导入，导出的流程就比较简单了。</p>\n<ol>\n<li>获取数据信息（sql或文件）</li>\n<li>组成数据集合（List或DataTable）</li>\n<li>创建sheet</li>\n<li>设置相关样式等等</li>\n<li>遍历赋值row</li>\n<li>导出文件流</li>\n</ol>\n<p>了解完，我们就继续来搞吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 导出Excel文件</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>数据类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entities\"&gt;</span>数据实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dicColumns\"&gt;</span>列对应关系,如Name-&gt;姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"title\"&gt;</span>标题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] ExportExcel&lt;T&gt;(List&lt;T&gt; entities,Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt; dicColumns, <span class=\"keyword\">string</span> title = <span class=\"literal\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (entities.Count &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//HSSFWorkbook =&gt; xls</span></span><br><span class=\"line\">          <span class=\"comment\">//XSSFWorkbook =&gt; xlsx</span></span><br><span class=\"line\">          IWorkbook workbook = <span class=\"keyword\">new</span> XSSFWorkbook();</span><br><span class=\"line\">          ISheet sheet = workbook.CreateSheet(<span class=\"string\">\"test\"</span>);<span class=\"comment\">//名称自定义</span></span><br><span class=\"line\">          IRow cellsColumn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          IRow cellsData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"comment\">//获取实体属性名</span></span><br><span class=\"line\">          PropertyInfo[] properties = entities[<span class=\"number\">0</span>].GetType().GetProperties();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> cellsIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"comment\">//标题</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(title))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ICellStyle style = workbook.CreateCellStyle();</span><br><span class=\"line\">              <span class=\"comment\">//边框  </span></span><br><span class=\"line\">              style.BorderBottom = BorderStyle.Dotted;</span><br><span class=\"line\">              style.BorderLeft = BorderStyle.Hair;</span><br><span class=\"line\">              style.BorderRight = BorderStyle.Hair;</span><br><span class=\"line\">              style.BorderTop = BorderStyle.Dotted;</span><br><span class=\"line\">              <span class=\"comment\">//水平对齐  </span></span><br><span class=\"line\">              style.Alignment = HorizontalAlignment.Left;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//垂直对齐  </span></span><br><span class=\"line\">              style.VerticalAlignment = VerticalAlignment.Center;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//设置字体</span></span><br><span class=\"line\">              IFont font = workbook.CreateFont();</span><br><span class=\"line\">              font.FontHeightInPoints = <span class=\"number\">10</span>;</span><br><span class=\"line\">              font.FontName = <span class=\"string\">\"微软雅黑\"</span>;</span><br><span class=\"line\">              style.SetFont(font);</span><br><span class=\"line\"></span><br><span class=\"line\">              IRow cellsTitle = sheet.CreateRow(<span class=\"number\">0</span>);</span><br><span class=\"line\">              cellsTitle.CreateCell(<span class=\"number\">0</span>).SetCellValue(title);</span><br><span class=\"line\">              cellsTitle.RowStyle = style;</span><br><span class=\"line\">              <span class=\"comment\">//合并单元格</span></span><br><span class=\"line\">              sheet.AddMergedRegion(<span class=\"keyword\">new</span> NPOI.SS.Util.CellRangeAddress(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, dicColumns.Count - <span class=\"number\">1</span>));</span><br><span class=\"line\">              cellsIndex = <span class=\"number\">2</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//列名</span></span><br><span class=\"line\">          cellsColumn = sheet.CreateRow(cellsIndex);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">          Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">int</span>&gt; columns = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">          <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> dicColumns)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              cellsColumn.CreateCell(index).SetCellValue(item.Value);</span><br><span class=\"line\">              columns.Add(item.Value, index);</span><br><span class=\"line\">              index++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          cellsIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"comment\">//数据</span></span><br><span class=\"line\">          <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> entities)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              cellsData = sheet.CreateRow(cellsIndex);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; properties.Length; i++)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!dicColumns.ContainsKey(properties[i].Name)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                  <span class=\"comment\">//这里可以也根据数据类型做不同的赋值，也可以根据不同的格式参考上面的ICellStyle设置不同的样式</span></span><br><span class=\"line\">                  <span class=\"keyword\">object</span>[] entityValues = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[properties.Length];</span><br><span class=\"line\">                  entityValues[i] = properties[i].GetValue(item);</span><br><span class=\"line\">                  <span class=\"comment\">//获取对应列下标</span></span><br><span class=\"line\">                  index = columns[dicColumns[properties[i].Name]];</span><br><span class=\"line\">                  cellsData.CreateCell(index).SetCellValue(entityValues[i].ToString());</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              cellsIndex++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (MemoryStream ms = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              workbook.Write(ms);</span><br><span class=\"line\">              buffer = ms.GetBuffer();</span><br><span class=\"line\">              ms.Close();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> buffer;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>写完，免不了一通测试，这里不多说了，直接上图。</p>\n<p>导入这里前面也说了没做界面上传什么的，就是一个文件路径，直接执行，Excel原文件我也会同步上传到代码仓库。<br><img src=\"/2019/10/18/net-core-v3-npoi/2.png\" alt=\"测试导入\"></p>\n<p>导出的话，这里也是用Swagger神器来测试。<br><img src=\"/2019/10/18/net-core-v3-npoi/3.png\" alt=\"测试导出\"><br>数据库数据如下图。<br><img src=\"/2019/10/18/net-core-v3-npoi/4.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/10/18/net-core-v3-npoi/5.png\" alt=\"测试导出\"></p>\n<p>带标题导出。<br><img src=\"/2019/10/18/net-core-v3-npoi/6.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>最近真的是有点儿忙，一直在鼓捣opengl这类图形化的东西，各种矩阵转换模型转换，要么是用c++，qt写opengl，要么是用threejs搞opengl，唉，整的最近也只能是晚上回去摸索会儿net core，<strong>工作总是不那么尽如人意，但是身为程序猿的我们，不都是不断的摸索前进么？我们可以不会，但那不是我们不整的借口。</strong></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>时间过得好快，在之前升级到3.0之后，就感觉好久没再动过啥东西了，之前有问到Swagger的中文汉化，虽说我觉得这种操作的意义不是太大，也是多少鼓捣了下，其实个人感觉就是元素内容替换，既然可以执行js了那不就是网页上随便搞了，所以就没往下再折腾，但是现在需要用到Excel的操作了，那就不得不提起这个<strong>NPOI</strong>了。</p>\n<h3 id=\"NPOI\"><a href=\"#NPOI\" class=\"headerlink\" title=\"NPOI\"></a>NPOI</h3><p>在之前.net framework的时候，工程需要用到Excel的导入导出，当然用这个NPOI是偶然，也就是找了下这个看着可以就用了，之后遇到的各种问题也都找资料解决，什么多行合并啊，打开2007版本错误啊之类的，但是不得不说，用着还挺好，所以既然net core需要了，那就看看呗，刚好也是支持的。</p>\n<p>在<strong>Util</strong>我们来引入这个类库<strong>NPOI</strong>。<img src=\"/2019/10/18/net-core-v3-npoi/1.png\" alt=\"引入\"></p>\n<ul>\n<li><strong>导入</strong></li>\n</ul>\n<p>在使用之前，我们先缕一下获取Excel数据需要哪些准备操作。</p>\n<ol>\n<li>获取文件（这个就不多说）</li>\n<li>获取sheet信息（考虑有可能多sheet操作）</li>\n<li>根据sheet获取对应文件信息（多少行，当然有些还有合并）</li>\n<li>根据合并行来判断第一行是否为标题</li>\n<li>判断哪一行是列名（用于对应数据）</li>\n<li>遍历每一行并根据每一行的数据格式来获取（有可能是公式/日期/数字/普通文本等等）</li>\n</ol>\n<p>ok，大致上清楚了之后，我们就一步步来看吧，这里我创建一个<strong>ExcelUtil</strong>，来写第一个方法（这里只做说明展示吧）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExcelUtil</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 读取Excel多Sheet数据</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filePath\"&gt;</span>文件路径<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sheetName\"&gt;</span>Sheet名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSet <span class=\"title\">ReadExcelToDataSet</span>(<span class=\"params\"><span class=\"keyword\">string</span> filePath, <span class=\"keyword\">string</span> sheetName = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!File.Exists(filePath))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               LogUtil.Debug(<span class=\"string\">$\"未找到文件<span class=\"subst\">&#123;filePath&#125;</span>\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//获取文件信息</span></span><br><span class=\"line\">           FileStream fs = <span class=\"keyword\">new</span> FileStream(filePath, FileMode.Open, FileAccess.Read);</span><br><span class=\"line\">           IWorkbook workbook = WorkbookFactory.Create(fs);</span><br><span class=\"line\">           <span class=\"comment\">//获取sheet信息</span></span><br><span class=\"line\">           ISheet sheet = <span class=\"literal\">null</span>;</span><br><span class=\"line\">           DataSet ds = <span class=\"keyword\">new</span> DataSet();</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(sheetName))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               sheet = workbook.GetSheet(sheetName);</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (sheet == <span class=\"literal\">null</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   LogUtil.Debug(<span class=\"string\">$\"<span class=\"subst\">&#123;filePath&#125;</span>未找到sheet:<span class=\"subst\">&#123;sheetName&#125;</span>\"</span>);</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               DataTable dt = ReadExcelFunc(workbook, sheet);</span><br><span class=\"line\">               ds.Tables.Add(dt);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//遍历获取所有数据</span></span><br><span class=\"line\">               <span class=\"keyword\">int</span> sheetCount = workbook.NumberOfSheets;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sheetCount; i++) &#123;</span><br><span class=\"line\">                   sheet = workbook.GetSheetAt(i);</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (sheet != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       DataTable dt = ReadExcelFunc(workbook, sheet);</span><br><span class=\"line\">                       ds.Tables.Add(dt);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 读取Excel信息</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"workbook\"&gt;</span>工作区<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sheet\"&gt;</span>sheet<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataTable <span class=\"title\">ReadExcelFunc</span>(<span class=\"params\">IWorkbook workbook, ISheet sheet</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           DataTable dt = <span class=\"keyword\">new</span> DataTable();</span><br><span class=\"line\">           <span class=\"comment\">//获取列信息</span></span><br><span class=\"line\">           IRow cells = sheet.GetRow(sheet.FirstRowNum);</span><br><span class=\"line\">           <span class=\"keyword\">int</span> cellsCount = cells.PhysicalNumberOfCells;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> emptyCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> cellIndex = sheet.FirstRowNum;</span><br><span class=\"line\">           List&lt;<span class=\"keyword\">string</span>&gt; listColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">           <span class=\"keyword\">bool</span> isFindColumn = <span class=\"literal\">false</span>;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (!isFindColumn)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               emptyCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">               listColumns.Clear();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cellsCount; i++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(cells.GetCell(i).StringCellValue))</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       emptyCount++;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   listColumns.Add(cells.GetCell(i).StringCellValue);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"comment\">//这里根据逻辑需要，空列超过多少判断</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (emptyCount == <span class=\"number\">0</span>)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   isFindColumn = <span class=\"literal\">true</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               cellIndex++;</span><br><span class=\"line\">               cells = sheet.GetRow(cellIndex);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> columnName <span class=\"keyword\">in</span> listColumns)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (dt.Columns.Contains(columnName))</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果允许有重复列名，自己做处理</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dt.Columns.Add(columnName, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">string</span>));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//开始获取数据</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> rowsCount = sheet.PhysicalNumberOfRows;</span><br><span class=\"line\">           cellIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">           DataRow dr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = cellIndex; i &lt; rowsCount; i++) &#123;</span><br><span class=\"line\">               cells = sheet.GetRow(i);</span><br><span class=\"line\">               dr = dt.NewRow();</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; dt.Columns.Count; j++)</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//这里可以判断数据类型</span></span><br><span class=\"line\">                   <span class=\"keyword\">switch</span> (cells.GetCell(j).CellType)</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.String:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).StringCellValue;</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.Numeric:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).NumericCellValue.ToString();</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                       <span class=\"keyword\">case</span> CellType.Unknown:</span><br><span class=\"line\">                           dr[j] = cells.GetCell(j).StringCellValue;</span><br><span class=\"line\">                           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               dt.Rows.Add(dr);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> dt;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件的导入操作就不再演示了，之前有文件上传的相关操作方法<a href=\"/2019/08/23/net-core-fileuploader-and-cors/\">net core WebApi——文件分片上传与跨域请求处理</a>。</p>\n<p>导入的处理这里也只是大致演示下，具体需要的东西包括情况可能会比较复杂，但是终归数据还是那些，只是操作方法不同罢了（别说什么骚操作）。</p>\n<ul>\n<li><strong>导出</strong></li>\n</ul>\n<p>相对于导入，导出的流程就比较简单了。</p>\n<ol>\n<li>获取数据信息（sql或文件）</li>\n<li>组成数据集合（List或DataTable）</li>\n<li>创建sheet</li>\n<li>设置相关样式等等</li>\n<li>遍历赋值row</li>\n<li>导出文件流</li>\n</ol>\n<p>了解完，我们就继续来搞吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 导出Excel文件</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=\"T\"&gt;</span>数据类型<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entities\"&gt;</span>数据实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dicColumns\"&gt;</span>列对应关系,如Name-&gt;姓名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"title\"&gt;</span>标题<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] ExportExcel&lt;T&gt;(List&lt;T&gt; entities,Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt; dicColumns, <span class=\"keyword\">string</span> title = <span class=\"literal\">null</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (entities.Count &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//HSSFWorkbook =&gt; xls</span></span><br><span class=\"line\">          <span class=\"comment\">//XSSFWorkbook =&gt; xlsx</span></span><br><span class=\"line\">          IWorkbook workbook = <span class=\"keyword\">new</span> XSSFWorkbook();</span><br><span class=\"line\">          ISheet sheet = workbook.CreateSheet(<span class=\"string\">\"test\"</span>);<span class=\"comment\">//名称自定义</span></span><br><span class=\"line\">          IRow cellsColumn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          IRow cellsData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"comment\">//获取实体属性名</span></span><br><span class=\"line\">          PropertyInfo[] properties = entities[<span class=\"number\">0</span>].GetType().GetProperties();</span><br><span class=\"line\">          <span class=\"keyword\">int</span> cellsIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"comment\">//标题</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(title))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              ICellStyle style = workbook.CreateCellStyle();</span><br><span class=\"line\">              <span class=\"comment\">//边框  </span></span><br><span class=\"line\">              style.BorderBottom = BorderStyle.Dotted;</span><br><span class=\"line\">              style.BorderLeft = BorderStyle.Hair;</span><br><span class=\"line\">              style.BorderRight = BorderStyle.Hair;</span><br><span class=\"line\">              style.BorderTop = BorderStyle.Dotted;</span><br><span class=\"line\">              <span class=\"comment\">//水平对齐  </span></span><br><span class=\"line\">              style.Alignment = HorizontalAlignment.Left;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//垂直对齐  </span></span><br><span class=\"line\">              style.VerticalAlignment = VerticalAlignment.Center;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">//设置字体</span></span><br><span class=\"line\">              IFont font = workbook.CreateFont();</span><br><span class=\"line\">              font.FontHeightInPoints = <span class=\"number\">10</span>;</span><br><span class=\"line\">              font.FontName = <span class=\"string\">\"微软雅黑\"</span>;</span><br><span class=\"line\">              style.SetFont(font);</span><br><span class=\"line\"></span><br><span class=\"line\">              IRow cellsTitle = sheet.CreateRow(<span class=\"number\">0</span>);</span><br><span class=\"line\">              cellsTitle.CreateCell(<span class=\"number\">0</span>).SetCellValue(title);</span><br><span class=\"line\">              cellsTitle.RowStyle = style;</span><br><span class=\"line\">              <span class=\"comment\">//合并单元格</span></span><br><span class=\"line\">              sheet.AddMergedRegion(<span class=\"keyword\">new</span> NPOI.SS.Util.CellRangeAddress(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, dicColumns.Count - <span class=\"number\">1</span>));</span><br><span class=\"line\">              cellsIndex = <span class=\"number\">2</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//列名</span></span><br><span class=\"line\">          cellsColumn = sheet.CreateRow(cellsIndex);</span><br><span class=\"line\">          <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">          Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">int</span>&gt; columns = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">          <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> dicColumns)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              cellsColumn.CreateCell(index).SetCellValue(item.Value);</span><br><span class=\"line\">              columns.Add(item.Value, index);</span><br><span class=\"line\">              index++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          cellsIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"comment\">//数据</span></span><br><span class=\"line\">          <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> entities)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              cellsData = sheet.CreateRow(cellsIndex);</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; properties.Length; i++)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!dicColumns.ContainsKey(properties[i].Name)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                  <span class=\"comment\">//这里可以也根据数据类型做不同的赋值，也可以根据不同的格式参考上面的ICellStyle设置不同的样式</span></span><br><span class=\"line\">                  <span class=\"keyword\">object</span>[] entityValues = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>[properties.Length];</span><br><span class=\"line\">                  entityValues[i] = properties[i].GetValue(item);</span><br><span class=\"line\">                  <span class=\"comment\">//获取对应列下标</span></span><br><span class=\"line\">                  index = columns[dicColumns[properties[i].Name]];</span><br><span class=\"line\">                  cellsData.CreateCell(index).SetCellValue(entityValues[i].ToString());</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              cellsIndex++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] buffer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          <span class=\"keyword\">using</span> (MemoryStream ms = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              workbook.Write(ms);</span><br><span class=\"line\">              buffer = ms.GetBuffer();</span><br><span class=\"line\">              ms.Close();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">return</span> buffer;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>写完，免不了一通测试，这里不多说了，直接上图。</p>\n<p>导入这里前面也说了没做界面上传什么的，就是一个文件路径，直接执行，Excel原文件我也会同步上传到代码仓库。<br><img src=\"/2019/10/18/net-core-v3-npoi/2.png\" alt=\"测试导入\"></p>\n<p>导出的话，这里也是用Swagger神器来测试。<br><img src=\"/2019/10/18/net-core-v3-npoi/3.png\" alt=\"测试导出\"><br>数据库数据如下图。<br><img src=\"/2019/10/18/net-core-v3-npoi/4.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/10/18/net-core-v3-npoi/5.png\" alt=\"测试导出\"></p>\n<p>带标题导出。<br><img src=\"/2019/10/18/net-core-v3-npoi/6.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>最近真的是有点儿忙，一直在鼓捣opengl这类图形化的东西，各种矩阵转换模型转换，要么是用c++，qt写opengl，要么是用threejs搞opengl，唉，整的最近也只能是晚上回去摸索会儿net core，<strong>工作总是不那么尽如人意，但是身为程序猿的我们，不都是不断的摸索前进么？我们可以不会，但那不是我们不整的借口。</strong></p>\n"},{"title":"向net core 3.0进击——多平台项目发布与部署","date":"2019-10-29T01:37:07.000Z","_content":"\n### 前言\n在经历过好多折腾后，总算是把部署走通了一遍，之前只是简单创建个工程在linux下部署，后来一直将这件事搁置，直到最近刚好团队入手一个小服务器，很显然是linux的，那就没啥说的了，Come On！\n\n### 发布\n在这个时候我挺想也秀一把命令行，什么dotnet build啊，publish什么的，但是还是老老实实用我的宇宙第一神器吧。\n\n右键工程发布。\n![发布](net-core-v3-publish/1.png)\n![发布](net-core-v3-publish/2.png)\n![发布](net-core-v3-publish/3.png)\n> 这个地方我引用下[官网](https://docs.microsoft.com/zh-cn/dotnet/core/deploying/#self-contained-deployments-scd)的介绍。\n\n**依赖框架**\n\n优点：\n- 不需要设置部署的系统，因为都是通用的pe文件，这就是跨平台很嗨皮的地方\n- 部署包小\n- 允许程序使用net core最新的runtime\n- 多应用可通用一个net core类库\n\n缺点：\n- 主机系统必须安装当前程序net core版本或更高的版本\n- 如果net core高版本砍掉部分使用的功能，那升级可能就会有问题\n\n**独立部署**\n\n优点：\n- 可以单独维护当前使用的net core\n- 目标系统也可以运行你的net core\n\n缺点：\n- 需要提前选择你部署的系统\n- 部署包大，因为独立嘛\n- 每个应用自己本身都会带个net core，重复率，emm\n\n其他的倒没有太多注意的地方，我这里选择的是依赖框架。\n\n之后就是生成文件了，我们来看下这一堆玩意儿。\n![发布](net-core-v3-publish/4.png)\n> 这里注意自己复制下April.xml这个文件，因为我没连带发布，留个坑。。。\n\n### 测试\n#### Windows\n\n我们来试下dotnet命令吧。\n![测试](net-core-v3-publish/5.png)\n直接访问https://localhost:5001吧，这里没有输出内容。\n![测试](net-core-v3-publish/6.png)\n好了，这说明发布直接在Windows运行，应该是没啥问题。\n\n##### IIS部署\n本身想着这里都不多说了，后来一想，算了，既然写相关部署了，那哪能少的了这伴随了好长时间的IIS啊。\n\n新建网站\n![新建站点](net-core-v3-publish/7.png)\n这里注意下标注的模块，IIS部署net core需要单独安装一个[.NET Core Windows Server Hosting](https://aka.ms/dotnetcore.2.0.0-windowshosting)，然后置于sdk到这一步了应该是都安装过了，路径就选择自己发布的路径。\n\n然后在应用池中更改下托管。\n![新建站点](net-core-v3-publish/8.png)\n之后运行网站就可以了，测试这块儿我就不放了，毕竟一般这地方没啥问题，如果前面都能运行的话，有问题的朋友可以私信我。\n\n#### Linux\n这里我用的是Centos 7（虚拟机Vmware），相关的安装软件什么的我在之前新手向相关的也已经介绍过了，这里不多说了，直接开始吧。\n\n首先我们把publish下发布的文件打包上传到linux，我这里放的目录是/www/april-webapi/，这里我们直接运行的话，是不行的，毕竟linux下我们还没有安装dotnet相关的环境，已经安装的忽视。\n![Linux部署](net-core-v3-publish/9.png)\n一个是运行库dotnet，一个是运行时库runtime，这个都可以通过官网来下载的，当然可以直接通过docker（直接跳过这块儿往下看），但是我这里只是把我自己趟的一遍复述下而已。\n\n```bash\n$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n$ sudo yum install dotnet-sdk-3.0\n```\n\n```bash\n$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n$ sudo yum install aspnetcore-runtime-3.0\n```\n\nok，小等会儿就可以安装完了，完成之后，我们来切到工程目录下。\n```bash\n$ cd /www/april-webapi/publish/\n```\n\n来试下dotnet的命令吧。\n\n```bash\n$ dotnet April.WebApi.dll\n```\n\n运行之后，如果不出意外，我们会看到下面这个错误，当然如果你的工程比较简洁（什么引用都没有，就是个空工程），那这个地方你就完全运行了，但是那样的工程除了demo毫无卵用（就像我当年那么天真以为走一遍新建工程发布就已经大结局了一样）。\n\n![问题](net-core-v3-publish/10.png)\n\n好了，不扯了，我们来看下这个问题，提示我们在对应lib/xxx路径下找不到xxx.dll，但是为何我们windows就可以了呢，这是因为类库缓存，在你运行程序的时候这些类库已经有了，默认会从net core的安装目录也就是系统盘下对应的不知道哪个文件夹下/lib/netstandardx.x/xxx.dll，所以windows下就没有报错。\n\n这里我第一反应就是，那既然这样我就把需要的dll文件都放过来，然后路径换换不就得了（不得不说确实好麻烦），于是就这样一通操作，把类库都单独放到一个文件夹，其实发布之后的工程已然包含这些类库了，对**April.WebApi.deps.json**这个文件修改路径之后（我是全改成/lib/netcore-libs/xxx.dll），我们运行之后还是提示找不到。\n\n对于这种现象，我只能说，世界之大~，然后继续查资料吧，最终在一个[ Nate McMaster的博客](https://natemcmaster.com/blog/2017/12/21/netcore-primitives/)中找到了这个问题的解决方法，原来还有这个**April.WebApi.runtimeconfig.json**的属性**additionalProbingPaths**配置，这种要不是深入还真是不行啊，国外的钻研精神不得不说，值得学习，看过之后也发现，原来发布的文件夹中有一个这种写法的配置，注意看**April.WebApi.runtimeconfig.dev.json**。\n\n配置好对应路径之后，我们来测试下，如果没有其他问题，应该跟我看到的界面效果一样，ok，那这样不就已经结束了。\n\n![测试](net-core-v3-publish/11.png)\n##### Docker\ndocker的配置这块儿，我也是在[Linux配置部署_新手向（五）——Docker的安装与使用](/2019/10/28/vmare-docker/)简单的介绍了，包括基本用到的命令语句什么的。\n\n这里直接来个Dockerfile吧，这里也只是简单写下需要的环境，端口，路径等基础配置。\n\n```bash\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\nCOPY . /app\nENTRYPOINT [\"dotnet\", \"April.WebApi.dll\"]\n```\n\n然后我们在当前目录下，运行以下命令生成镜像，注意末尾，还有个点，意思就是当前目录。\n\n```bash\n$ docker build -t april-webapi .\n```\n\n稍等一会儿（网速不好的话可能很长时间），提示完成的时候，我们来看下镜像。\n\n```bash\n$ docker images\n```\n\n![测试](net-core-v3-publish/12.png)\n\n看到有镜像那就说明走了一大半了，然后我们只需要运行镜像创建容器就行了。\n\n```bash\n$ docker run --name april-webapi-demo -d -p 8080:80 april-webapi\n$ docker ps -a\n```\n指定8080来接收80端口，指定名字叫*april-webapi-demo*，然后看下运行容器的情况。\n\n![测试](net-core-v3-publish/13.png)\n\n这里我们看到已经创建了容器，但是注意状态EXIT(140)，这很明显我们的程序跑了但是没有持久，emm，不持久可不行。\n\n看下日志是咋回事吧。\n```bash\n$ docker logs april-webapi-demo\n```\n\n![测试](net-core-v3-publish/14.png)\n\n一看，哟，又是同样的错误，但是我们的路径已经指向绝对路径了，为啥还错呢，这里注意下，我们的类库是在linux下的根目录下的指定文件夹，但是docker呢，可以理解为单独的虚拟机，那很显然docker当中没有这个路径下的文件，那既然这样，我们就好解决了，因为Dockerfile中我们的**WorkingDir**是/app，那么我们是不是只要指定到这个目录下就可以了呢？Let's 踹踹。\n\n首先我们在publish下创建个packages，然后把类库包复制到文件夹下，之后替换**April.WebApi.deps.json**中/lib/netcore-libs/为/app/packages/，这里说下为啥是/app/xxx呢，因为Dockerfile中配置的工作区为app。\n\n一番替换之后，我们来重新走一遍build，这次改个名字（当然可以删除之前的无效镜像跟容器），重新运行下我们再看容器的状态，咦好像是可以了，那我们来访问下，这次用主机访问这个地址，看到这个界面之后，不禁感慨，路漫漫啊。\n\n![测试](net-core-v3-publish/15.png)\n![测试](net-core-v3-publish/16.png)\n\n### 小结\n> 这篇同样没有测试，因为一路都捎带着测试，所有的走完一遍之后，我在想，为何会这么麻烦，按说通用的话，一个文件夹移哪都能用才对，至于相对路径我也是试过，但是没有效果，应该还是那个配置查找路径的属性问题，我们还是需要先指明从哪读类库，后续看看有啥新进展的话，我还是会继续更新的。\n\n在net core刚开始的时候，我们都已经知道这是一个要跨平台的，但是直到现在我才开始鼓捣linux下部署，实在是惭愧，一直在windows下让我有点儿过于舒适（当然还是因为windows服务器到期了），还是来一句结束吧，**我们总是想的太多，而却做的太少，总以为理所当然，可现实四处碰壁，生活在于折腾，而折腾使人进步，树欲静而风不止，那就可劲儿刮吧。**\n","source":"_posts/net-core-v3-publish.md","raw":"---\ntitle: 向net core 3.0进击——多平台项目发布与部署\ndate: 2019-10-29 09:37:07\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n在经历过好多折腾后，总算是把部署走通了一遍，之前只是简单创建个工程在linux下部署，后来一直将这件事搁置，直到最近刚好团队入手一个小服务器，很显然是linux的，那就没啥说的了，Come On！\n\n### 发布\n在这个时候我挺想也秀一把命令行，什么dotnet build啊，publish什么的，但是还是老老实实用我的宇宙第一神器吧。\n\n右键工程发布。\n![发布](net-core-v3-publish/1.png)\n![发布](net-core-v3-publish/2.png)\n![发布](net-core-v3-publish/3.png)\n> 这个地方我引用下[官网](https://docs.microsoft.com/zh-cn/dotnet/core/deploying/#self-contained-deployments-scd)的介绍。\n\n**依赖框架**\n\n优点：\n- 不需要设置部署的系统，因为都是通用的pe文件，这就是跨平台很嗨皮的地方\n- 部署包小\n- 允许程序使用net core最新的runtime\n- 多应用可通用一个net core类库\n\n缺点：\n- 主机系统必须安装当前程序net core版本或更高的版本\n- 如果net core高版本砍掉部分使用的功能，那升级可能就会有问题\n\n**独立部署**\n\n优点：\n- 可以单独维护当前使用的net core\n- 目标系统也可以运行你的net core\n\n缺点：\n- 需要提前选择你部署的系统\n- 部署包大，因为独立嘛\n- 每个应用自己本身都会带个net core，重复率，emm\n\n其他的倒没有太多注意的地方，我这里选择的是依赖框架。\n\n之后就是生成文件了，我们来看下这一堆玩意儿。\n![发布](net-core-v3-publish/4.png)\n> 这里注意自己复制下April.xml这个文件，因为我没连带发布，留个坑。。。\n\n### 测试\n#### Windows\n\n我们来试下dotnet命令吧。\n![测试](net-core-v3-publish/5.png)\n直接访问https://localhost:5001吧，这里没有输出内容。\n![测试](net-core-v3-publish/6.png)\n好了，这说明发布直接在Windows运行，应该是没啥问题。\n\n##### IIS部署\n本身想着这里都不多说了，后来一想，算了，既然写相关部署了，那哪能少的了这伴随了好长时间的IIS啊。\n\n新建网站\n![新建站点](net-core-v3-publish/7.png)\n这里注意下标注的模块，IIS部署net core需要单独安装一个[.NET Core Windows Server Hosting](https://aka.ms/dotnetcore.2.0.0-windowshosting)，然后置于sdk到这一步了应该是都安装过了，路径就选择自己发布的路径。\n\n然后在应用池中更改下托管。\n![新建站点](net-core-v3-publish/8.png)\n之后运行网站就可以了，测试这块儿我就不放了，毕竟一般这地方没啥问题，如果前面都能运行的话，有问题的朋友可以私信我。\n\n#### Linux\n这里我用的是Centos 7（虚拟机Vmware），相关的安装软件什么的我在之前新手向相关的也已经介绍过了，这里不多说了，直接开始吧。\n\n首先我们把publish下发布的文件打包上传到linux，我这里放的目录是/www/april-webapi/，这里我们直接运行的话，是不行的，毕竟linux下我们还没有安装dotnet相关的环境，已经安装的忽视。\n![Linux部署](net-core-v3-publish/9.png)\n一个是运行库dotnet，一个是运行时库runtime，这个都可以通过官网来下载的，当然可以直接通过docker（直接跳过这块儿往下看），但是我这里只是把我自己趟的一遍复述下而已。\n\n```bash\n$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n$ sudo yum install dotnet-sdk-3.0\n```\n\n```bash\n$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n$ sudo yum install aspnetcore-runtime-3.0\n```\n\nok，小等会儿就可以安装完了，完成之后，我们来切到工程目录下。\n```bash\n$ cd /www/april-webapi/publish/\n```\n\n来试下dotnet的命令吧。\n\n```bash\n$ dotnet April.WebApi.dll\n```\n\n运行之后，如果不出意外，我们会看到下面这个错误，当然如果你的工程比较简洁（什么引用都没有，就是个空工程），那这个地方你就完全运行了，但是那样的工程除了demo毫无卵用（就像我当年那么天真以为走一遍新建工程发布就已经大结局了一样）。\n\n![问题](net-core-v3-publish/10.png)\n\n好了，不扯了，我们来看下这个问题，提示我们在对应lib/xxx路径下找不到xxx.dll，但是为何我们windows就可以了呢，这是因为类库缓存，在你运行程序的时候这些类库已经有了，默认会从net core的安装目录也就是系统盘下对应的不知道哪个文件夹下/lib/netstandardx.x/xxx.dll，所以windows下就没有报错。\n\n这里我第一反应就是，那既然这样我就把需要的dll文件都放过来，然后路径换换不就得了（不得不说确实好麻烦），于是就这样一通操作，把类库都单独放到一个文件夹，其实发布之后的工程已然包含这些类库了，对**April.WebApi.deps.json**这个文件修改路径之后（我是全改成/lib/netcore-libs/xxx.dll），我们运行之后还是提示找不到。\n\n对于这种现象，我只能说，世界之大~，然后继续查资料吧，最终在一个[ Nate McMaster的博客](https://natemcmaster.com/blog/2017/12/21/netcore-primitives/)中找到了这个问题的解决方法，原来还有这个**April.WebApi.runtimeconfig.json**的属性**additionalProbingPaths**配置，这种要不是深入还真是不行啊，国外的钻研精神不得不说，值得学习，看过之后也发现，原来发布的文件夹中有一个这种写法的配置，注意看**April.WebApi.runtimeconfig.dev.json**。\n\n配置好对应路径之后，我们来测试下，如果没有其他问题，应该跟我看到的界面效果一样，ok，那这样不就已经结束了。\n\n![测试](net-core-v3-publish/11.png)\n##### Docker\ndocker的配置这块儿，我也是在[Linux配置部署_新手向（五）——Docker的安装与使用](/2019/10/28/vmare-docker/)简单的介绍了，包括基本用到的命令语句什么的。\n\n这里直接来个Dockerfile吧，这里也只是简单写下需要的环境，端口，路径等基础配置。\n\n```bash\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\nCOPY . /app\nENTRYPOINT [\"dotnet\", \"April.WebApi.dll\"]\n```\n\n然后我们在当前目录下，运行以下命令生成镜像，注意末尾，还有个点，意思就是当前目录。\n\n```bash\n$ docker build -t april-webapi .\n```\n\n稍等一会儿（网速不好的话可能很长时间），提示完成的时候，我们来看下镜像。\n\n```bash\n$ docker images\n```\n\n![测试](net-core-v3-publish/12.png)\n\n看到有镜像那就说明走了一大半了，然后我们只需要运行镜像创建容器就行了。\n\n```bash\n$ docker run --name april-webapi-demo -d -p 8080:80 april-webapi\n$ docker ps -a\n```\n指定8080来接收80端口，指定名字叫*april-webapi-demo*，然后看下运行容器的情况。\n\n![测试](net-core-v3-publish/13.png)\n\n这里我们看到已经创建了容器，但是注意状态EXIT(140)，这很明显我们的程序跑了但是没有持久，emm，不持久可不行。\n\n看下日志是咋回事吧。\n```bash\n$ docker logs april-webapi-demo\n```\n\n![测试](net-core-v3-publish/14.png)\n\n一看，哟，又是同样的错误，但是我们的路径已经指向绝对路径了，为啥还错呢，这里注意下，我们的类库是在linux下的根目录下的指定文件夹，但是docker呢，可以理解为单独的虚拟机，那很显然docker当中没有这个路径下的文件，那既然这样，我们就好解决了，因为Dockerfile中我们的**WorkingDir**是/app，那么我们是不是只要指定到这个目录下就可以了呢？Let's 踹踹。\n\n首先我们在publish下创建个packages，然后把类库包复制到文件夹下，之后替换**April.WebApi.deps.json**中/lib/netcore-libs/为/app/packages/，这里说下为啥是/app/xxx呢，因为Dockerfile中配置的工作区为app。\n\n一番替换之后，我们来重新走一遍build，这次改个名字（当然可以删除之前的无效镜像跟容器），重新运行下我们再看容器的状态，咦好像是可以了，那我们来访问下，这次用主机访问这个地址，看到这个界面之后，不禁感慨，路漫漫啊。\n\n![测试](net-core-v3-publish/15.png)\n![测试](net-core-v3-publish/16.png)\n\n### 小结\n> 这篇同样没有测试，因为一路都捎带着测试，所有的走完一遍之后，我在想，为何会这么麻烦，按说通用的话，一个文件夹移哪都能用才对，至于相对路径我也是试过，但是没有效果，应该还是那个配置查找路径的属性问题，我们还是需要先指明从哪读类库，后续看看有啥新进展的话，我还是会继续更新的。\n\n在net core刚开始的时候，我们都已经知道这是一个要跨平台的，但是直到现在我才开始鼓捣linux下部署，实在是惭愧，一直在windows下让我有点儿过于舒适（当然还是因为windows服务器到期了），还是来一句结束吧，**我们总是想的太多，而却做的太少，总以为理所当然，可现实四处碰壁，生活在于折腾，而折腾使人进步，树欲静而风不止，那就可劲儿刮吧。**\n","slug":"net-core-v3-publish","published":1,"updated":"2019-10-29T02:41:08.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m4a00429sv7sm6pkc9j","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在经历过好多折腾后，总算是把部署走通了一遍，之前只是简单创建个工程在linux下部署，后来一直将这件事搁置，直到最近刚好团队入手一个小服务器，很显然是linux的，那就没啥说的了，Come On！</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>在这个时候我挺想也秀一把命令行，什么dotnet build啊，publish什么的，但是还是老老实实用我的宇宙第一神器吧。</p>\n<p>右键工程发布。<br><img src=\"/2019/10/29/net-core-v3-publish/1.png\" alt=\"发布\"><br><img src=\"/2019/10/29/net-core-v3-publish/2.png\" alt=\"发布\"><br><img src=\"/2019/10/29/net-core-v3-publish/3.png\" alt=\"发布\"></p>\n<blockquote>\n<p>这个地方我引用下<a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/deploying/#self-contained-deployments-scd\" target=\"_blank\" rel=\"noopener\">官网</a>的介绍。</p>\n</blockquote>\n<p><strong>依赖框架</strong></p>\n<p>优点：</p>\n<ul>\n<li>不需要设置部署的系统，因为都是通用的pe文件，这就是跨平台很嗨皮的地方</li>\n<li>部署包小</li>\n<li>允许程序使用net core最新的runtime</li>\n<li>多应用可通用一个net core类库</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>主机系统必须安装当前程序net core版本或更高的版本</li>\n<li>如果net core高版本砍掉部分使用的功能，那升级可能就会有问题</li>\n</ul>\n<p><strong>独立部署</strong></p>\n<p>优点：</p>\n<ul>\n<li>可以单独维护当前使用的net core</li>\n<li>目标系统也可以运行你的net core</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要提前选择你部署的系统</li>\n<li>部署包大，因为独立嘛</li>\n<li>每个应用自己本身都会带个net core，重复率，emm</li>\n</ul>\n<p>其他的倒没有太多注意的地方，我这里选择的是依赖框架。</p>\n<p>之后就是生成文件了，我们来看下这一堆玩意儿。<br><img src=\"/2019/10/29/net-core-v3-publish/4.png\" alt=\"发布\"></p>\n<blockquote>\n<p>这里注意自己复制下April.xml这个文件，因为我没连带发布，留个坑。。。</p>\n</blockquote>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>我们来试下dotnet命令吧。<br><img src=\"/2019/10/29/net-core-v3-publish/5.png\" alt=\"测试\"><br>直接访问<a href=\"https://localhost:5001吧，这里没有输出内容。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001吧，这里没有输出内容。</a><br><img src=\"/2019/10/29/net-core-v3-publish/6.png\" alt=\"测试\"><br>好了，这说明发布直接在Windows运行，应该是没啥问题。</p>\n<h5 id=\"IIS部署\"><a href=\"#IIS部署\" class=\"headerlink\" title=\"IIS部署\"></a>IIS部署</h5><p>本身想着这里都不多说了，后来一想，算了，既然写相关部署了，那哪能少的了这伴随了好长时间的IIS啊。</p>\n<p>新建网站<br><img src=\"/2019/10/29/net-core-v3-publish/7.png\" alt=\"新建站点\"><br>这里注意下标注的模块，IIS部署net core需要单独安装一个<a href=\"https://aka.ms/dotnetcore.2.0.0-windowshosting\" target=\"_blank\" rel=\"noopener\">.NET Core Windows Server Hosting</a>，然后置于sdk到这一步了应该是都安装过了，路径就选择自己发布的路径。</p>\n<p>然后在应用池中更改下托管。<br><img src=\"/2019/10/29/net-core-v3-publish/8.png\" alt=\"新建站点\"><br>之后运行网站就可以了，测试这块儿我就不放了，毕竟一般这地方没啥问题，如果前面都能运行的话，有问题的朋友可以私信我。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>这里我用的是Centos 7（虚拟机Vmware），相关的安装软件什么的我在之前新手向相关的也已经介绍过了，这里不多说了，直接开始吧。</p>\n<p>首先我们把publish下发布的文件打包上传到linux，我这里放的目录是/www/april-webapi/，这里我们直接运行的话，是不行的，毕竟linux下我们还没有安装dotnet相关的环境，已经安装的忽视。<br><img src=\"/2019/10/29/net-core-v3-publish/9.png\" alt=\"Linux部署\"><br>一个是运行库dotnet，一个是运行时库runtime，这个都可以通过官网来下载的，当然可以直接通过docker（直接跳过这块儿往下看），但是我这里只是把我自己趟的一遍复述下而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</span><br><span class=\"line\">$ sudo yum install dotnet-sdk-3.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</span><br><span class=\"line\">$ sudo yum install aspnetcore-runtime-3.0</span><br></pre></td></tr></table></figure>\n\n<p>ok，小等会儿就可以安装完了，完成之后，我们来切到工程目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /www/april-webapi/publish/</span><br></pre></td></tr></table></figure>\n\n<p>来试下dotnet的命令吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dotnet April.WebApi.dll</span><br></pre></td></tr></table></figure>\n\n<p>运行之后，如果不出意外，我们会看到下面这个错误，当然如果你的工程比较简洁（什么引用都没有，就是个空工程），那这个地方你就完全运行了，但是那样的工程除了demo毫无卵用（就像我当年那么天真以为走一遍新建工程发布就已经大结局了一样）。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/10.png\" alt=\"问题\"></p>\n<p>好了，不扯了，我们来看下这个问题，提示我们在对应lib/xxx路径下找不到xxx.dll，但是为何我们windows就可以了呢，这是因为类库缓存，在你运行程序的时候这些类库已经有了，默认会从net core的安装目录也就是系统盘下对应的不知道哪个文件夹下/lib/netstandardx.x/xxx.dll，所以windows下就没有报错。</p>\n<p>这里我第一反应就是，那既然这样我就把需要的dll文件都放过来，然后路径换换不就得了（不得不说确实好麻烦），于是就这样一通操作，把类库都单独放到一个文件夹，其实发布之后的工程已然包含这些类库了，对<strong>April.WebApi.deps.json</strong>这个文件修改路径之后（我是全改成/lib/netcore-libs/xxx.dll），我们运行之后还是提示找不到。</p>\n<p>对于这种现象，我只能说，世界之大~，然后继续查资料吧，最终在一个<a href=\"https://natemcmaster.com/blog/2017/12/21/netcore-primitives/\" target=\"_blank\" rel=\"noopener\"> Nate McMaster的博客</a>中找到了这个问题的解决方法，原来还有这个<strong>April.WebApi.runtimeconfig.json</strong>的属性<strong>additionalProbingPaths</strong>配置，这种要不是深入还真是不行啊，国外的钻研精神不得不说，值得学习，看过之后也发现，原来发布的文件夹中有一个这种写法的配置，注意看<strong>April.WebApi.runtimeconfig.dev.json</strong>。</p>\n<p>配置好对应路径之后，我们来测试下，如果没有其他问题，应该跟我看到的界面效果一样，ok，那这样不就已经结束了。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/11.png\" alt=\"测试\"></p>\n<h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p>docker的配置这块儿，我也是在<a href=\"/2019/10/28/vmare-docker/\">Linux配置部署_新手向（五）——Docker的安装与使用</a>简单的介绍了，包括基本用到的命令语句什么的。</p>\n<p>这里直接来个Dockerfile吧，这里也只是简单写下需要的环境，端口，路径等基础配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">EXPOSE 443</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"dotnet\"</span>, <span class=\"string\">\"April.WebApi.dll\"</span>]</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在当前目录下，运行以下命令生成镜像，注意末尾，还有个点，意思就是当前目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t april-webapi .</span><br></pre></td></tr></table></figure>\n\n<p>稍等一会儿（网速不好的话可能很长时间），提示完成的时候，我们来看下镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/10/29/net-core-v3-publish/12.png\" alt=\"测试\"></p>\n<p>看到有镜像那就说明走了一大半了，然后我们只需要运行镜像创建容器就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name april-webapi-demo -d -p 8080:80 april-webapi</span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>指定8080来接收80端口，指定名字叫<em>april-webapi-demo</em>，然后看下运行容器的情况。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/13.png\" alt=\"测试\"></p>\n<p>这里我们看到已经创建了容器，但是注意状态EXIT(140)，这很明显我们的程序跑了但是没有持久，emm，不持久可不行。</p>\n<p>看下日志是咋回事吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs april-webapi-demo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/10/29/net-core-v3-publish/14.png\" alt=\"测试\"></p>\n<p>一看，哟，又是同样的错误，但是我们的路径已经指向绝对路径了，为啥还错呢，这里注意下，我们的类库是在linux下的根目录下的指定文件夹，但是docker呢，可以理解为单独的虚拟机，那很显然docker当中没有这个路径下的文件，那既然这样，我们就好解决了，因为Dockerfile中我们的<strong>WorkingDir</strong>是/app，那么我们是不是只要指定到这个目录下就可以了呢？Let’s 踹踹。</p>\n<p>首先我们在publish下创建个packages，然后把类库包复制到文件夹下，之后替换<strong>April.WebApi.deps.json</strong>中/lib/netcore-libs/为/app/packages/，这里说下为啥是/app/xxx呢，因为Dockerfile中配置的工作区为app。</p>\n<p>一番替换之后，我们来重新走一遍build，这次改个名字（当然可以删除之前的无效镜像跟容器），重新运行下我们再看容器的状态，咦好像是可以了，那我们来访问下，这次用主机访问这个地址，看到这个界面之后，不禁感慨，路漫漫啊。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/15.png\" alt=\"测试\"><br><img src=\"/2019/10/29/net-core-v3-publish/16.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><blockquote>\n<p>这篇同样没有测试，因为一路都捎带着测试，所有的走完一遍之后，我在想，为何会这么麻烦，按说通用的话，一个文件夹移哪都能用才对，至于相对路径我也是试过，但是没有效果，应该还是那个配置查找路径的属性问题，我们还是需要先指明从哪读类库，后续看看有啥新进展的话，我还是会继续更新的。</p>\n</blockquote>\n<p>在net core刚开始的时候，我们都已经知道这是一个要跨平台的，但是直到现在我才开始鼓捣linux下部署，实在是惭愧，一直在windows下让我有点儿过于舒适（当然还是因为windows服务器到期了），还是来一句结束吧，<strong>我们总是想的太多，而却做的太少，总以为理所当然，可现实四处碰壁，生活在于折腾，而折腾使人进步，树欲静而风不止，那就可劲儿刮吧。</strong></p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在经历过好多折腾后，总算是把部署走通了一遍，之前只是简单创建个工程在linux下部署，后来一直将这件事搁置，直到最近刚好团队入手一个小服务器，很显然是linux的，那就没啥说的了，Come On！</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>在这个时候我挺想也秀一把命令行，什么dotnet build啊，publish什么的，但是还是老老实实用我的宇宙第一神器吧。</p>\n<p>右键工程发布。<br><img src=\"/2019/10/29/net-core-v3-publish/1.png\" alt=\"发布\"><br><img src=\"/2019/10/29/net-core-v3-publish/2.png\" alt=\"发布\"><br><img src=\"/2019/10/29/net-core-v3-publish/3.png\" alt=\"发布\"></p>\n<blockquote>\n<p>这个地方我引用下<a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/deploying/#self-contained-deployments-scd\" target=\"_blank\" rel=\"noopener\">官网</a>的介绍。</p>\n</blockquote>\n<p><strong>依赖框架</strong></p>\n<p>优点：</p>\n<ul>\n<li>不需要设置部署的系统，因为都是通用的pe文件，这就是跨平台很嗨皮的地方</li>\n<li>部署包小</li>\n<li>允许程序使用net core最新的runtime</li>\n<li>多应用可通用一个net core类库</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>主机系统必须安装当前程序net core版本或更高的版本</li>\n<li>如果net core高版本砍掉部分使用的功能，那升级可能就会有问题</li>\n</ul>\n<p><strong>独立部署</strong></p>\n<p>优点：</p>\n<ul>\n<li>可以单独维护当前使用的net core</li>\n<li>目标系统也可以运行你的net core</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要提前选择你部署的系统</li>\n<li>部署包大，因为独立嘛</li>\n<li>每个应用自己本身都会带个net core，重复率，emm</li>\n</ul>\n<p>其他的倒没有太多注意的地方，我这里选择的是依赖框架。</p>\n<p>之后就是生成文件了，我们来看下这一堆玩意儿。<br><img src=\"/2019/10/29/net-core-v3-publish/4.png\" alt=\"发布\"></p>\n<blockquote>\n<p>这里注意自己复制下April.xml这个文件，因为我没连带发布，留个坑。。。</p>\n</blockquote>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>我们来试下dotnet命令吧。<br><img src=\"/2019/10/29/net-core-v3-publish/5.png\" alt=\"测试\"><br>直接访问<a href=\"https://localhost:5001吧，这里没有输出内容。\" target=\"_blank\" rel=\"noopener\">https://localhost:5001吧，这里没有输出内容。</a><br><img src=\"/2019/10/29/net-core-v3-publish/6.png\" alt=\"测试\"><br>好了，这说明发布直接在Windows运行，应该是没啥问题。</p>\n<h5 id=\"IIS部署\"><a href=\"#IIS部署\" class=\"headerlink\" title=\"IIS部署\"></a>IIS部署</h5><p>本身想着这里都不多说了，后来一想，算了，既然写相关部署了，那哪能少的了这伴随了好长时间的IIS啊。</p>\n<p>新建网站<br><img src=\"/2019/10/29/net-core-v3-publish/7.png\" alt=\"新建站点\"><br>这里注意下标注的模块，IIS部署net core需要单独安装一个<a href=\"https://aka.ms/dotnetcore.2.0.0-windowshosting\" target=\"_blank\" rel=\"noopener\">.NET Core Windows Server Hosting</a>，然后置于sdk到这一步了应该是都安装过了，路径就选择自己发布的路径。</p>\n<p>然后在应用池中更改下托管。<br><img src=\"/2019/10/29/net-core-v3-publish/8.png\" alt=\"新建站点\"><br>之后运行网站就可以了，测试这块儿我就不放了，毕竟一般这地方没啥问题，如果前面都能运行的话，有问题的朋友可以私信我。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>这里我用的是Centos 7（虚拟机Vmware），相关的安装软件什么的我在之前新手向相关的也已经介绍过了，这里不多说了，直接开始吧。</p>\n<p>首先我们把publish下发布的文件打包上传到linux，我这里放的目录是/www/april-webapi/，这里我们直接运行的话，是不行的，毕竟linux下我们还没有安装dotnet相关的环境，已经安装的忽视。<br><img src=\"/2019/10/29/net-core-v3-publish/9.png\" alt=\"Linux部署\"><br>一个是运行库dotnet，一个是运行时库runtime，这个都可以通过官网来下载的，当然可以直接通过docker（直接跳过这块儿往下看），但是我这里只是把我自己趟的一遍复述下而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</span><br><span class=\"line\">$ sudo yum install dotnet-sdk-3.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</span><br><span class=\"line\">$ sudo yum install aspnetcore-runtime-3.0</span><br></pre></td></tr></table></figure>\n\n<p>ok，小等会儿就可以安装完了，完成之后，我们来切到工程目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /www/april-webapi/publish/</span><br></pre></td></tr></table></figure>\n\n<p>来试下dotnet的命令吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dotnet April.WebApi.dll</span><br></pre></td></tr></table></figure>\n\n<p>运行之后，如果不出意外，我们会看到下面这个错误，当然如果你的工程比较简洁（什么引用都没有，就是个空工程），那这个地方你就完全运行了，但是那样的工程除了demo毫无卵用（就像我当年那么天真以为走一遍新建工程发布就已经大结局了一样）。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/10.png\" alt=\"问题\"></p>\n<p>好了，不扯了，我们来看下这个问题，提示我们在对应lib/xxx路径下找不到xxx.dll，但是为何我们windows就可以了呢，这是因为类库缓存，在你运行程序的时候这些类库已经有了，默认会从net core的安装目录也就是系统盘下对应的不知道哪个文件夹下/lib/netstandardx.x/xxx.dll，所以windows下就没有报错。</p>\n<p>这里我第一反应就是，那既然这样我就把需要的dll文件都放过来，然后路径换换不就得了（不得不说确实好麻烦），于是就这样一通操作，把类库都单独放到一个文件夹，其实发布之后的工程已然包含这些类库了，对<strong>April.WebApi.deps.json</strong>这个文件修改路径之后（我是全改成/lib/netcore-libs/xxx.dll），我们运行之后还是提示找不到。</p>\n<p>对于这种现象，我只能说，世界之大~，然后继续查资料吧，最终在一个<a href=\"https://natemcmaster.com/blog/2017/12/21/netcore-primitives/\" target=\"_blank\" rel=\"noopener\"> Nate McMaster的博客</a>中找到了这个问题的解决方法，原来还有这个<strong>April.WebApi.runtimeconfig.json</strong>的属性<strong>additionalProbingPaths</strong>配置，这种要不是深入还真是不行啊，国外的钻研精神不得不说，值得学习，看过之后也发现，原来发布的文件夹中有一个这种写法的配置，注意看<strong>April.WebApi.runtimeconfig.dev.json</strong>。</p>\n<p>配置好对应路径之后，我们来测试下，如果没有其他问题，应该跟我看到的界面效果一样，ok，那这样不就已经结束了。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/11.png\" alt=\"测试\"></p>\n<h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p>docker的配置这块儿，我也是在<a href=\"/2019/10/28/vmare-docker/\">Linux配置部署_新手向（五）——Docker的安装与使用</a>简单的介绍了，包括基本用到的命令语句什么的。</p>\n<p>这里直接来个Dockerfile吧，这里也只是简单写下需要的环境，端口，路径等基础配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\">EXPOSE 443</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">\"dotnet\"</span>, <span class=\"string\">\"April.WebApi.dll\"</span>]</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在当前目录下，运行以下命令生成镜像，注意末尾，还有个点，意思就是当前目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t april-webapi .</span><br></pre></td></tr></table></figure>\n\n<p>稍等一会儿（网速不好的话可能很长时间），提示完成的时候，我们来看下镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/10/29/net-core-v3-publish/12.png\" alt=\"测试\"></p>\n<p>看到有镜像那就说明走了一大半了，然后我们只需要运行镜像创建容器就行了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name april-webapi-demo -d -p 8080:80 april-webapi</span><br><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p>指定8080来接收80端口，指定名字叫<em>april-webapi-demo</em>，然后看下运行容器的情况。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/13.png\" alt=\"测试\"></p>\n<p>这里我们看到已经创建了容器，但是注意状态EXIT(140)，这很明显我们的程序跑了但是没有持久，emm，不持久可不行。</p>\n<p>看下日志是咋回事吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker logs april-webapi-demo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/10/29/net-core-v3-publish/14.png\" alt=\"测试\"></p>\n<p>一看，哟，又是同样的错误，但是我们的路径已经指向绝对路径了，为啥还错呢，这里注意下，我们的类库是在linux下的根目录下的指定文件夹，但是docker呢，可以理解为单独的虚拟机，那很显然docker当中没有这个路径下的文件，那既然这样，我们就好解决了，因为Dockerfile中我们的<strong>WorkingDir</strong>是/app，那么我们是不是只要指定到这个目录下就可以了呢？Let’s 踹踹。</p>\n<p>首先我们在publish下创建个packages，然后把类库包复制到文件夹下，之后替换<strong>April.WebApi.deps.json</strong>中/lib/netcore-libs/为/app/packages/，这里说下为啥是/app/xxx呢，因为Dockerfile中配置的工作区为app。</p>\n<p>一番替换之后，我们来重新走一遍build，这次改个名字（当然可以删除之前的无效镜像跟容器），重新运行下我们再看容器的状态，咦好像是可以了，那我们来访问下，这次用主机访问这个地址，看到这个界面之后，不禁感慨，路漫漫啊。</p>\n<p><img src=\"/2019/10/29/net-core-v3-publish/15.png\" alt=\"测试\"><br><img src=\"/2019/10/29/net-core-v3-publish/16.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><blockquote>\n<p>这篇同样没有测试，因为一路都捎带着测试，所有的走完一遍之后，我在想，为何会这么麻烦，按说通用的话，一个文件夹移哪都能用才对，至于相对路径我也是试过，但是没有效果，应该还是那个配置查找路径的属性问题，我们还是需要先指明从哪读类库，后续看看有啥新进展的话，我还是会继续更新的。</p>\n</blockquote>\n<p>在net core刚开始的时候，我们都已经知道这是一个要跨平台的，但是直到现在我才开始鼓捣linux下部署，实在是惭愧，一直在windows下让我有点儿过于舒适（当然还是因为windows服务器到期了），还是来一句结束吧，<strong>我们总是想的太多，而却做的太少，总以为理所当然，可现实四处碰壁，生活在于折腾，而折腾使人进步，树欲静而风不止，那就可劲儿刮吧。</strong></p>\n"},{"title":"net core WebApi——April.Util更新之权限","date":"2019-11-10T14:57:17.000Z","_content":"\n### 前言\n在之前已经提到过，公用类库Util已经开源，目的一是为了简化开发的工作量，毕竟有些常规的功能类库重复率还是挺高的，二是为了一起探讨学习软件开发，用的人越多问题也就会越多，解决的问题越多功能也就越完善，**仓库地址：** [April.Util_github](https://github.com/AprilBlank/April.Util.Public)，[April.Util_gitee](https://gitee.com/AprilBlank/April.Util.Public)，还没关注的朋友希望可以先mark，后续会持续维护。\n\n### 权限\n在之前的[net core WebApi——公用库April.Util公开及发布](https://blog.csdn.net/weixin_44518486/article/details/102947508)中已经介绍了初次发布的一些功能，其中包括缓存，日志，加密，统一的配置等等，具体可以再回头看下这篇介绍，而在其中有个**TokenUtil**，因为当时发布的时候这块儿还没有更新上，趁着周末来整理下吧。\n\n关于webapi的权限，可以借助Identity，Jwt，但是我这里没有借助这些，只是自己做了个token的生成已经存储用户主要信息，对于权限我想大多数人已经有了一套自己的权限体系，所以这里我简单介绍下我的思路。\n\n1. 首先对于菜单做权限标示，请求的控制器，请求的事件\n2. 菜单信息维护后，设置角色对应多个菜单\n3. 管理员对应多个角色\n4. 在登录的时候根据账号信息获取对应管理员的角色及最终菜单，控制器，事件\n5. 处理管理员信息后自定义token，可设置token过期时间，token可以反解析（如果到期自动重新授权，我这里没有处理）\n6. 每次访问接口的时候（除公开不需校验的接口），根据请求的路径判断是否有当前控制器权限（通过中间层），进入接口后判断是否有对应权限（通过标签）\n\n> 通过上述流程来做权限的校验，当然这里只是针对单应用，如果是多应用的话，这里还要考虑应用问题（如，一个授权认证工程主做身份校验，多个应用工程通用一个管理）。\n\n首先，我们需要一个可以存储管理员的对应属性集合**AdminEntity**，主要存储基本信息，控制器集合，权限集合，数据集合（也就是企业部门等）。\n\n```csharp\n    /// <summary>\n    /// 管理员实体\n    /// </summary>\n    public class AdminEntity\n    {\n        private int _ID = -1;\n        private string _UserName = string.Empty;\n        private string _Avator = string.Empty;\n        private List<string> _Controllers = new List<string>();\n        private List<string> _Permissions = new List<string>();\n        private int _TokenType = 0;\n        private bool _IsSuperManager = false;\n        private List<int> _Depts = new List<int>();\n        private int _CurrentDept = -1;\n        private DateTime _ExpireTime = DateTime.Now;\n\n        /// <summary>\n        /// 主键\n        /// </summary>\n        public int ID { get => _ID; set => _ID = value; }\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get => _UserName; set => _UserName = value; }\n        /// <summary>\n        /// 头像\n        /// </summary>\n        public string Avator { get => _Avator; set => _Avator = value; }\n        /// <summary>\n        /// 控制器集合\n        /// </summary>\n        public List<string> Controllers { get => _Controllers; set => _Controllers = value; }\n        /// <summary>\n        /// 权限集合\n        /// </summary>\n        public List<string> Permissions { get => _Permissions; set => _Permissions = value; }\n        /// <summary>\n        /// 访问方式\n        /// </summary>\n        public int TokenType { get => _TokenType; set => _TokenType = value; }\n        /// <summary>\n        /// 是否为超管\n        /// </summary>\n        public bool IsSuperManager { get => _IsSuperManager; set => _IsSuperManager = value; }\n        /// <summary>\n        /// 企业集合\n        /// </summary>\n        public List<int> Depts { get => _Depts; set => _Depts = value; }\n        /// <summary>\n        /// 当前企业\n        /// </summary>\n        public int CurrentDept { get => _CurrentDept; set => _CurrentDept = value; }\n        /// <summary>\n        /// 过期时间\n        /// </summary>\n        public DateTime ExpireTime { get => _ExpireTime; set => _ExpireTime = value; }\n    }\n```\n\n之后我们来完成TokenUtil这块儿，首先是生成我们的token串，因为考虑到需要反解析，所以这里采用的是字符串加解密，当然这个加密串具体是什么可以自定义，目前我这里设置的是固定需要两个参数{id}，{ts}，目的是为了保证加密串的唯一，当然也是为了过期无感知重新授权准备的。\n\n```csharp\n    public class TokenUtil\n    {\n        /// <summary>\n        /// 设置token\n        /// </summary>\n        /// <returns></returns>\n        public static string GetToken(AdminEntity user, out string expiretimstamp)\n        {\n            string id = user.ID.ToString();\n            double exp = 0;\n            switch ((AprilEnums.TokenType)user.TokenType)\n            {\n                case AprilEnums.TokenType.Web:\n                    exp = AprilConfig.WebExpire;\n                    break;\n                case AprilEnums.TokenType.App:\n                    exp = AprilConfig.AppExpire;\n                    break;\n                case AprilEnums.TokenType.MiniProgram:\n                    exp = AprilConfig.MiniProgramExpire;\n                    break;\n                case AprilEnums.TokenType.Other:\n                    exp = AprilConfig.OtherExpire;\n                    break;\n            }\n            DateTime date = DateTime.Now.AddHours(exp);\n            user.ExpireTime = date;\n            double timestamp = DateUtil.ConvertToUnixTimestamp(date);\n            expiretimstamp = timestamp.ToString();\n            string token = AprilConfig.TokenSecretFormat.Replace(\"{id}\", id).Replace(\"{ts}\", expiretimstamp);\n            token = EncryptUtil.EncryptDES(token, EncryptUtil.SecurityKey);\n            //LogUtil.Debug($\"用户{id}获取token：{token}\");\n            Add(token, user);\n            //处理多点登录\n            SetUserToken(token, user.ID);\n            return token;\n        }\n\n        /// <summary>\n        /// 通过token获取当前人员信息\n        /// </summary>\n        /// <param name=\"token\"></param>\n        /// <returns></returns>\n        public static AdminEntity GetUserByToken(string token = \"\")\n        {\n            if (string.IsNullOrEmpty(token))\n            {\n                token = GetTokenByContent();\n            }\n            if (!string.IsNullOrEmpty(token))\n            {\n                \n                AdminEntity admin = Get(token);\n                if (admin != null)\n                {\n                    //校验时间\n                    if (admin.ExpireTime > DateTime.Now)\n                    {\n                        if (AprilConfig.AllowSliding)\n                        {\n                            //延长时间\n                            admin.ExpireTime = DateTime.Now.AddMinutes(30);\n                            //更新\n                            Add(token, admin);\n                        }\n                        return admin;\n                    }\n                    else\n                    {\n                        //已经过期的就不再延长了，当然后续根据情况改进吧\n                        return null;\n                    }\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// 通过用户请求信息获取Token信息\n        /// </summary>\n        /// <returns></returns>\n        public static string GetTokenByContent()\n        {\n            string token = \"\";\n            //判断header\n            var headers = AprilConfig.HttpCurrent.Request.Headers;\n            if (headers.ContainsKey(\"token\"))\n            {\n                token = headers[\"token\"].ToString();\n            }\n            if (string.IsNullOrEmpty(token))\n            {\n                token = CookieUtil.GetString(\"token\");\n            }\n            if (string.IsNullOrEmpty(token))\n            {\n                AprilConfig.HttpCurrent.Request.Query.TryGetValue(\"token\", out StringValues temptoken);\n                if (temptoken != StringValues.Empty)\n                {\n                    token = temptoken.ToString();\n                }\n            }\n            return token;\n        }\n        /// <summary>\n        /// 移除Token\n        /// </summary>\n        /// <param name=\"token\"></param>\n        public static void RemoveToken(string token = \"\")\n        {\n            if (string.IsNullOrEmpty(token))\n            {\n                token = GetTokenByContent();\n            }\n            if (!string.IsNullOrEmpty(token))\n            {\n                Remove(token);\n            }\n        }\n\n        #region 多个登录\n        /// <summary>\n        /// 多个登录设置缓存\n        /// </summary>\n        /// <param name=\"token\"></param>\n        /// <param name=\"userid\"></param>\n        public static void SetUserToken(string token, int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            if (dicusers == null)\n            {\n                dicusers = new Dictionary<int, List<string>>();\n            }\n            List<string> listtokens = new List<string>();\n            if (dicusers.ContainsKey(userid))\n            {\n                listtokens = dicusers[userid];\n                if (listtokens.Count <= 0)\n                {\n                    listtokens.Add(token);\n                }\n                else\n                {\n                    if (!AprilConfig.AllowMuiltiLogin)\n                    {\n                        foreach (var item in listtokens)\n                        {\n                            RemoveToken(item);\n                        }\n                        listtokens.Add(token);\n                    }\n                    else\n                    {\n                        bool isAdd = true;\n                        foreach (var item in listtokens)\n                        {\n                            if (item == token)\n                            {\n                                isAdd = false;\n                            }\n                        }\n                        if (isAdd)\n                        {\n                            listtokens.Add(token);\n                        }\n                    }\n                }\n            }\n            else\n            {\n\n                listtokens.Add(token);\n                dicusers.Add(userid, listtokens);\n            }\n            CacheUtil.Add(\"UserToken\", dicusers, new TimeSpan(6, 0, 0), true);\n        }\n        /// <summary>\n        /// 多个登录删除缓存\n        /// </summary>\n        /// <param name=\"userid\"></param>\n        public static void RemoveUserToken(int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            if (dicusers != null && dicusers.Count > 0)\n            {\n                if (dicusers.ContainsKey(userid))\n                {\n                    //删除所有token\n                    var listtokens = dicusers[userid];\n                    foreach (var token in listtokens)\n                    {\n                        RemoveToken(token);\n                    }\n                    dicusers.Remove(userid);\n                }\n            }\n        }\n        /// <summary>\n        /// 多个登录获取\n        /// </summary>\n        /// <param name=\"userid\"></param>\n        /// <returns></returns>\n        public static List<string> GetUserToken(int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            List<string> lists = new List<string>();\n            if (dicusers != null && dicusers.Count > 0)\n            {\n                foreach (var item in dicusers)\n                {\n                    if (item.Key == userid)\n                    {\n                        lists = dicusers[userid];\n                        break;\n                    }\n                }\n            }\n            return lists;\n        }\n        #endregion\n\n        #region 私有方法(这块儿还需要改进)\n\n        private static void Add(string token,AdminEntity admin)\n        {\n            switch (AprilConfig.TokenCacheType)\n            {\n                //不推荐Cookie\n                case AprilEnums.TokenCacheType.Cookie:\n                    CookieUtil.Add(token, admin);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    CacheUtil.Add(token, admin, new TimeSpan(0, 30, 0));\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    SessionUtil.Add(token, admin);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    RedisUtil.Add(token, admin);\n                    break;\n            }\n        }\n\n        private static AdminEntity Get(string token)\n        {\n            AdminEntity admin = null;\n            switch (AprilConfig.TokenCacheType)\n            {\n                case AprilEnums.TokenCacheType.Cookie:\n                    admin = CookieUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    admin = CacheUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    admin = SessionUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    admin = RedisUtil.Get<AdminEntity>(token);\n                    break;\n            }\n            return admin;\n        }\n\n        private static void Remove(string token)\n        {\n            switch (AprilConfig.TokenCacheType)\n            {\n                case AprilEnums.TokenCacheType.Cookie:\n                    CookieUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    CacheUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    SessionUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    RedisUtil.Remove(token);\n                    break;\n            }\n        }\n        #endregion\n    }\n```\n\n### 中间层\n当然这也在之前已经提到过[net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](https://blog.csdn.net/weixin_44518486/article/details/97795992)，当时还觉得这个叫做拦截器，too young too simple，至于使用方法这里就不多说了，可以参考之前2.2版本的东西，也可以看代码仓库中的示例工程。\n\n```csharp\n    public class AprilAuthorizationMiddleware\n    {\n        private readonly RequestDelegate next;\n\n        public AprilAuthorizationMiddleware(RequestDelegate next)\n        {\n            this.next = next;\n        }\n\n        public Task Invoke(HttpContext context)\n        {\n            if (context.Request.Method != \"OPTIONS\")\n            {\n                string path = context.Request.Path.Value;\n                if (!AprilConfig.AllowUrl.Contains(path))\n                {\n                    //获取管理员信息\n                    AdminEntity admin = TokenUtil.GetUserByToken();\n                    if (admin == null)\n                    {\n                        //重新登录\n                        return ResponseUtil.HandleResponse(-2, \"未登录\");\n                    }\n                    if (!admin.IsSuperManager)\n                    {\n                        //格式统一为/api/Controller/Action，兼容多级如/api/Controller1/ConrolerInnerName/xxx/Action\n                        string[] strValues = System.Text.RegularExpressions.Regex.Split(path, \"/\");\n\n                        string controller = \"\";\n                        bool isStartApi = false;\n                        if (path.StartsWith(\"/api\"))\n                        {\n                            isStartApi = true;\n                        }\n                        for (int i = 0; i < strValues.Length; i++)\n                        {\n                            //为空，为api，或者最后一个\n                            if (string.IsNullOrEmpty(strValues[i]) || i == strValues.Length - 1)\n                            {\n                                continue;\n                            }\n                            if (isStartApi && strValues[i] == \"api\")\n                            {\n                                continue;\n                            }\n                            if (!string.IsNullOrEmpty(controller))\n                            {\n                                controller += \"/\";\n                            }\n                            controller += strValues[i];\n                        }\n                        if (string.IsNullOrEmpty(controller))\n                        {\n                            controller = strValues[strValues.Length - 1];\n                        }\n                        if (!admin.Controllers.Contains(controller.ToLower()))\n                        {\n                            //无权访问\n                            return ResponseUtil.HandleResponse(401, \"无权访问\");\n                        }\n\n                    }\n                }\n            }\n            return next.Invoke(context);\n        }\n    }\n```\n\nOk，我们先来看下Login中的操作以及实现效果吧。\n\n```csharp\n\t\t[HttpPost]\n        public async Task<ResponseDataEntity> Login(LoginFormEntity formEntity)\n        {\n            if (string.IsNullOrEmpty(formEntity.LoginName) || string.IsNullOrEmpty(formEntity.Password))\n            {\n                return ResponseUtil.Fail(\"请输入账号密码\");\n            }\n            if (formEntity.LoginName == \"admin\")\n            {\n                //这里实际应该通过db获取管理员\n                string password = EncryptUtil.MD5Encrypt(formEntity.Password, AprilConfig.SecurityKey);\n                if (password == \"B092956160CB0018\")\n                {\n                    //获取管理员相关权限，同样是db获取，这里只做展示\n                    AdminEntity admin = new AdminEntity\n                    {\n                        UserName = \"超级管理员\",\n                        Avator = \"\",\n                        IsSuperManager = true,\n                        TokenType = (int)AprilEnums.TokenType.Web\n                    };\n                    string token = TokenUtil.GetToken(admin, out string expiretimestamp);\n                    int expiretime = 0;\n                    int.TryParse(expiretimestamp, out expiretime);\n                    //可以考虑记录登录日志等其他信息\n                    return ResponseUtil.Success(\"\", new { username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime });\n                }\n            }\n            else if (formEntity.LoginName == \"test\")\n            {\n                //这里做权限演示\n\t\t\t\tAdminEntity admin = new AdminEntity\n                {\n                    UserName = \"测试\",\n                    Avator = \"\",\n                    TokenType = (int)AprilEnums.TokenType.Web\n                };\n                admin.Controllers.Add(\"weatherforecast\");\n                admin.Permissions.Add(\"weatherforecast_log\");//控制器_事件(Add,Update...)\n                string token = TokenUtil.GetToken(admin, out string expiretimestamp);\n                int expiretime = 0;\n                int.TryParse(expiretimestamp, out expiretime);\n                //可以考虑记录登录日志等其他信息\n                return ResponseUtil.Success(\"\", new { username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime });\n            }\n            //这里其实已经可以考虑验证码相关了，但是这是示例工程，后续可持续关注我，会有基础工程（带权限）的实例公开\n            return ResponseUtil.Fail(\"账号密码错误\");\n        }\n```\n> 可能乍一看会先吐槽下，明明是异步接口还用同步的方法，没有异步的实现空浪费内存xxx，因为db考虑是要搞异步，所以这里示例就这样先写了，主要是领会精神，咳咳。\n\n来试下效果吧，首先我们随便访问个白名单外的接口。\n\n![测试](net-core-april-util-update-1/1.png)\n然后我们通过账号登陆Login接口（直接写死了，admin，123456），获取到token。\n![登陆](net-core-april-util-update-1/2.png)\n然后我们来访问接口。\n![测试](net-core-april-util-update-1/3.png)\n是不是还是未登录，没错，因为没有token的传值，当然我这里是通过query传值，支持header，token，query。\n\n![测试](net-core-april-util-update-1/4.png)\n这里因为是超管，所以权限随意搞，无所谓，接下来展示下普通用户的权限标示。\n\n目前可以通过标签**AprilPermission**，把当前的控制器与对应事件的权限作为参数传递，之后根据当前管理员信息做校验。\n\n```csharp\n    public class AprilPermissionAttribute : Attribute, IActionFilter\n    {\n\n        public string Permission;\n        public string Controller;\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"_controller\">控制器</param>\n        /// <param name=\"_permission\">接口事件</param>\n        public AprilPermissionAttribute(string _controller, string _permission)\n        {\n            Permission = _permission;\n            Controller = _controller;\n        }\n\n        public void OnActionExecuted(ActionExecutedContext context)\n        {\n            LogUtil.Debug(\"AprilPermission OnActionExecuted\");\n        }\n        public void OnActionExecuting(ActionExecutingContext context)\n        {\n            AdminEntity admin = TokenUtil.GetUserByToken();\n            if (admin == null || admin.ExpireTime <= DateTime.Now)\n            {\n                context.Result = new ObjectResult(new { msg = \"未登录\", code = -2 });\n            }\n            if (!admin.IsSuperManager)\n            {\n                string controller_permission = $\"{Controller}_{Permission}\";\n                if (!admin.Controllers.Contains(Controller) || !admin.Permissions.Contains(controller_permission))\n                {\n                    context.Result = new ObjectResult(new { msg = \"无权访问\", code = 401 });\n                }\n            }\n        }\n    }\n```\n\n针对几个接口做了调整，附上标签后判断权限，我们来测试下登录test，密码随意。\n\n![测试](net-core-april-util-update-1/5.png)\n![测试](net-core-april-util-update-1/6.png)\n![测试](net-core-april-util-update-1/7.png)\n\n![测试](net-core-april-util-update-1/8.png)\n至此权限相关的功能也统一起来，当然如果有个性化的还是需要调整的，后续也是会不断的更新改动。\n\n### 小结\n权限还是稍微麻烦点儿啊，通过中间层，标签以及**TokenUtil**来完成登录授权这块儿，至于数据的划分，毕竟这个东西不是通用的，所以只是点出来而没有去整合，如果有好的建议或者自己整合的通用类库也可以跟我交流。\n\n","source":"_posts/net-core-april-util-update-1.md","raw":"---\ntitle: net core WebApi——April.Util更新之权限\ndate: 2019-11-10 22:57:17\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n在之前已经提到过，公用类库Util已经开源，目的一是为了简化开发的工作量，毕竟有些常规的功能类库重复率还是挺高的，二是为了一起探讨学习软件开发，用的人越多问题也就会越多，解决的问题越多功能也就越完善，**仓库地址：** [April.Util_github](https://github.com/AprilBlank/April.Util.Public)，[April.Util_gitee](https://gitee.com/AprilBlank/April.Util.Public)，还没关注的朋友希望可以先mark，后续会持续维护。\n\n### 权限\n在之前的[net core WebApi——公用库April.Util公开及发布](https://blog.csdn.net/weixin_44518486/article/details/102947508)中已经介绍了初次发布的一些功能，其中包括缓存，日志，加密，统一的配置等等，具体可以再回头看下这篇介绍，而在其中有个**TokenUtil**，因为当时发布的时候这块儿还没有更新上，趁着周末来整理下吧。\n\n关于webapi的权限，可以借助Identity，Jwt，但是我这里没有借助这些，只是自己做了个token的生成已经存储用户主要信息，对于权限我想大多数人已经有了一套自己的权限体系，所以这里我简单介绍下我的思路。\n\n1. 首先对于菜单做权限标示，请求的控制器，请求的事件\n2. 菜单信息维护后，设置角色对应多个菜单\n3. 管理员对应多个角色\n4. 在登录的时候根据账号信息获取对应管理员的角色及最终菜单，控制器，事件\n5. 处理管理员信息后自定义token，可设置token过期时间，token可以反解析（如果到期自动重新授权，我这里没有处理）\n6. 每次访问接口的时候（除公开不需校验的接口），根据请求的路径判断是否有当前控制器权限（通过中间层），进入接口后判断是否有对应权限（通过标签）\n\n> 通过上述流程来做权限的校验，当然这里只是针对单应用，如果是多应用的话，这里还要考虑应用问题（如，一个授权认证工程主做身份校验，多个应用工程通用一个管理）。\n\n首先，我们需要一个可以存储管理员的对应属性集合**AdminEntity**，主要存储基本信息，控制器集合，权限集合，数据集合（也就是企业部门等）。\n\n```csharp\n    /// <summary>\n    /// 管理员实体\n    /// </summary>\n    public class AdminEntity\n    {\n        private int _ID = -1;\n        private string _UserName = string.Empty;\n        private string _Avator = string.Empty;\n        private List<string> _Controllers = new List<string>();\n        private List<string> _Permissions = new List<string>();\n        private int _TokenType = 0;\n        private bool _IsSuperManager = false;\n        private List<int> _Depts = new List<int>();\n        private int _CurrentDept = -1;\n        private DateTime _ExpireTime = DateTime.Now;\n\n        /// <summary>\n        /// 主键\n        /// </summary>\n        public int ID { get => _ID; set => _ID = value; }\n        /// <summary>\n        /// 用户名\n        /// </summary>\n        public string UserName { get => _UserName; set => _UserName = value; }\n        /// <summary>\n        /// 头像\n        /// </summary>\n        public string Avator { get => _Avator; set => _Avator = value; }\n        /// <summary>\n        /// 控制器集合\n        /// </summary>\n        public List<string> Controllers { get => _Controllers; set => _Controllers = value; }\n        /// <summary>\n        /// 权限集合\n        /// </summary>\n        public List<string> Permissions { get => _Permissions; set => _Permissions = value; }\n        /// <summary>\n        /// 访问方式\n        /// </summary>\n        public int TokenType { get => _TokenType; set => _TokenType = value; }\n        /// <summary>\n        /// 是否为超管\n        /// </summary>\n        public bool IsSuperManager { get => _IsSuperManager; set => _IsSuperManager = value; }\n        /// <summary>\n        /// 企业集合\n        /// </summary>\n        public List<int> Depts { get => _Depts; set => _Depts = value; }\n        /// <summary>\n        /// 当前企业\n        /// </summary>\n        public int CurrentDept { get => _CurrentDept; set => _CurrentDept = value; }\n        /// <summary>\n        /// 过期时间\n        /// </summary>\n        public DateTime ExpireTime { get => _ExpireTime; set => _ExpireTime = value; }\n    }\n```\n\n之后我们来完成TokenUtil这块儿，首先是生成我们的token串，因为考虑到需要反解析，所以这里采用的是字符串加解密，当然这个加密串具体是什么可以自定义，目前我这里设置的是固定需要两个参数{id}，{ts}，目的是为了保证加密串的唯一，当然也是为了过期无感知重新授权准备的。\n\n```csharp\n    public class TokenUtil\n    {\n        /// <summary>\n        /// 设置token\n        /// </summary>\n        /// <returns></returns>\n        public static string GetToken(AdminEntity user, out string expiretimstamp)\n        {\n            string id = user.ID.ToString();\n            double exp = 0;\n            switch ((AprilEnums.TokenType)user.TokenType)\n            {\n                case AprilEnums.TokenType.Web:\n                    exp = AprilConfig.WebExpire;\n                    break;\n                case AprilEnums.TokenType.App:\n                    exp = AprilConfig.AppExpire;\n                    break;\n                case AprilEnums.TokenType.MiniProgram:\n                    exp = AprilConfig.MiniProgramExpire;\n                    break;\n                case AprilEnums.TokenType.Other:\n                    exp = AprilConfig.OtherExpire;\n                    break;\n            }\n            DateTime date = DateTime.Now.AddHours(exp);\n            user.ExpireTime = date;\n            double timestamp = DateUtil.ConvertToUnixTimestamp(date);\n            expiretimstamp = timestamp.ToString();\n            string token = AprilConfig.TokenSecretFormat.Replace(\"{id}\", id).Replace(\"{ts}\", expiretimstamp);\n            token = EncryptUtil.EncryptDES(token, EncryptUtil.SecurityKey);\n            //LogUtil.Debug($\"用户{id}获取token：{token}\");\n            Add(token, user);\n            //处理多点登录\n            SetUserToken(token, user.ID);\n            return token;\n        }\n\n        /// <summary>\n        /// 通过token获取当前人员信息\n        /// </summary>\n        /// <param name=\"token\"></param>\n        /// <returns></returns>\n        public static AdminEntity GetUserByToken(string token = \"\")\n        {\n            if (string.IsNullOrEmpty(token))\n            {\n                token = GetTokenByContent();\n            }\n            if (!string.IsNullOrEmpty(token))\n            {\n                \n                AdminEntity admin = Get(token);\n                if (admin != null)\n                {\n                    //校验时间\n                    if (admin.ExpireTime > DateTime.Now)\n                    {\n                        if (AprilConfig.AllowSliding)\n                        {\n                            //延长时间\n                            admin.ExpireTime = DateTime.Now.AddMinutes(30);\n                            //更新\n                            Add(token, admin);\n                        }\n                        return admin;\n                    }\n                    else\n                    {\n                        //已经过期的就不再延长了，当然后续根据情况改进吧\n                        return null;\n                    }\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// 通过用户请求信息获取Token信息\n        /// </summary>\n        /// <returns></returns>\n        public static string GetTokenByContent()\n        {\n            string token = \"\";\n            //判断header\n            var headers = AprilConfig.HttpCurrent.Request.Headers;\n            if (headers.ContainsKey(\"token\"))\n            {\n                token = headers[\"token\"].ToString();\n            }\n            if (string.IsNullOrEmpty(token))\n            {\n                token = CookieUtil.GetString(\"token\");\n            }\n            if (string.IsNullOrEmpty(token))\n            {\n                AprilConfig.HttpCurrent.Request.Query.TryGetValue(\"token\", out StringValues temptoken);\n                if (temptoken != StringValues.Empty)\n                {\n                    token = temptoken.ToString();\n                }\n            }\n            return token;\n        }\n        /// <summary>\n        /// 移除Token\n        /// </summary>\n        /// <param name=\"token\"></param>\n        public static void RemoveToken(string token = \"\")\n        {\n            if (string.IsNullOrEmpty(token))\n            {\n                token = GetTokenByContent();\n            }\n            if (!string.IsNullOrEmpty(token))\n            {\n                Remove(token);\n            }\n        }\n\n        #region 多个登录\n        /// <summary>\n        /// 多个登录设置缓存\n        /// </summary>\n        /// <param name=\"token\"></param>\n        /// <param name=\"userid\"></param>\n        public static void SetUserToken(string token, int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            if (dicusers == null)\n            {\n                dicusers = new Dictionary<int, List<string>>();\n            }\n            List<string> listtokens = new List<string>();\n            if (dicusers.ContainsKey(userid))\n            {\n                listtokens = dicusers[userid];\n                if (listtokens.Count <= 0)\n                {\n                    listtokens.Add(token);\n                }\n                else\n                {\n                    if (!AprilConfig.AllowMuiltiLogin)\n                    {\n                        foreach (var item in listtokens)\n                        {\n                            RemoveToken(item);\n                        }\n                        listtokens.Add(token);\n                    }\n                    else\n                    {\n                        bool isAdd = true;\n                        foreach (var item in listtokens)\n                        {\n                            if (item == token)\n                            {\n                                isAdd = false;\n                            }\n                        }\n                        if (isAdd)\n                        {\n                            listtokens.Add(token);\n                        }\n                    }\n                }\n            }\n            else\n            {\n\n                listtokens.Add(token);\n                dicusers.Add(userid, listtokens);\n            }\n            CacheUtil.Add(\"UserToken\", dicusers, new TimeSpan(6, 0, 0), true);\n        }\n        /// <summary>\n        /// 多个登录删除缓存\n        /// </summary>\n        /// <param name=\"userid\"></param>\n        public static void RemoveUserToken(int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            if (dicusers != null && dicusers.Count > 0)\n            {\n                if (dicusers.ContainsKey(userid))\n                {\n                    //删除所有token\n                    var listtokens = dicusers[userid];\n                    foreach (var token in listtokens)\n                    {\n                        RemoveToken(token);\n                    }\n                    dicusers.Remove(userid);\n                }\n            }\n        }\n        /// <summary>\n        /// 多个登录获取\n        /// </summary>\n        /// <param name=\"userid\"></param>\n        /// <returns></returns>\n        public static List<string> GetUserToken(int userid)\n        {\n            Dictionary<int, List<string>> dicusers = CacheUtil.Get<Dictionary<int, List<string>>>(\"UserToken\");\n            List<string> lists = new List<string>();\n            if (dicusers != null && dicusers.Count > 0)\n            {\n                foreach (var item in dicusers)\n                {\n                    if (item.Key == userid)\n                    {\n                        lists = dicusers[userid];\n                        break;\n                    }\n                }\n            }\n            return lists;\n        }\n        #endregion\n\n        #region 私有方法(这块儿还需要改进)\n\n        private static void Add(string token,AdminEntity admin)\n        {\n            switch (AprilConfig.TokenCacheType)\n            {\n                //不推荐Cookie\n                case AprilEnums.TokenCacheType.Cookie:\n                    CookieUtil.Add(token, admin);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    CacheUtil.Add(token, admin, new TimeSpan(0, 30, 0));\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    SessionUtil.Add(token, admin);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    RedisUtil.Add(token, admin);\n                    break;\n            }\n        }\n\n        private static AdminEntity Get(string token)\n        {\n            AdminEntity admin = null;\n            switch (AprilConfig.TokenCacheType)\n            {\n                case AprilEnums.TokenCacheType.Cookie:\n                    admin = CookieUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    admin = CacheUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    admin = SessionUtil.Get<AdminEntity>(token);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    admin = RedisUtil.Get<AdminEntity>(token);\n                    break;\n            }\n            return admin;\n        }\n\n        private static void Remove(string token)\n        {\n            switch (AprilConfig.TokenCacheType)\n            {\n                case AprilEnums.TokenCacheType.Cookie:\n                    CookieUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Cache:\n                    CacheUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Session:\n                    SessionUtil.Remove(token);\n                    break;\n                case AprilEnums.TokenCacheType.Redis:\n                    RedisUtil.Remove(token);\n                    break;\n            }\n        }\n        #endregion\n    }\n```\n\n### 中间层\n当然这也在之前已经提到过[net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](https://blog.csdn.net/weixin_44518486/article/details/97795992)，当时还觉得这个叫做拦截器，too young too simple，至于使用方法这里就不多说了，可以参考之前2.2版本的东西，也可以看代码仓库中的示例工程。\n\n```csharp\n    public class AprilAuthorizationMiddleware\n    {\n        private readonly RequestDelegate next;\n\n        public AprilAuthorizationMiddleware(RequestDelegate next)\n        {\n            this.next = next;\n        }\n\n        public Task Invoke(HttpContext context)\n        {\n            if (context.Request.Method != \"OPTIONS\")\n            {\n                string path = context.Request.Path.Value;\n                if (!AprilConfig.AllowUrl.Contains(path))\n                {\n                    //获取管理员信息\n                    AdminEntity admin = TokenUtil.GetUserByToken();\n                    if (admin == null)\n                    {\n                        //重新登录\n                        return ResponseUtil.HandleResponse(-2, \"未登录\");\n                    }\n                    if (!admin.IsSuperManager)\n                    {\n                        //格式统一为/api/Controller/Action，兼容多级如/api/Controller1/ConrolerInnerName/xxx/Action\n                        string[] strValues = System.Text.RegularExpressions.Regex.Split(path, \"/\");\n\n                        string controller = \"\";\n                        bool isStartApi = false;\n                        if (path.StartsWith(\"/api\"))\n                        {\n                            isStartApi = true;\n                        }\n                        for (int i = 0; i < strValues.Length; i++)\n                        {\n                            //为空，为api，或者最后一个\n                            if (string.IsNullOrEmpty(strValues[i]) || i == strValues.Length - 1)\n                            {\n                                continue;\n                            }\n                            if (isStartApi && strValues[i] == \"api\")\n                            {\n                                continue;\n                            }\n                            if (!string.IsNullOrEmpty(controller))\n                            {\n                                controller += \"/\";\n                            }\n                            controller += strValues[i];\n                        }\n                        if (string.IsNullOrEmpty(controller))\n                        {\n                            controller = strValues[strValues.Length - 1];\n                        }\n                        if (!admin.Controllers.Contains(controller.ToLower()))\n                        {\n                            //无权访问\n                            return ResponseUtil.HandleResponse(401, \"无权访问\");\n                        }\n\n                    }\n                }\n            }\n            return next.Invoke(context);\n        }\n    }\n```\n\nOk，我们先来看下Login中的操作以及实现效果吧。\n\n```csharp\n\t\t[HttpPost]\n        public async Task<ResponseDataEntity> Login(LoginFormEntity formEntity)\n        {\n            if (string.IsNullOrEmpty(formEntity.LoginName) || string.IsNullOrEmpty(formEntity.Password))\n            {\n                return ResponseUtil.Fail(\"请输入账号密码\");\n            }\n            if (formEntity.LoginName == \"admin\")\n            {\n                //这里实际应该通过db获取管理员\n                string password = EncryptUtil.MD5Encrypt(formEntity.Password, AprilConfig.SecurityKey);\n                if (password == \"B092956160CB0018\")\n                {\n                    //获取管理员相关权限，同样是db获取，这里只做展示\n                    AdminEntity admin = new AdminEntity\n                    {\n                        UserName = \"超级管理员\",\n                        Avator = \"\",\n                        IsSuperManager = true,\n                        TokenType = (int)AprilEnums.TokenType.Web\n                    };\n                    string token = TokenUtil.GetToken(admin, out string expiretimestamp);\n                    int expiretime = 0;\n                    int.TryParse(expiretimestamp, out expiretime);\n                    //可以考虑记录登录日志等其他信息\n                    return ResponseUtil.Success(\"\", new { username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime });\n                }\n            }\n            else if (formEntity.LoginName == \"test\")\n            {\n                //这里做权限演示\n\t\t\t\tAdminEntity admin = new AdminEntity\n                {\n                    UserName = \"测试\",\n                    Avator = \"\",\n                    TokenType = (int)AprilEnums.TokenType.Web\n                };\n                admin.Controllers.Add(\"weatherforecast\");\n                admin.Permissions.Add(\"weatherforecast_log\");//控制器_事件(Add,Update...)\n                string token = TokenUtil.GetToken(admin, out string expiretimestamp);\n                int expiretime = 0;\n                int.TryParse(expiretimestamp, out expiretime);\n                //可以考虑记录登录日志等其他信息\n                return ResponseUtil.Success(\"\", new { username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime });\n            }\n            //这里其实已经可以考虑验证码相关了，但是这是示例工程，后续可持续关注我，会有基础工程（带权限）的实例公开\n            return ResponseUtil.Fail(\"账号密码错误\");\n        }\n```\n> 可能乍一看会先吐槽下，明明是异步接口还用同步的方法，没有异步的实现空浪费内存xxx，因为db考虑是要搞异步，所以这里示例就这样先写了，主要是领会精神，咳咳。\n\n来试下效果吧，首先我们随便访问个白名单外的接口。\n\n![测试](net-core-april-util-update-1/1.png)\n然后我们通过账号登陆Login接口（直接写死了，admin，123456），获取到token。\n![登陆](net-core-april-util-update-1/2.png)\n然后我们来访问接口。\n![测试](net-core-april-util-update-1/3.png)\n是不是还是未登录，没错，因为没有token的传值，当然我这里是通过query传值，支持header，token，query。\n\n![测试](net-core-april-util-update-1/4.png)\n这里因为是超管，所以权限随意搞，无所谓，接下来展示下普通用户的权限标示。\n\n目前可以通过标签**AprilPermission**，把当前的控制器与对应事件的权限作为参数传递，之后根据当前管理员信息做校验。\n\n```csharp\n    public class AprilPermissionAttribute : Attribute, IActionFilter\n    {\n\n        public string Permission;\n        public string Controller;\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"_controller\">控制器</param>\n        /// <param name=\"_permission\">接口事件</param>\n        public AprilPermissionAttribute(string _controller, string _permission)\n        {\n            Permission = _permission;\n            Controller = _controller;\n        }\n\n        public void OnActionExecuted(ActionExecutedContext context)\n        {\n            LogUtil.Debug(\"AprilPermission OnActionExecuted\");\n        }\n        public void OnActionExecuting(ActionExecutingContext context)\n        {\n            AdminEntity admin = TokenUtil.GetUserByToken();\n            if (admin == null || admin.ExpireTime <= DateTime.Now)\n            {\n                context.Result = new ObjectResult(new { msg = \"未登录\", code = -2 });\n            }\n            if (!admin.IsSuperManager)\n            {\n                string controller_permission = $\"{Controller}_{Permission}\";\n                if (!admin.Controllers.Contains(Controller) || !admin.Permissions.Contains(controller_permission))\n                {\n                    context.Result = new ObjectResult(new { msg = \"无权访问\", code = 401 });\n                }\n            }\n        }\n    }\n```\n\n针对几个接口做了调整，附上标签后判断权限，我们来测试下登录test，密码随意。\n\n![测试](net-core-april-util-update-1/5.png)\n![测试](net-core-april-util-update-1/6.png)\n![测试](net-core-april-util-update-1/7.png)\n\n![测试](net-core-april-util-update-1/8.png)\n至此权限相关的功能也统一起来，当然如果有个性化的还是需要调整的，后续也是会不断的更新改动。\n\n### 小结\n权限还是稍微麻烦点儿啊，通过中间层，标签以及**TokenUtil**来完成登录授权这块儿，至于数据的划分，毕竟这个东西不是通用的，所以只是点出来而没有去整合，如果有好的建议或者自己整合的通用类库也可以跟我交流。\n\n","slug":"net-core-april-util-update-1","published":1,"updated":"2019-11-22T02:59:38.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m4n004a9sv7afj5tedw","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前已经提到过，公用类库Util已经开源，目的一是为了简化开发的工作量，毕竟有些常规的功能类库重复率还是挺高的，二是为了一起探讨学习软件开发，用的人越多问题也就会越多，解决的问题越多功能也就越完善，<strong>仓库地址：</strong> <a href=\"https://github.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_github</a>，<a href=\"https://gitee.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_gitee</a>，还没关注的朋友希望可以先mark，后续会持续维护。</p>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>在之前的<a href=\"https://blog.csdn.net/weixin_44518486/article/details/102947508\" target=\"_blank\" rel=\"noopener\">net core WebApi——公用库April.Util公开及发布</a>中已经介绍了初次发布的一些功能，其中包括缓存，日志，加密，统一的配置等等，具体可以再回头看下这篇介绍，而在其中有个<strong>TokenUtil</strong>，因为当时发布的时候这块儿还没有更新上，趁着周末来整理下吧。</p>\n<p>关于webapi的权限，可以借助Identity，Jwt，但是我这里没有借助这些，只是自己做了个token的生成已经存储用户主要信息，对于权限我想大多数人已经有了一套自己的权限体系，所以这里我简单介绍下我的思路。</p>\n<ol>\n<li>首先对于菜单做权限标示，请求的控制器，请求的事件</li>\n<li>菜单信息维护后，设置角色对应多个菜单</li>\n<li>管理员对应多个角色</li>\n<li>在登录的时候根据账号信息获取对应管理员的角色及最终菜单，控制器，事件</li>\n<li>处理管理员信息后自定义token，可设置token过期时间，token可以反解析（如果到期自动重新授权，我这里没有处理）</li>\n<li>每次访问接口的时候（除公开不需校验的接口），根据请求的路径判断是否有当前控制器权限（通过中间层），进入接口后判断是否有对应权限（通过标签）</li>\n</ol>\n<blockquote>\n<p>通过上述流程来做权限的校验，当然这里只是针对单应用，如果是多应用的话，这里还要考虑应用问题（如，一个授权认证工程主做身份校验，多个应用工程通用一个管理）。</p>\n</blockquote>\n<p>首先，我们需要一个可以存储管理员的对应属性集合<strong>AdminEntity</strong>，主要存储基本信息，控制器集合，权限集合，数据集合（也就是企业部门等）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 管理员实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _UserName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Avator = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">string</span>&gt; _Controllers = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">string</span>&gt; _Permissions = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _TokenType = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> _IsSuperManager = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>&gt; _Depts = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _CurrentDept = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DateTime _ExpireTime = DateTime.Now;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 主键</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ID &#123; <span class=\"keyword\">get</span> =&gt; _ID; <span class=\"keyword\">set</span> =&gt; _ID = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span> =&gt; _UserName; <span class=\"keyword\">set</span> =&gt; _UserName = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 头像</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Avator &#123; <span class=\"keyword\">get</span> =&gt; _Avator; <span class=\"keyword\">set</span> =&gt; _Avator = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 控制器集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">string</span>&gt; Controllers &#123; <span class=\"keyword\">get</span> =&gt; _Controllers; <span class=\"keyword\">set</span> =&gt; _Controllers = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 权限集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">string</span>&gt; Permissions &#123; <span class=\"keyword\">get</span> =&gt; _Permissions; <span class=\"keyword\">set</span> =&gt; _Permissions = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 访问方式</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TokenType &#123; <span class=\"keyword\">get</span> =&gt; _TokenType; <span class=\"keyword\">set</span> =&gt; _TokenType = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 是否为超管</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuperManager &#123; <span class=\"keyword\">get</span> =&gt; _IsSuperManager; <span class=\"keyword\">set</span> =&gt; _IsSuperManager = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 企业集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">int</span>&gt; Depts &#123; <span class=\"keyword\">get</span> =&gt; _Depts; <span class=\"keyword\">set</span> =&gt; _Depts = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 当前企业</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CurrentDept &#123; <span class=\"keyword\">get</span> =&gt; _CurrentDept; <span class=\"keyword\">set</span> =&gt; _CurrentDept = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 过期时间</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime ExpireTime &#123; <span class=\"keyword\">get</span> =&gt; _ExpireTime; <span class=\"keyword\">set</span> =&gt; _ExpireTime = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们来完成TokenUtil这块儿，首先是生成我们的token串，因为考虑到需要反解析，所以这里采用的是字符串加解密，当然这个加密串具体是什么可以自定义，目前我这里设置的是固定需要两个参数{id}，{ts}，目的是为了保证加密串的唯一，当然也是为了过期无感知重新授权准备的。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 设置token</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetToken</span>(<span class=\"params\">AdminEntity user, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimstamp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> id = user.ID.ToString();</span><br><span class=\"line\">        <span class=\"keyword\">double</span> exp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ((AprilEnums.TokenType)user.TokenType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.Web:</span><br><span class=\"line\">                exp = AprilConfig.WebExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.App:</span><br><span class=\"line\">                exp = AprilConfig.AppExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.MiniProgram:</span><br><span class=\"line\">                exp = AprilConfig.MiniProgramExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.Other:</span><br><span class=\"line\">                exp = AprilConfig.OtherExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DateTime date = DateTime.Now.AddHours(exp);</span><br><span class=\"line\">        user.ExpireTime = date;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> timestamp = DateUtil.ConvertToUnixTimestamp(date);</span><br><span class=\"line\">        expiretimstamp = timestamp.ToString();</span><br><span class=\"line\">        <span class=\"keyword\">string</span> token = AprilConfig.TokenSecretFormat.Replace(<span class=\"string\">\"&#123;id&#125;\"</span>, id).Replace(<span class=\"string\">\"&#123;ts&#125;\"</span>, expiretimstamp);</span><br><span class=\"line\">        token = EncryptUtil.EncryptDES(token, EncryptUtil.SecurityKey);</span><br><span class=\"line\">        <span class=\"comment\">//LogUtil.Debug($\"用户&#123;id&#125;获取token：&#123;token&#125;\");</span></span><br><span class=\"line\">        Add(token, user);</span><br><span class=\"line\">        <span class=\"comment\">//处理多点登录</span></span><br><span class=\"line\">        SetUserToken(token, user.ID);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 通过token获取当前人员信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminEntity <span class=\"title\">GetUserByToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = GetTokenByContent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            AdminEntity admin = Get(token);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (admin != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//校验时间</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (admin.ExpireTime &gt; DateTime.Now)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (AprilConfig.AllowSliding)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//延长时间</span></span><br><span class=\"line\">                        admin.ExpireTime = DateTime.Now.AddMinutes(<span class=\"number\">30</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//更新</span></span><br><span class=\"line\">                        Add(token, admin);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//已经过期的就不再延长了，当然后续根据情况改进吧</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 通过用户请求信息获取Token信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTokenByContent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断header</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> headers = AprilConfig.HttpCurrent.Request.Headers;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headers.ContainsKey(<span class=\"string\">\"token\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = headers[<span class=\"string\">\"token\"</span>].ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = CookieUtil.GetString(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Request.Query.TryGetValue(<span class=\"string\">\"token\"</span>, <span class=\"keyword\">out</span> StringValues temptoken);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temptoken != StringValues.Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                token = temptoken.ToString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 移除Token</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RemoveToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = GetTokenByContent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Remove(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 多个登录</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录设置缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetUserToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token, <span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dicusers = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">string</span>&gt; listtokens = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers.ContainsKey(userid))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            listtokens = dicusers[userid];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listtokens.Count &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listtokens.Add(token);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!AprilConfig.AllowMuiltiLogin)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        RemoveToken(item);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    listtokens.Add(token);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">bool</span> isAdd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item == token)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            isAdd = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isAdd)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        listtokens.Add(token);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            listtokens.Add(token);</span><br><span class=\"line\">            dicusers.Add(userid, listtokens);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CacheUtil.Add(<span class=\"string\">\"UserToken\"</span>, dicusers, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录删除缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RemoveUserToken</span>(<span class=\"params\"><span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers != <span class=\"literal\">null</span> &amp;&amp; dicusers.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dicusers.ContainsKey(userid))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//删除所有token</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> listtokens = dicusers[userid];</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> token <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    RemoveToken(token);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dicusers.Remove(userid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录获取</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">GetUserToken</span>(<span class=\"params\"><span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">string</span>&gt; lists = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers != <span class=\"literal\">null</span> &amp;&amp; dicusers.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> dicusers)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.Key == userid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lists = dicusers[userid];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 私有方法(这块儿还需要改进)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> token,AdminEntity admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不推荐Cookie</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                CookieUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                CacheUtil.Add(token, admin, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                SessionUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                RedisUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AdminEntity <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">string</span> token</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        AdminEntity admin = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                admin = CookieUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                admin = CacheUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                admin = SessionUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                admin = RedisUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\"><span class=\"keyword\">string</span> token</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                CookieUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                CacheUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                SessionUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                RedisUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中间层\"><a href=\"#中间层\" class=\"headerlink\" title=\"中间层\"></a>中间层</h3><p>当然这也在之前已经提到过<a href=\"https://blog.csdn.net/weixin_44518486/article/details/97795992\" target=\"_blank\" rel=\"noopener\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a>，当时还觉得这个叫做拦截器，too young too simple，至于使用方法这里就不多说了，可以参考之前2.2版本的东西，也可以看代码仓库中的示例工程。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilAuthorizationMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AprilAuthorizationMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.Request.Method != <span class=\"string\">\"OPTIONS\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> path = context.Request.Path.Value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!AprilConfig.AllowUrl.Contains(path))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取管理员信息</span></span><br><span class=\"line\">                AdminEntity admin = TokenUtil.GetUserByToken();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (admin == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//重新登录</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ResponseUtil.HandleResponse(<span class=\"number\">-2</span>, <span class=\"string\">\"未登录\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!admin.IsSuperManager)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//格式统一为/api/Controller/Action，兼容多级如/api/Controller1/ConrolerInnerName/xxx/Action</span></span><br><span class=\"line\">                    <span class=\"keyword\">string</span>[] strValues = System.Text.RegularExpressions.Regex.Split(path, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">string</span> controller = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">bool</span> isStartApi = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (path.StartsWith(<span class=\"string\">\"/api\"</span>))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        isStartApi = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strValues.Length; i++)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//为空，为api，或者最后一个</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strValues[i]) || i == strValues.Length - <span class=\"number\">1</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isStartApi &amp;&amp; strValues[i] == <span class=\"string\">\"api\"</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(controller))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            controller += <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        controller += strValues[i];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(controller))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        controller = strValues[strValues.Length - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!admin.Controllers.Contains(controller.ToLower()))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//无权访问</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> ResponseUtil.HandleResponse(<span class=\"number\">401</span>, <span class=\"string\">\"无权访问\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.Invoke(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ok，我们先来看下Login中的操作以及实现效果吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;ResponseDataEntity&gt; <span class=\"title\">Login</span>(<span class=\"params\">LoginFormEntity formEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(formEntity.LoginName) || <span class=\"keyword\">string</span>.IsNullOrEmpty(formEntity.Password))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> ResponseUtil.Fail(<span class=\"string\">\"请输入账号密码\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (formEntity.LoginName == <span class=\"string\">\"admin\"</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//这里实际应该通过db获取管理员</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> password = EncryptUtil.MD5Encrypt(formEntity.Password, AprilConfig.SecurityKey);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (password == <span class=\"string\">\"B092956160CB0018\"</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//获取管理员相关权限，同样是db获取，这里只做展示</span></span><br><span class=\"line\">                  AdminEntity admin = <span class=\"keyword\">new</span> AdminEntity</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      UserName = <span class=\"string\">\"超级管理员\"</span>,</span><br><span class=\"line\">                      Avator = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                      IsSuperManager = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                      TokenType = (<span class=\"keyword\">int</span>)AprilEnums.TokenType.Web</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  <span class=\"keyword\">string</span> token = TokenUtil.GetToken(admin, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimestamp);</span><br><span class=\"line\">                  <span class=\"keyword\">int</span> expiretime = <span class=\"number\">0</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">int</span>.TryParse(expiretimestamp, <span class=\"keyword\">out</span> expiretime);</span><br><span class=\"line\">                  <span class=\"comment\">//可以考虑记录登录日志等其他信息</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> &#123; username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (formEntity.LoginName == <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//这里做权限演示</span></span><br><span class=\"line\">\t\tAdminEntity admin = <span class=\"keyword\">new</span> AdminEntity</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  UserName = <span class=\"string\">\"测试\"</span>,</span><br><span class=\"line\">                  Avator = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                  TokenType = (<span class=\"keyword\">int</span>)AprilEnums.TokenType.Web</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\">              admin.Controllers.Add(<span class=\"string\">\"weatherforecast\"</span>);</span><br><span class=\"line\">              admin.Permissions.Add(<span class=\"string\">\"weatherforecast_log\"</span>);<span class=\"comment\">//控制器_事件(Add,Update...)</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> token = TokenUtil.GetToken(admin, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimestamp);</span><br><span class=\"line\">              <span class=\"keyword\">int</span> expiretime = <span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span>.TryParse(expiretimestamp, <span class=\"keyword\">out</span> expiretime);</span><br><span class=\"line\">              <span class=\"comment\">//可以考虑记录登录日志等其他信息</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> &#123; username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//这里其实已经可以考虑验证码相关了，但是这是示例工程，后续可持续关注我，会有基础工程（带权限）的实例公开</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> ResponseUtil.Fail(<span class=\"string\">\"账号密码错误\"</span>);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可能乍一看会先吐槽下，明明是异步接口还用同步的方法，没有异步的实现空浪费内存xxx，因为db考虑是要搞异步，所以这里示例就这样先写了，主要是领会精神，咳咳。</p>\n</blockquote>\n<p>来试下效果吧，首先我们随便访问个白名单外的接口。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/1.png\" alt=\"测试\"><br>然后我们通过账号登陆Login接口（直接写死了，admin，123456），获取到token。<br><img src=\"/2019/11/10/net-core-april-util-update-1/2.png\" alt=\"登陆\"><br>然后我们来访问接口。<br><img src=\"/2019/11/10/net-core-april-util-update-1/3.png\" alt=\"测试\"><br>是不是还是未登录，没错，因为没有token的传值，当然我这里是通过query传值，支持header，token，query。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/4.png\" alt=\"测试\"><br>这里因为是超管，所以权限随意搞，无所谓，接下来展示下普通用户的权限标示。</p>\n<p>目前可以通过标签<strong>AprilPermission</strong>，把当前的控制器与对应事件的权限作为参数传递，之后根据当前管理员信息做校验。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilPermissionAttribute</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Permission;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Controller;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"_controller\"&gt;</span>控制器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"_permission\"&gt;</span>接口事件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AprilPermissionAttribute</span>(<span class=\"params\"><span class=\"keyword\">string</span> _controller, <span class=\"keyword\">string</span> _permission</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Permission = _permission;</span><br><span class=\"line\">        Controller = _controller;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilPermission OnActionExecuted\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        AdminEntity admin = TokenUtil.GetUserByToken();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (admin == <span class=\"literal\">null</span> || admin.ExpireTime &lt;= DateTime.Now)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Result = <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">new</span> &#123; msg = <span class=\"string\">\"未登录\"</span>, code = <span class=\"number\">-2</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!admin.IsSuperManager)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> controller_permission = <span class=\"string\">$\"<span class=\"subst\">&#123;Controller&#125;</span>_<span class=\"subst\">&#123;Permission&#125;</span>\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!admin.Controllers.Contains(Controller) || !admin.Permissions.Contains(controller_permission))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Result = <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">new</span> &#123; msg = <span class=\"string\">\"无权访问\"</span>, code = <span class=\"number\">401</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>针对几个接口做了调整，附上标签后判断权限，我们来测试下登录test，密码随意。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/5.png\" alt=\"测试\"><br><img src=\"/2019/11/10/net-core-april-util-update-1/6.png\" alt=\"测试\"><br><img src=\"/2019/11/10/net-core-april-util-update-1/7.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/8.png\" alt=\"测试\"><br>至此权限相关的功能也统一起来，当然如果有个性化的还是需要调整的，后续也是会不断的更新改动。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>权限还是稍微麻烦点儿啊，通过中间层，标签以及<strong>TokenUtil</strong>来完成登录授权这块儿，至于数据的划分，毕竟这个东西不是通用的，所以只是点出来而没有去整合，如果有好的建议或者自己整合的通用类库也可以跟我交流。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前已经提到过，公用类库Util已经开源，目的一是为了简化开发的工作量，毕竟有些常规的功能类库重复率还是挺高的，二是为了一起探讨学习软件开发，用的人越多问题也就会越多，解决的问题越多功能也就越完善，<strong>仓库地址：</strong> <a href=\"https://github.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_github</a>，<a href=\"https://gitee.com/AprilBlank/April.Util.Public\" target=\"_blank\" rel=\"noopener\">April.Util_gitee</a>，还没关注的朋友希望可以先mark，后续会持续维护。</p>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>在之前的<a href=\"https://blog.csdn.net/weixin_44518486/article/details/102947508\" target=\"_blank\" rel=\"noopener\">net core WebApi——公用库April.Util公开及发布</a>中已经介绍了初次发布的一些功能，其中包括缓存，日志，加密，统一的配置等等，具体可以再回头看下这篇介绍，而在其中有个<strong>TokenUtil</strong>，因为当时发布的时候这块儿还没有更新上，趁着周末来整理下吧。</p>\n<p>关于webapi的权限，可以借助Identity，Jwt，但是我这里没有借助这些，只是自己做了个token的生成已经存储用户主要信息，对于权限我想大多数人已经有了一套自己的权限体系，所以这里我简单介绍下我的思路。</p>\n<ol>\n<li>首先对于菜单做权限标示，请求的控制器，请求的事件</li>\n<li>菜单信息维护后，设置角色对应多个菜单</li>\n<li>管理员对应多个角色</li>\n<li>在登录的时候根据账号信息获取对应管理员的角色及最终菜单，控制器，事件</li>\n<li>处理管理员信息后自定义token，可设置token过期时间，token可以反解析（如果到期自动重新授权，我这里没有处理）</li>\n<li>每次访问接口的时候（除公开不需校验的接口），根据请求的路径判断是否有当前控制器权限（通过中间层），进入接口后判断是否有对应权限（通过标签）</li>\n</ol>\n<blockquote>\n<p>通过上述流程来做权限的校验，当然这里只是针对单应用，如果是多应用的话，这里还要考虑应用问题（如，一个授权认证工程主做身份校验，多个应用工程通用一个管理）。</p>\n</blockquote>\n<p>首先，我们需要一个可以存储管理员的对应属性集合<strong>AdminEntity</strong>，主要存储基本信息，控制器集合，权限集合，数据集合（也就是企业部门等）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 管理员实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AdminEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _UserName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Avator = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">string</span>&gt; _Controllers = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">string</span>&gt; _Permissions = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _TokenType = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> _IsSuperManager = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>&gt; _Depts = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _CurrentDept = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DateTime _ExpireTime = DateTime.Now;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 主键</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ID &#123; <span class=\"keyword\">get</span> =&gt; _ID; <span class=\"keyword\">set</span> =&gt; _ID = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 用户名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span> =&gt; _UserName; <span class=\"keyword\">set</span> =&gt; _UserName = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 头像</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Avator &#123; <span class=\"keyword\">get</span> =&gt; _Avator; <span class=\"keyword\">set</span> =&gt; _Avator = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 控制器集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">string</span>&gt; Controllers &#123; <span class=\"keyword\">get</span> =&gt; _Controllers; <span class=\"keyword\">set</span> =&gt; _Controllers = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 权限集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">string</span>&gt; Permissions &#123; <span class=\"keyword\">get</span> =&gt; _Permissions; <span class=\"keyword\">set</span> =&gt; _Permissions = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 访问方式</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TokenType &#123; <span class=\"keyword\">get</span> =&gt; _TokenType; <span class=\"keyword\">set</span> =&gt; _TokenType = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 是否为超管</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> IsSuperManager &#123; <span class=\"keyword\">get</span> =&gt; _IsSuperManager; <span class=\"keyword\">set</span> =&gt; _IsSuperManager = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 企业集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;<span class=\"keyword\">int</span>&gt; Depts &#123; <span class=\"keyword\">get</span> =&gt; _Depts; <span class=\"keyword\">set</span> =&gt; _Depts = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 当前企业</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CurrentDept &#123; <span class=\"keyword\">get</span> =&gt; _CurrentDept; <span class=\"keyword\">set</span> =&gt; _CurrentDept = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 过期时间</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime ExpireTime &#123; <span class=\"keyword\">get</span> =&gt; _ExpireTime; <span class=\"keyword\">set</span> =&gt; _ExpireTime = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后我们来完成TokenUtil这块儿，首先是生成我们的token串，因为考虑到需要反解析，所以这里采用的是字符串加解密，当然这个加密串具体是什么可以自定义，目前我这里设置的是固定需要两个参数{id}，{ts}，目的是为了保证加密串的唯一，当然也是为了过期无感知重新授权准备的。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TokenUtil</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 设置token</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetToken</span>(<span class=\"params\">AdminEntity user, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimstamp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> id = user.ID.ToString();</span><br><span class=\"line\">        <span class=\"keyword\">double</span> exp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ((AprilEnums.TokenType)user.TokenType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.Web:</span><br><span class=\"line\">                exp = AprilConfig.WebExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.App:</span><br><span class=\"line\">                exp = AprilConfig.AppExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.MiniProgram:</span><br><span class=\"line\">                exp = AprilConfig.MiniProgramExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenType.Other:</span><br><span class=\"line\">                exp = AprilConfig.OtherExpire;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DateTime date = DateTime.Now.AddHours(exp);</span><br><span class=\"line\">        user.ExpireTime = date;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> timestamp = DateUtil.ConvertToUnixTimestamp(date);</span><br><span class=\"line\">        expiretimstamp = timestamp.ToString();</span><br><span class=\"line\">        <span class=\"keyword\">string</span> token = AprilConfig.TokenSecretFormat.Replace(<span class=\"string\">\"&#123;id&#125;\"</span>, id).Replace(<span class=\"string\">\"&#123;ts&#125;\"</span>, expiretimstamp);</span><br><span class=\"line\">        token = EncryptUtil.EncryptDES(token, EncryptUtil.SecurityKey);</span><br><span class=\"line\">        <span class=\"comment\">//LogUtil.Debug($\"用户&#123;id&#125;获取token：&#123;token&#125;\");</span></span><br><span class=\"line\">        Add(token, user);</span><br><span class=\"line\">        <span class=\"comment\">//处理多点登录</span></span><br><span class=\"line\">        SetUserToken(token, user.ID);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 通过token获取当前人员信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AdminEntity <span class=\"title\">GetUserByToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = GetTokenByContent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            AdminEntity admin = Get(token);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (admin != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//校验时间</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (admin.ExpireTime &gt; DateTime.Now)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (AprilConfig.AllowSliding)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//延长时间</span></span><br><span class=\"line\">                        admin.ExpireTime = DateTime.Now.AddMinutes(<span class=\"number\">30</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//更新</span></span><br><span class=\"line\">                        Add(token, admin);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//已经过期的就不再延长了，当然后续根据情况改进吧</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 通过用户请求信息获取Token信息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTokenByContent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断header</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> headers = AprilConfig.HttpCurrent.Request.Headers;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headers.ContainsKey(<span class=\"string\">\"token\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = headers[<span class=\"string\">\"token\"</span>].ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = CookieUtil.GetString(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AprilConfig.HttpCurrent.Request.Query.TryGetValue(<span class=\"string\">\"token\"</span>, <span class=\"keyword\">out</span> StringValues temptoken);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temptoken != StringValues.Empty)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                token = temptoken.ToString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 移除Token</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RemoveToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            token = GetTokenByContent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(token))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Remove(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 多个登录</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录设置缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"token\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetUserToken</span>(<span class=\"params\"><span class=\"keyword\">string</span> token, <span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dicusers = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">string</span>&gt; listtokens = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers.ContainsKey(userid))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            listtokens = dicusers[userid];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listtokens.Count &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listtokens.Add(token);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!AprilConfig.AllowMuiltiLogin)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        RemoveToken(item);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    listtokens.Add(token);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">bool</span> isAdd = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (item == token)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            isAdd = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (isAdd)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        listtokens.Add(token);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            listtokens.Add(token);</span><br><span class=\"line\">            dicusers.Add(userid, listtokens);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        CacheUtil.Add(<span class=\"string\">\"UserToken\"</span>, dicusers, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录删除缓存</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RemoveUserToken</span>(<span class=\"params\"><span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers != <span class=\"literal\">null</span> &amp;&amp; dicusers.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dicusers.ContainsKey(userid))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//删除所有token</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> listtokens = dicusers[userid];</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> token <span class=\"keyword\">in</span> listtokens)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    RemoveToken(token);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dicusers.Remove(userid);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 多个登录获取</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"userid\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">GetUserToken</span>(<span class=\"params\"><span class=\"keyword\">int</span> userid</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt; dicusers = CacheUtil.Get&lt;Dictionary&lt;<span class=\"keyword\">int</span>, List&lt;<span class=\"keyword\">string</span>&gt;&gt;&gt;(<span class=\"string\">\"UserToken\"</span>);</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">string</span>&gt; lists = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dicusers != <span class=\"literal\">null</span> &amp;&amp; dicusers.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> dicusers)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.Key == userid)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    lists = dicusers[userid];</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lists;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">region</span> 私有方法(这块儿还需要改进)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">string</span> token,AdminEntity admin</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不推荐Cookie</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                CookieUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                CacheUtil.Add(token, admin, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                SessionUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                RedisUtil.Add(token, admin);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AdminEntity <span class=\"title\">Get</span>(<span class=\"params\"><span class=\"keyword\">string</span> token</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        AdminEntity admin = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                admin = CookieUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                admin = CacheUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                admin = SessionUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                admin = RedisUtil.Get&lt;AdminEntity&gt;(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\"><span class=\"keyword\">string</span> token</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (AprilConfig.TokenCacheType)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cookie:</span><br><span class=\"line\">                CookieUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Cache:</span><br><span class=\"line\">                CacheUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Session:</span><br><span class=\"line\">                SessionUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> AprilEnums.TokenCacheType.Redis:</span><br><span class=\"line\">                RedisUtil.Remove(token);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endregion</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中间层\"><a href=\"#中间层\" class=\"headerlink\" title=\"中间层\"></a>中间层</h3><p>当然这也在之前已经提到过<a href=\"https://blog.csdn.net/weixin_44518486/article/details/97795992\" target=\"_blank\" rel=\"noopener\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a>，当时还觉得这个叫做拦截器，too young too simple，至于使用方法这里就不多说了，可以参考之前2.2版本的东西，也可以看代码仓库中的示例工程。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilAuthorizationMiddleware</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> RequestDelegate next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AprilAuthorizationMiddleware</span>(<span class=\"params\">RequestDelegate next</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">Invoke</span>(<span class=\"params\">HttpContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context.Request.Method != <span class=\"string\">\"OPTIONS\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> path = context.Request.Path.Value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!AprilConfig.AllowUrl.Contains(path))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取管理员信息</span></span><br><span class=\"line\">                AdminEntity admin = TokenUtil.GetUserByToken();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (admin == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//重新登录</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ResponseUtil.HandleResponse(<span class=\"number\">-2</span>, <span class=\"string\">\"未登录\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!admin.IsSuperManager)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//格式统一为/api/Controller/Action，兼容多级如/api/Controller1/ConrolerInnerName/xxx/Action</span></span><br><span class=\"line\">                    <span class=\"keyword\">string</span>[] strValues = System.Text.RegularExpressions.Regex.Split(path, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">string</span> controller = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">bool</span> isStartApi = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (path.StartsWith(<span class=\"string\">\"/api\"</span>))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        isStartApi = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strValues.Length; i++)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//为空，为api，或者最后一个</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strValues[i]) || i == strValues.Length - <span class=\"number\">1</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isStartApi &amp;&amp; strValues[i] == <span class=\"string\">\"api\"</span>)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(controller))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            controller += <span class=\"string\">\"/\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        controller += strValues[i];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(controller))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        controller = strValues[strValues.Length - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!admin.Controllers.Contains(controller.ToLower()))</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//无权访问</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> ResponseUtil.HandleResponse(<span class=\"number\">401</span>, <span class=\"string\">\"无权访问\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next.Invoke(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Ok，我们先来看下Login中的操作以及实现效果吧。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;ResponseDataEntity&gt; <span class=\"title\">Login</span>(<span class=\"params\">LoginFormEntity formEntity</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(formEntity.LoginName) || <span class=\"keyword\">string</span>.IsNullOrEmpty(formEntity.Password))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> ResponseUtil.Fail(<span class=\"string\">\"请输入账号密码\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (formEntity.LoginName == <span class=\"string\">\"admin\"</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//这里实际应该通过db获取管理员</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> password = EncryptUtil.MD5Encrypt(formEntity.Password, AprilConfig.SecurityKey);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (password == <span class=\"string\">\"B092956160CB0018\"</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//获取管理员相关权限，同样是db获取，这里只做展示</span></span><br><span class=\"line\">                  AdminEntity admin = <span class=\"keyword\">new</span> AdminEntity</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                      UserName = <span class=\"string\">\"超级管理员\"</span>,</span><br><span class=\"line\">                      Avator = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                      IsSuperManager = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                      TokenType = (<span class=\"keyword\">int</span>)AprilEnums.TokenType.Web</span><br><span class=\"line\">                  &#125;;</span><br><span class=\"line\">                  <span class=\"keyword\">string</span> token = TokenUtil.GetToken(admin, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimestamp);</span><br><span class=\"line\">                  <span class=\"keyword\">int</span> expiretime = <span class=\"number\">0</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">int</span>.TryParse(expiretimestamp, <span class=\"keyword\">out</span> expiretime);</span><br><span class=\"line\">                  <span class=\"comment\">//可以考虑记录登录日志等其他信息</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> &#123; username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (formEntity.LoginName == <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//这里做权限演示</span></span><br><span class=\"line\">\t\tAdminEntity admin = <span class=\"keyword\">new</span> AdminEntity</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  UserName = <span class=\"string\">\"测试\"</span>,</span><br><span class=\"line\">                  Avator = <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">                  TokenType = (<span class=\"keyword\">int</span>)AprilEnums.TokenType.Web</span><br><span class=\"line\">              &#125;;</span><br><span class=\"line\">              admin.Controllers.Add(<span class=\"string\">\"weatherforecast\"</span>);</span><br><span class=\"line\">              admin.Permissions.Add(<span class=\"string\">\"weatherforecast_log\"</span>);<span class=\"comment\">//控制器_事件(Add,Update...)</span></span><br><span class=\"line\">              <span class=\"keyword\">string</span> token = TokenUtil.GetToken(admin, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> expiretimestamp);</span><br><span class=\"line\">              <span class=\"keyword\">int</span> expiretime = <span class=\"number\">0</span>;</span><br><span class=\"line\">              <span class=\"keyword\">int</span>.TryParse(expiretimestamp, <span class=\"keyword\">out</span> expiretime);</span><br><span class=\"line\">              <span class=\"comment\">//可以考虑记录登录日志等其他信息</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> ResponseUtil.Success(<span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> &#123; username = admin.UserName, avator = admin.Avator, token = token, expire = expiretime &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//这里其实已经可以考虑验证码相关了，但是这是示例工程，后续可持续关注我，会有基础工程（带权限）的实例公开</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> ResponseUtil.Fail(<span class=\"string\">\"账号密码错误\"</span>);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可能乍一看会先吐槽下，明明是异步接口还用同步的方法，没有异步的实现空浪费内存xxx，因为db考虑是要搞异步，所以这里示例就这样先写了，主要是领会精神，咳咳。</p>\n</blockquote>\n<p>来试下效果吧，首先我们随便访问个白名单外的接口。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/1.png\" alt=\"测试\"><br>然后我们通过账号登陆Login接口（直接写死了，admin，123456），获取到token。<br><img src=\"/2019/11/10/net-core-april-util-update-1/2.png\" alt=\"登陆\"><br>然后我们来访问接口。<br><img src=\"/2019/11/10/net-core-april-util-update-1/3.png\" alt=\"测试\"><br>是不是还是未登录，没错，因为没有token的传值，当然我这里是通过query传值，支持header，token，query。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/4.png\" alt=\"测试\"><br>这里因为是超管，所以权限随意搞，无所谓，接下来展示下普通用户的权限标示。</p>\n<p>目前可以通过标签<strong>AprilPermission</strong>，把当前的控制器与对应事件的权限作为参数传递，之后根据当前管理员信息做校验。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AprilPermissionAttribute</span> : <span class=\"title\">Attribute</span>, <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Permission;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Controller;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"_controller\"&gt;</span>控制器<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"_permission\"&gt;</span>接口事件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AprilPermissionAttribute</span>(<span class=\"params\"><span class=\"keyword\">string</span> _controller, <span class=\"keyword\">string</span> _permission</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Permission = _permission;</span><br><span class=\"line\">        Controller = _controller;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        LogUtil.Debug(<span class=\"string\">\"AprilPermission OnActionExecuted\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        AdminEntity admin = TokenUtil.GetUserByToken();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (admin == <span class=\"literal\">null</span> || admin.ExpireTime &lt;= DateTime.Now)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            context.Result = <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">new</span> &#123; msg = <span class=\"string\">\"未登录\"</span>, code = <span class=\"number\">-2</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!admin.IsSuperManager)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> controller_permission = <span class=\"string\">$\"<span class=\"subst\">&#123;Controller&#125;</span>_<span class=\"subst\">&#123;Permission&#125;</span>\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!admin.Controllers.Contains(Controller) || !admin.Permissions.Contains(controller_permission))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                context.Result = <span class=\"keyword\">new</span> ObjectResult(<span class=\"keyword\">new</span> &#123; msg = <span class=\"string\">\"无权访问\"</span>, code = <span class=\"number\">401</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>针对几个接口做了调整，附上标签后判断权限，我们来测试下登录test，密码随意。</p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/5.png\" alt=\"测试\"><br><img src=\"/2019/11/10/net-core-april-util-update-1/6.png\" alt=\"测试\"><br><img src=\"/2019/11/10/net-core-april-util-update-1/7.png\" alt=\"测试\"></p>\n<p><img src=\"/2019/11/10/net-core-april-util-update-1/8.png\" alt=\"测试\"><br>至此权限相关的功能也统一起来，当然如果有个性化的还是需要调整的，后续也是会不断的更新改动。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>权限还是稍微麻烦点儿啊，通过中间层，标签以及<strong>TokenUtil</strong>来完成登录授权这块儿，至于数据的划分，毕竟这个东西不是通用的，所以只是点出来而没有去整合，如果有好的建议或者自己整合的通用类库也可以跟我交流。</p>\n"},{"title":"net core WebApi——文件分片上传与跨域请求处理","date":"2019-08-23T05:30:12.000Z","_content":"\n### 前言\n在之前整理完一套简单的后台基础工程后，因为业务需要鼓捣了文件上传跟下载，整理完后就迫不及待的想分享出来，希望有用到文件相关操作的朋友可以得到些帮助。\n\n### 开始\n我们依然用我们的基础工程，之前也提到过后续如果有测试功能之类的东西，会一直不断的更新这套代码（如果搞炸了之后那就…），首先我们需要理一下文件分片上传的思路：\n- **后端**\n1. 接收前端文件上传请求并处理回调\n2. 根据前端传递的钥匙判断，允许后开始接收文件流并保存到临时文件夹\n3. 前端最终上传完成后给予后端合并请求（也称作上传完成确认），后端合并文件后判断最终文件是否正确给予回调。\n- **前端**\n1. 读取文件相关信息（名称，扩展类型，大小等基本信息）\n2. 根据需要做片段划分以及文件的md5值（md5主要用于最终确认文件是否缺损）\n3. 请求后端获取钥匙\n4. 拿到钥匙后，我们根据划分的片段去循环上传文件，并根据每次回调判断是否上传成功，如失败则重新上传\n5. 最终循环完成后，给予后端合并请求（上传完成确认）\n\nps：这里的钥匙就是个文件名，当然你可以来个token啊什么的根据自己业务需要。\n\n> 这里还是想分享下敲代码的经验，在我们动手之前，最好把能考虑到的东西全都想好，思路理清也就是打好提纲后，敲代码的效率会高并且错误率也会低，行云流水不是天马行空，而是你的大脑中已经有了山水鸟兽。\n\nOK，流程清楚之后，我们开始动手敲代码吧。\n\n首先，我们新建一个控制器**FileController**，当然名字可以随意取，根据我们上述后端的思路，新建三个接口**RequestUploadFile**，**FileSave**，**FileMerge**。\n\n```csharp\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class FileController : ControllerBase\n    {\n        /// <summary>\n        /// 请求上传文件\n        /// </summary>\n        /// <param name=\"requestFile\">请求上传参数实体</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"RequestUpload\")]\n        public MessageEntity RequestUploadFile([FromBody]RequestFileUploadEntity requestFile)\n        {\n\n        }\n\n        /// <summary>\n        /// 文件上传\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost, Route(\"Upload\")]\n        public async Task<MessageEntity> FileSave()\n        {\n        }\n\n        /// <summary>\n        /// 文件合并\n        /// </summary>\n        /// <param name=\"fileInfo\">文件参数信息[name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"Merge\")]\n        public async Task<MessageEntity> FileMerge([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n    }\n```\n如果直接复制的朋友，这里肯定是满眼红彤彤，这里主要用了两个类，一个请求实体**RequestFileUploadEntity**，一个回调实体**MessageEntity**，这两个我们到Util工程创建（当然也可以放到Entity工程，这里为什么放到Util呢，因为我觉得放到这里公用比较好，毕竟还是有复用的价值的）。\n```csharp\n    /// <summary>\n    /// 文件请求上传实体\n    /// </summary>\n    public class RequestFileUploadEntity\n    {\n        private long _size = 0;\n        private int _count = 0;\n        private string _filedata = string.Empty;\n        private string _fileext = string.Empty;\n        private string _filename = string.Empty;\n\n        /// <summary>\n        /// 文件大小\n        /// </summary>\n        public long size { get => _size; set => _size = value; }\n        /// <summary>\n        /// 片段数量\n        /// </summary>\n        public int count { get => _count; set => _count = value; }\n        /// <summary>\n        /// 文件md5\n        /// </summary>\n        public string filedata { get => _filedata; set => _filedata = value; }\n        /// <summary>\n        /// 文件类型\n        /// </summary>\n        public string fileext { get => _fileext; set => _fileext = value; }\n        /// <summary>\n        /// 文件名\n        /// </summary>\n        public string filename { get => _filename; set => _filename = value; }\n    }\n```\n\n```csharp\n    /// <summary>\n    /// 返回实体\n    /// </summary>\n    public class MessageEntity\n    {\n        private int _Code = 0;\n        private string _Msg = string.Empty;\n        private object _Data = new object();\n\n        /// <summary>\n        /// 状态标识\n        /// </summary>\n        public int Code { get => _Code; set => _Code = value; }\n        /// <summary>\n        /// 返回消息\n        /// </summary>\n        public string Msg { get => _Msg; set => _Msg = value; }\n        /// <summary>\n        /// 返回数据\n        /// </summary>\n        public object Data { get => _Data; set => _Data = value; }\n    }\n```\n\n创建完成写好之后我们在红的地方Alt+Enter，哪里爆红点哪里（so easy），好了，不扯犊子了，每个接口的方法如下。\n\n**RequestUploadFile**\n```csharp\n        public MessageEntity RequestUploadFile([FromBody]RequestFileUploadEntity requestFile)\n        {\n            LogUtil.Debug($\"RequestUploadFile 接收参数：{JsonConvert.SerializeObject(requestFile)}\");\n            MessageEntity message = new MessageEntity();\n            if (requestFile.size <= 0 || requestFile.count <= 0 || string.IsNullOrEmpty(requestFile.filedata))\n            {\n                message.Code = -1;\n                message.Msg = \"参数有误\";\n            }\n            else\n            {\n                //这里需要记录文件相关信息，并返回文件guid名，后续请求带上此参数\n                string guidName = Guid.NewGuid().ToString(\"N\");\n\n                //前期单台服务器可以记录Cache，多台后需考虑redis或数据库\n                CacheUtil.Set(guidName, requestFile, new TimeSpan(0, 10, 0), true);\n\n                message.Code = 0;\n                message.Msg = \"\";\n                message.Data = new { filename = guidName };\n            }\n            return message;\n        }\n```\n\n**FileSave**\n```csharp\n        public async Task<MessageEntity> FileSave()\n        {\n            var files = Request.Form.Files;\n            long size = files.Sum(f => f.Length);\n            string fileName = Request.Form[\"filename\"];\n\n            int fileIndex = 0;\n            int.TryParse(Request.Form[\"fileindex\"], out fileIndex);\n            LogUtil.Debug($\"FileSave开始执行获取数据：{fileIndex}_{size}\");\n            MessageEntity message = new MessageEntity();\n            if (size <= 0 || string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件上传失败\";\n                return message;\n            }\n\n            if (!CacheUtil.Exists(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"请重新请求上传文件\";\n                return message;\n            }\n\n            long fileSize = 0;\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            string saveFileName = $\"{fileName}_{fileIndex}\";\n            string dirPath = Path.Combine(filePath, saveFileName);\n            if (!Directory.Exists(filePath))\n            {\n                Directory.CreateDirectory(filePath);\n            }\n\n            foreach (var file in files)\n            {\n                //如果有文件\n                if (file.Length > 0)\n                {\n                    fileSize = 0;\n                    fileSize = file.Length;\n\n                    using (var stream = new FileStream(dirPath, FileMode.OpenOrCreate))\n                    {\n                        await file.CopyToAsync(stream);\n                    }\n                }\n            }\n\n            message.Code = 0;\n            message.Msg = \"\";\n            return message;\n        }\n```\n\n**FileMerge**\n```csharp\n\t\tpublic async Task<MessageEntity> FileMerge([FromBody]Dictionary<string, object> fileInfo)\n        {\n            MessageEntity message = new MessageEntity();\n            string fileName = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件名不能为空\";\n                return message;\n            }\n\n            //最终上传完成后，请求合并返回合并消息\n            try\n            {\n                RequestFileUploadEntity requestFile = CacheUtil.Get<RequestFileUploadEntity>(fileName);\n                if (requestFile == null)\n                {\n                    message.Code = -1;\n                    message.Msg = \"合并失败\";\n                    return message;\n                }\n                string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n                string fileExt = requestFile.fileext;\n                string fileMd5 = requestFile.filedata;\n                int fileCount = requestFile.count;\n                long fileSize = requestFile.size;\n\n                LogUtil.Debug($\"获取文件路径：{filePath}\");\n                LogUtil.Debug($\"获取文件类型：{fileExt}\");\n\n                string savePath = filePath.Replace(fileName, \"\");\n                string saveFileName = $\"{fileName}{fileExt}\";\n                var files = Directory.GetFiles(filePath);\n                string fileFinalName = Path.Combine(savePath, saveFileName);\n                LogUtil.Debug($\"获取文件最终路径：{fileFinalName}\");\n                FileStream fs = new FileStream(fileFinalName, FileMode.Create);\n                LogUtil.Debug($\"目录文件下文件总数：{files.Length}\");\n\n                LogUtil.Debug($\"目录文件排序前：{string.Join(\",\", files.ToArray())}\");\n                LogUtil.Debug($\"目录文件排序后：{string.Join(\",\", files.OrderBy(x => x.Length).ThenBy(x => x))}\");\n                byte[] finalBytes = new byte[fileSize];\n                foreach (var part in files.OrderBy(x => x.Length).ThenBy(x => x))\n                {\n                    var bytes = System.IO.File.ReadAllBytes(part);\n\n                    await fs.WriteAsync(bytes, 0, bytes.Length);\n                    bytes = null;\n                    System.IO.File.Delete(part);//删除分块\n                }\n                fs.Close();\n                //这个地方会引发文件被占用异常\n                fs = new FileStream(fileFinalName, FileMode.Open);\n                string strMd5 = GetCryptoString(fs);\n                LogUtil.Debug($\"文件数据MD5：{strMd5}\");\n                LogUtil.Debug($\"文件上传数据：{JsonConvert.SerializeObject(requestFile)}\");\n                fs.Close();\n                Directory.Delete(filePath);\n                //如果MD5与原MD5不匹配，提示重新上传\n                if (strMd5 != requestFile.filedata)\n                {\n                    LogUtil.Debug($\"上传文件md5：{requestFile.filedata},服务器保存文件md5：{strMd5}\");\n                    message.Code = -1;\n                    message.Msg = \"MD5值不匹配\";\n                    return message;\n                }\n\n                CacheUtil.Remove(fileInfo[\"name\"].ToString());\n                message.Code = 0;\n                message.Msg = \"\";\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"合并文件失败，文件名称：{fileName}，错误信息：{ex.Message}\");\n                message.Code = -1;\n                message.Msg = \"合并文件失败,请重新上传\";\n            }\n            return message;\n        }\n```\n\n这里说明下，在Merge的时候，主要校验md5值，用到了一个方法，我这里没有放到Util（其实是因为懒），代码如下：\n```csharp\n\t\t/// <summary>\n        /// 文件流加密\n        /// </summary>\n        /// <param name=\"fileStream\"></param>\n        /// <returns></returns>\n        private string GetCryptoString(Stream fileStream)\n        {\n            MD5 md5 = new MD5CryptoServiceProvider();\n            byte[] cryptBytes = md5.ComputeHash(fileStream);\n            return GetCryptoString(cryptBytes);\n        }\n\n        private string GetCryptoString(byte[] cryptBytes)\n        {\n            //加密的二进制转为string类型返回\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < cryptBytes.Length; i++)\n            {\n                sb.Append(cryptBytes[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n```\n\n### 测试\n方法写好了之后，我们需不需要测试呢，那不是废话么，自己的代码不过一遍等着让测试人员搞你呢。\n\n> 再说个编码习惯，就是自己的代码自己最起码常规的过一遍，也不说跟大厂一样什么KPI啊啥的影响，自己的东西最起码拿出手让人一看知道用心了就行，不说什么测试全覆盖，就是1+1=2这种基本的正常就OK。\n\n程序运行之后，我这里写了个简单的测试界面，运行之后发现提示OPTIONS，果断跨域错误，还记得我们之前提到的跨域问题，这里给出解决方法。\n![测试](net-core-fileuploader-and-cors/1.png)\n### 跨域\n跨域，就是我在这个区域，想跟另一个区域联系的时候，我们会碰到墙，这堵墙的目的就是，禁止不同区域的人私下交流沟通，但是现在我们就是不要这堵墙或者说要开几个门的话怎么做呢，net core有专门设置的地方，我们回到Startup这里。\n\n我们来看新增的代码：\n```csharp\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n        \t//…之前的代码忽略\n        \t\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowAll\", p =>\n                {\n                    p.AllowAnyOrigin()\n                    .AllowAnyMethod()\n                    .AllowAnyHeader()\n                    .AllowCredentials();\n                });\n            });\n            \n            services.AddAspectCoreContainer();\n            return services.BuildAspectInjectorProvider();\n\n        }\n```\n\n**AddCors**来添加一个跨域处理方式，**AddPolicy**就是加个巡逻官，看看符合规则的放进来，不符合的直接赶出去。\n\n|方法| 介绍 |\n|--|--|\n| AllowAnyOrigin | 允许所有的域名请求 |\n| AllowAnyMethod | 允许所有的请求方式GET/POST/PUT/DELETE |\n| AllowAnyHeader | 允许所有的头部参数 |\n| AllowCredentials | 允许携带Cookie |\n\n这里我使用的是允许所有，可以根据自身业务需要来调整，比如只允许部分域名访问，部分请求方式，部分Header：\n```csharp\n\t\t\t//只是示例，具体根据自身需要\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowSome\", p =>\n                 {\n                     p.WithOrigins(\"https://www.baidu.com\")\n                     .WithMethods(\"GET\", \"POST\")\n                     .WithHeaders(HeaderNames.ContentType, \"x-custom-header\");\n                 });\n            });\n```\n\n写好之后我们在**Configure**中声明注册使用哪个巡逻官。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n        \t//…之前的\n            app.UseCors(\"AllowAll\");  \n            \n            app.UseHttpsRedirection();\n            app.UseMvc();      \n        }\n```\n\n好了，设置好跨域之后我们再来执行下上传操作。\n![测试](net-core-fileuploader-and-cors/2.png)\n我们看到这个提示之后，是不是能想起来什么，我们之前做过中间层不知道还记得不，忘了的朋友可以再看下[net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](/2019/07/30/aop-and-test-part-1/)。\n在appsettings.json添加上接口白名单。\n```json\n  \"AllowUrl\": \"/api/Values,/api/File/RequestUpload,/api/File/Upload,/api/File/Merge\"\n```\n设置好之后，我们继续上传，这次总算是可以了（文件后缀这个忽略，测试使用，js就是做了个简单的substring）。\n![测试](net-core-fileuploader-and-cors/3.png)\n我们来查看上传文件记录的日志信息。\n![测试](net-core-fileuploader-and-cors/4.png)\n再来我们看下文件存储的位置，这个位置我们在appsettings里面已经设置过，可以根据自己业务需要调整。\n![测试](net-core-fileuploader-and-cors/5.png)\n打开文件看下是否有损坏，压缩包很容易看出来是否正常，只要能打开基本上（当然可能会有问题）没问题。\n![测试](net-core-fileuploader-and-cors/6.png)\n解压出来如果正常那肯定就是没问题了吧（压缩这个玩意儿真是牛逼，节省了多少的存储空间，虽说硬盘白菜价）。\n![测试](net-core-fileuploader-and-cors/7.png)\n### 小结\n在整理文件上传这篇刚好捎带着把跨域也简单了过了一遍，下来需要再折腾的东西就是**大文件的分片下载**，大致的思路与文件上传一致，毕竟都是一个大蛋糕，切成好几块，你一块，剩下的都是我的。\n\n\n","source":"_posts/net-core-fileuploader-and-cors.md","raw":"---\ntitle: net core WebApi——文件分片上传与跨域请求处理\ndate: 2019-08-23 13:30:12\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n在之前整理完一套简单的后台基础工程后，因为业务需要鼓捣了文件上传跟下载，整理完后就迫不及待的想分享出来，希望有用到文件相关操作的朋友可以得到些帮助。\n\n### 开始\n我们依然用我们的基础工程，之前也提到过后续如果有测试功能之类的东西，会一直不断的更新这套代码（如果搞炸了之后那就…），首先我们需要理一下文件分片上传的思路：\n- **后端**\n1. 接收前端文件上传请求并处理回调\n2. 根据前端传递的钥匙判断，允许后开始接收文件流并保存到临时文件夹\n3. 前端最终上传完成后给予后端合并请求（也称作上传完成确认），后端合并文件后判断最终文件是否正确给予回调。\n- **前端**\n1. 读取文件相关信息（名称，扩展类型，大小等基本信息）\n2. 根据需要做片段划分以及文件的md5值（md5主要用于最终确认文件是否缺损）\n3. 请求后端获取钥匙\n4. 拿到钥匙后，我们根据划分的片段去循环上传文件，并根据每次回调判断是否上传成功，如失败则重新上传\n5. 最终循环完成后，给予后端合并请求（上传完成确认）\n\nps：这里的钥匙就是个文件名，当然你可以来个token啊什么的根据自己业务需要。\n\n> 这里还是想分享下敲代码的经验，在我们动手之前，最好把能考虑到的东西全都想好，思路理清也就是打好提纲后，敲代码的效率会高并且错误率也会低，行云流水不是天马行空，而是你的大脑中已经有了山水鸟兽。\n\nOK，流程清楚之后，我们开始动手敲代码吧。\n\n首先，我们新建一个控制器**FileController**，当然名字可以随意取，根据我们上述后端的思路，新建三个接口**RequestUploadFile**，**FileSave**，**FileMerge**。\n\n```csharp\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class FileController : ControllerBase\n    {\n        /// <summary>\n        /// 请求上传文件\n        /// </summary>\n        /// <param name=\"requestFile\">请求上传参数实体</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"RequestUpload\")]\n        public MessageEntity RequestUploadFile([FromBody]RequestFileUploadEntity requestFile)\n        {\n\n        }\n\n        /// <summary>\n        /// 文件上传\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost, Route(\"Upload\")]\n        public async Task<MessageEntity> FileSave()\n        {\n        }\n\n        /// <summary>\n        /// 文件合并\n        /// </summary>\n        /// <param name=\"fileInfo\">文件参数信息[name]</param>\n        /// <returns></returns>\n        [HttpPost, Route(\"Merge\")]\n        public async Task<MessageEntity> FileMerge([FromBody]Dictionary<string, object> fileInfo)\n        {\n\n        }\n    }\n```\n如果直接复制的朋友，这里肯定是满眼红彤彤，这里主要用了两个类，一个请求实体**RequestFileUploadEntity**，一个回调实体**MessageEntity**，这两个我们到Util工程创建（当然也可以放到Entity工程，这里为什么放到Util呢，因为我觉得放到这里公用比较好，毕竟还是有复用的价值的）。\n```csharp\n    /// <summary>\n    /// 文件请求上传实体\n    /// </summary>\n    public class RequestFileUploadEntity\n    {\n        private long _size = 0;\n        private int _count = 0;\n        private string _filedata = string.Empty;\n        private string _fileext = string.Empty;\n        private string _filename = string.Empty;\n\n        /// <summary>\n        /// 文件大小\n        /// </summary>\n        public long size { get => _size; set => _size = value; }\n        /// <summary>\n        /// 片段数量\n        /// </summary>\n        public int count { get => _count; set => _count = value; }\n        /// <summary>\n        /// 文件md5\n        /// </summary>\n        public string filedata { get => _filedata; set => _filedata = value; }\n        /// <summary>\n        /// 文件类型\n        /// </summary>\n        public string fileext { get => _fileext; set => _fileext = value; }\n        /// <summary>\n        /// 文件名\n        /// </summary>\n        public string filename { get => _filename; set => _filename = value; }\n    }\n```\n\n```csharp\n    /// <summary>\n    /// 返回实体\n    /// </summary>\n    public class MessageEntity\n    {\n        private int _Code = 0;\n        private string _Msg = string.Empty;\n        private object _Data = new object();\n\n        /// <summary>\n        /// 状态标识\n        /// </summary>\n        public int Code { get => _Code; set => _Code = value; }\n        /// <summary>\n        /// 返回消息\n        /// </summary>\n        public string Msg { get => _Msg; set => _Msg = value; }\n        /// <summary>\n        /// 返回数据\n        /// </summary>\n        public object Data { get => _Data; set => _Data = value; }\n    }\n```\n\n创建完成写好之后我们在红的地方Alt+Enter，哪里爆红点哪里（so easy），好了，不扯犊子了，每个接口的方法如下。\n\n**RequestUploadFile**\n```csharp\n        public MessageEntity RequestUploadFile([FromBody]RequestFileUploadEntity requestFile)\n        {\n            LogUtil.Debug($\"RequestUploadFile 接收参数：{JsonConvert.SerializeObject(requestFile)}\");\n            MessageEntity message = new MessageEntity();\n            if (requestFile.size <= 0 || requestFile.count <= 0 || string.IsNullOrEmpty(requestFile.filedata))\n            {\n                message.Code = -1;\n                message.Msg = \"参数有误\";\n            }\n            else\n            {\n                //这里需要记录文件相关信息，并返回文件guid名，后续请求带上此参数\n                string guidName = Guid.NewGuid().ToString(\"N\");\n\n                //前期单台服务器可以记录Cache，多台后需考虑redis或数据库\n                CacheUtil.Set(guidName, requestFile, new TimeSpan(0, 10, 0), true);\n\n                message.Code = 0;\n                message.Msg = \"\";\n                message.Data = new { filename = guidName };\n            }\n            return message;\n        }\n```\n\n**FileSave**\n```csharp\n        public async Task<MessageEntity> FileSave()\n        {\n            var files = Request.Form.Files;\n            long size = files.Sum(f => f.Length);\n            string fileName = Request.Form[\"filename\"];\n\n            int fileIndex = 0;\n            int.TryParse(Request.Form[\"fileindex\"], out fileIndex);\n            LogUtil.Debug($\"FileSave开始执行获取数据：{fileIndex}_{size}\");\n            MessageEntity message = new MessageEntity();\n            if (size <= 0 || string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件上传失败\";\n                return message;\n            }\n\n            if (!CacheUtil.Exists(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"请重新请求上传文件\";\n                return message;\n            }\n\n            long fileSize = 0;\n            string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n            string saveFileName = $\"{fileName}_{fileIndex}\";\n            string dirPath = Path.Combine(filePath, saveFileName);\n            if (!Directory.Exists(filePath))\n            {\n                Directory.CreateDirectory(filePath);\n            }\n\n            foreach (var file in files)\n            {\n                //如果有文件\n                if (file.Length > 0)\n                {\n                    fileSize = 0;\n                    fileSize = file.Length;\n\n                    using (var stream = new FileStream(dirPath, FileMode.OpenOrCreate))\n                    {\n                        await file.CopyToAsync(stream);\n                    }\n                }\n            }\n\n            message.Code = 0;\n            message.Msg = \"\";\n            return message;\n        }\n```\n\n**FileMerge**\n```csharp\n\t\tpublic async Task<MessageEntity> FileMerge([FromBody]Dictionary<string, object> fileInfo)\n        {\n            MessageEntity message = new MessageEntity();\n            string fileName = string.Empty;\n            if (fileInfo.ContainsKey(\"name\"))\n            {\n                fileName = fileInfo[\"name\"].ToString();\n            }\n            if (string.IsNullOrEmpty(fileName))\n            {\n                message.Code = -1;\n                message.Msg = \"文件名不能为空\";\n                return message;\n            }\n\n            //最终上传完成后，请求合并返回合并消息\n            try\n            {\n                RequestFileUploadEntity requestFile = CacheUtil.Get<RequestFileUploadEntity>(fileName);\n                if (requestFile == null)\n                {\n                    message.Code = -1;\n                    message.Msg = \"合并失败\";\n                    return message;\n                }\n                string filePath = $\".{AprilConfig.FilePath}{DateTime.Now.ToString(\"yyyy-MM-dd\")}/{fileName}\";\n                string fileExt = requestFile.fileext;\n                string fileMd5 = requestFile.filedata;\n                int fileCount = requestFile.count;\n                long fileSize = requestFile.size;\n\n                LogUtil.Debug($\"获取文件路径：{filePath}\");\n                LogUtil.Debug($\"获取文件类型：{fileExt}\");\n\n                string savePath = filePath.Replace(fileName, \"\");\n                string saveFileName = $\"{fileName}{fileExt}\";\n                var files = Directory.GetFiles(filePath);\n                string fileFinalName = Path.Combine(savePath, saveFileName);\n                LogUtil.Debug($\"获取文件最终路径：{fileFinalName}\");\n                FileStream fs = new FileStream(fileFinalName, FileMode.Create);\n                LogUtil.Debug($\"目录文件下文件总数：{files.Length}\");\n\n                LogUtil.Debug($\"目录文件排序前：{string.Join(\",\", files.ToArray())}\");\n                LogUtil.Debug($\"目录文件排序后：{string.Join(\",\", files.OrderBy(x => x.Length).ThenBy(x => x))}\");\n                byte[] finalBytes = new byte[fileSize];\n                foreach (var part in files.OrderBy(x => x.Length).ThenBy(x => x))\n                {\n                    var bytes = System.IO.File.ReadAllBytes(part);\n\n                    await fs.WriteAsync(bytes, 0, bytes.Length);\n                    bytes = null;\n                    System.IO.File.Delete(part);//删除分块\n                }\n                fs.Close();\n                //这个地方会引发文件被占用异常\n                fs = new FileStream(fileFinalName, FileMode.Open);\n                string strMd5 = GetCryptoString(fs);\n                LogUtil.Debug($\"文件数据MD5：{strMd5}\");\n                LogUtil.Debug($\"文件上传数据：{JsonConvert.SerializeObject(requestFile)}\");\n                fs.Close();\n                Directory.Delete(filePath);\n                //如果MD5与原MD5不匹配，提示重新上传\n                if (strMd5 != requestFile.filedata)\n                {\n                    LogUtil.Debug($\"上传文件md5：{requestFile.filedata},服务器保存文件md5：{strMd5}\");\n                    message.Code = -1;\n                    message.Msg = \"MD5值不匹配\";\n                    return message;\n                }\n\n                CacheUtil.Remove(fileInfo[\"name\"].ToString());\n                message.Code = 0;\n                message.Msg = \"\";\n            }\n            catch (Exception ex)\n            {\n                LogUtil.Error($\"合并文件失败，文件名称：{fileName}，错误信息：{ex.Message}\");\n                message.Code = -1;\n                message.Msg = \"合并文件失败,请重新上传\";\n            }\n            return message;\n        }\n```\n\n这里说明下，在Merge的时候，主要校验md5值，用到了一个方法，我这里没有放到Util（其实是因为懒），代码如下：\n```csharp\n\t\t/// <summary>\n        /// 文件流加密\n        /// </summary>\n        /// <param name=\"fileStream\"></param>\n        /// <returns></returns>\n        private string GetCryptoString(Stream fileStream)\n        {\n            MD5 md5 = new MD5CryptoServiceProvider();\n            byte[] cryptBytes = md5.ComputeHash(fileStream);\n            return GetCryptoString(cryptBytes);\n        }\n\n        private string GetCryptoString(byte[] cryptBytes)\n        {\n            //加密的二进制转为string类型返回\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < cryptBytes.Length; i++)\n            {\n                sb.Append(cryptBytes[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n```\n\n### 测试\n方法写好了之后，我们需不需要测试呢，那不是废话么，自己的代码不过一遍等着让测试人员搞你呢。\n\n> 再说个编码习惯，就是自己的代码自己最起码常规的过一遍，也不说跟大厂一样什么KPI啊啥的影响，自己的东西最起码拿出手让人一看知道用心了就行，不说什么测试全覆盖，就是1+1=2这种基本的正常就OK。\n\n程序运行之后，我这里写了个简单的测试界面，运行之后发现提示OPTIONS，果断跨域错误，还记得我们之前提到的跨域问题，这里给出解决方法。\n![测试](net-core-fileuploader-and-cors/1.png)\n### 跨域\n跨域，就是我在这个区域，想跟另一个区域联系的时候，我们会碰到墙，这堵墙的目的就是，禁止不同区域的人私下交流沟通，但是现在我们就是不要这堵墙或者说要开几个门的话怎么做呢，net core有专门设置的地方，我们回到Startup这里。\n\n我们来看新增的代码：\n```csharp\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n        \t//…之前的代码忽略\n        \t\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowAll\", p =>\n                {\n                    p.AllowAnyOrigin()\n                    .AllowAnyMethod()\n                    .AllowAnyHeader()\n                    .AllowCredentials();\n                });\n            });\n            \n            services.AddAspectCoreContainer();\n            return services.BuildAspectInjectorProvider();\n\n        }\n```\n\n**AddCors**来添加一个跨域处理方式，**AddPolicy**就是加个巡逻官，看看符合规则的放进来，不符合的直接赶出去。\n\n|方法| 介绍 |\n|--|--|\n| AllowAnyOrigin | 允许所有的域名请求 |\n| AllowAnyMethod | 允许所有的请求方式GET/POST/PUT/DELETE |\n| AllowAnyHeader | 允许所有的头部参数 |\n| AllowCredentials | 允许携带Cookie |\n\n这里我使用的是允许所有，可以根据自身业务需要来调整，比如只允许部分域名访问，部分请求方式，部分Header：\n```csharp\n\t\t\t//只是示例，具体根据自身需要\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowSome\", p =>\n                 {\n                     p.WithOrigins(\"https://www.baidu.com\")\n                     .WithMethods(\"GET\", \"POST\")\n                     .WithHeaders(HeaderNames.ContentType, \"x-custom-header\");\n                 });\n            });\n```\n\n写好之后我们在**Configure**中声明注册使用哪个巡逻官。\n```csharp\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n        \t//…之前的\n            app.UseCors(\"AllowAll\");  \n            \n            app.UseHttpsRedirection();\n            app.UseMvc();      \n        }\n```\n\n好了，设置好跨域之后我们再来执行下上传操作。\n![测试](net-core-fileuploader-and-cors/2.png)\n我们看到这个提示之后，是不是能想起来什么，我们之前做过中间层不知道还记得不，忘了的朋友可以再看下[net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1](/2019/07/30/aop-and-test-part-1/)。\n在appsettings.json添加上接口白名单。\n```json\n  \"AllowUrl\": \"/api/Values,/api/File/RequestUpload,/api/File/Upload,/api/File/Merge\"\n```\n设置好之后，我们继续上传，这次总算是可以了（文件后缀这个忽略，测试使用，js就是做了个简单的substring）。\n![测试](net-core-fileuploader-and-cors/3.png)\n我们来查看上传文件记录的日志信息。\n![测试](net-core-fileuploader-and-cors/4.png)\n再来我们看下文件存储的位置，这个位置我们在appsettings里面已经设置过，可以根据自己业务需要调整。\n![测试](net-core-fileuploader-and-cors/5.png)\n打开文件看下是否有损坏，压缩包很容易看出来是否正常，只要能打开基本上（当然可能会有问题）没问题。\n![测试](net-core-fileuploader-and-cors/6.png)\n解压出来如果正常那肯定就是没问题了吧（压缩这个玩意儿真是牛逼，节省了多少的存储空间，虽说硬盘白菜价）。\n![测试](net-core-fileuploader-and-cors/7.png)\n### 小结\n在整理文件上传这篇刚好捎带着把跨域也简单了过了一遍，下来需要再折腾的东西就是**大文件的分片下载**，大致的思路与文件上传一致，毕竟都是一个大蛋糕，切成好几块，你一块，剩下的都是我的。\n\n\n","slug":"net-core-fileuploader-and-cors","published":1,"updated":"2019-09-30T05:46:17.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m4o004b9sv7sq99wq80","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前整理完一套简单的后台基础工程后，因为业务需要鼓捣了文件上传跟下载，整理完后就迫不及待的想分享出来，希望有用到文件相关操作的朋友可以得到些帮助。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>我们依然用我们的基础工程，之前也提到过后续如果有测试功能之类的东西，会一直不断的更新这套代码（如果搞炸了之后那就…），首先我们需要理一下文件分片上传的思路：</p>\n<ul>\n<li><strong>后端</strong></li>\n</ul>\n<ol>\n<li>接收前端文件上传请求并处理回调</li>\n<li>根据前端传递的钥匙判断，允许后开始接收文件流并保存到临时文件夹</li>\n<li>前端最终上传完成后给予后端合并请求（也称作上传完成确认），后端合并文件后判断最终文件是否正确给予回调。</li>\n</ol>\n<ul>\n<li><strong>前端</strong></li>\n</ul>\n<ol>\n<li>读取文件相关信息（名称，扩展类型，大小等基本信息）</li>\n<li>根据需要做片段划分以及文件的md5值（md5主要用于最终确认文件是否缺损）</li>\n<li>请求后端获取钥匙</li>\n<li>拿到钥匙后，我们根据划分的片段去循环上传文件，并根据每次回调判断是否上传成功，如失败则重新上传</li>\n<li>最终循环完成后，给予后端合并请求（上传完成确认）</li>\n</ol>\n<p>ps：这里的钥匙就是个文件名，当然你可以来个token啊什么的根据自己业务需要。</p>\n<blockquote>\n<p>这里还是想分享下敲代码的经验，在我们动手之前，最好把能考虑到的东西全都想好，思路理清也就是打好提纲后，敲代码的效率会高并且错误率也会低，行云流水不是天马行空，而是你的大脑中已经有了山水鸟兽。</p>\n</blockquote>\n<p>OK，流程清楚之后，我们开始动手敲代码吧。</p>\n<p>首先，我们新建一个控制器<strong>FileController</strong>，当然名字可以随意取，根据我们上述后端的思路，新建三个接口<strong>RequestUploadFile</strong>，<strong>FileSave</strong>，<strong>FileMerge</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 请求上传文件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"requestFile\"&gt;</span>请求上传参数实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"RequestUpload\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestUploadFile</span>(<span class=\"params\">[FromBody]RequestFileUploadEntity requestFile</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件上传</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Upload\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileSave</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件合并</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>文件参数信息[name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Merge\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileMerge</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果直接复制的朋友，这里肯定是满眼红彤彤，这里主要用了两个类，一个请求实体<strong>RequestFileUploadEntity</strong>，一个回调实体<strong>MessageEntity</strong>，这两个我们到Util工程创建（当然也可以放到Entity工程，这里为什么放到Util呢，因为我觉得放到这里公用比较好，毕竟还是有复用的价值的）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 文件请求上传实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RequestFileUploadEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> _size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _filedata = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _fileext = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _filename = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件大小</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> size &#123; <span class=\"keyword\">get</span> =&gt; _size; <span class=\"keyword\">set</span> =&gt; _size = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 片段数量</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count &#123; <span class=\"keyword\">get</span> =&gt; _count; <span class=\"keyword\">set</span> =&gt; _count = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件md5</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> filedata &#123; <span class=\"keyword\">get</span> =&gt; _filedata; <span class=\"keyword\">set</span> =&gt; _filedata = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> fileext &#123; <span class=\"keyword\">get</span> =&gt; _fileext; <span class=\"keyword\">set</span> =&gt; _fileext = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> filename &#123; <span class=\"keyword\">get</span> =&gt; _filename; <span class=\"keyword\">set</span> =&gt; _filename = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 返回实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Msg = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">object</span> _Data = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 状态标识</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Code &#123; <span class=\"keyword\">get</span> =&gt; _Code; <span class=\"keyword\">set</span> =&gt; _Code = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 返回消息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span> =&gt; _Msg; <span class=\"keyword\">set</span> =&gt; _Msg = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 返回数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> Data &#123; <span class=\"keyword\">get</span> =&gt; _Data; <span class=\"keyword\">set</span> =&gt; _Data = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建完成写好之后我们在红的地方Alt+Enter，哪里爆红点哪里（so easy），好了，不扯犊子了，每个接口的方法如下。</p>\n<p><strong>RequestUploadFile</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestUploadFile</span>(<span class=\"params\">[FromBody]RequestFileUploadEntity requestFile</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LogUtil.Debug(<span class=\"string\">$\"RequestUploadFile 接收参数：<span class=\"subst\">&#123;JsonConvert.SerializeObject(requestFile)&#125;</span>\"</span>);</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestFile.size &lt;= <span class=\"number\">0</span> || requestFile.count &lt;= <span class=\"number\">0</span> || <span class=\"keyword\">string</span>.IsNullOrEmpty(requestFile.filedata))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"参数有误\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里需要记录文件相关信息，并返回文件guid名，后续请求带上此参数</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span> guidName = Guid.NewGuid().ToString(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//前期单台服务器可以记录Cache，多台后需考虑redis或数据库</span></span><br><span class=\"line\">        CacheUtil.Set(guidName, requestFile, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        message.Data = <span class=\"keyword\">new</span> &#123; filename = guidName &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileSave</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileSave</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files = Request.Form.Files;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> size = files.Sum(f =&gt; f.Length);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = Request.Form[<span class=\"string\">\"filename\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fileIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>.TryParse(Request.Form[<span class=\"string\">\"fileindex\"</span>], <span class=\"keyword\">out</span> fileIndex);</span><br><span class=\"line\">    LogUtil.Debug(<span class=\"string\">$\"FileSave开始执行获取数据：<span class=\"subst\">&#123;fileIndex&#125;</span>_<span class=\"subst\">&#123;size&#125;</span>\"</span>);</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">0</span> || <span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"文件上传失败\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtil.Exists(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"请重新请求上传文件\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> fileSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> saveFileName = <span class=\"string\">$\"<span class=\"subst\">&#123;fileName&#125;</span>_<span class=\"subst\">&#123;fileIndex&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> dirPath = Path.Combine(filePath, saveFileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Directory.Exists(filePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Directory.CreateDirectory(filePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> file <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果有文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fileSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">            fileSize = file.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> FileStream(dirPath, FileMode.OpenOrCreate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> file.CopyToAsync(stream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileMerge</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileMerge</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">          <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"文件名不能为空\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//最终上传完成后，请求合并返回合并消息</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              RequestFileUploadEntity requestFile = CacheUtil.Get&lt;RequestFileUploadEntity&gt;(fileName);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (requestFile == <span class=\"literal\">null</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                  message.Msg = <span class=\"string\">\"合并失败\"</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileExt = requestFile.fileext;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileMd5 = requestFile.filedata;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> fileCount = requestFile.count;</span><br><span class=\"line\">              <span class=\"keyword\">long</span> fileSize = requestFile.size;</span><br><span class=\"line\"></span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件路径：<span class=\"subst\">&#123;filePath&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件类型：<span class=\"subst\">&#123;fileExt&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">string</span> savePath = filePath.Replace(fileName, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> saveFileName = <span class=\"string\">$\"<span class=\"subst\">&#123;fileName&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> files = Directory.GetFiles(filePath);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileFinalName = Path.Combine(savePath, saveFileName);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件最终路径：<span class=\"subst\">&#123;fileFinalName&#125;</span>\"</span>);</span><br><span class=\"line\">              FileStream fs = <span class=\"keyword\">new</span> FileStream(fileFinalName, FileMode.Create);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件下文件总数：<span class=\"subst\">&#123;files.Length&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件排序前：<span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">\",\"</span>, files.ToArray())&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件排序后：<span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">\",\"</span>, files.OrderBy(x =&gt; x.Length).ThenBy(x =&gt; x))&#125;</span>\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">byte</span>[] finalBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[fileSize];</span><br><span class=\"line\">              <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> part <span class=\"keyword\">in</span> files.OrderBy(x =&gt; x.Length).ThenBy(x =&gt; x))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> bytes = System.IO.File.ReadAllBytes(part);</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">await</span> fs.WriteAsync(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">                  bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                  System.IO.File.Delete(part);<span class=\"comment\">//删除分块</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              fs.Close();</span><br><span class=\"line\">              <span class=\"comment\">//这个地方会引发文件被占用异常</span></span><br><span class=\"line\">              fs = <span class=\"keyword\">new</span> FileStream(fileFinalName, FileMode.Open);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> strMd5 = GetCryptoString(fs);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"文件数据MD5：<span class=\"subst\">&#123;strMd5&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"文件上传数据：<span class=\"subst\">&#123;JsonConvert.SerializeObject(requestFile)&#125;</span>\"</span>);</span><br><span class=\"line\">              fs.Close();</span><br><span class=\"line\">              Directory.Delete(filePath);</span><br><span class=\"line\">              <span class=\"comment\">//如果MD5与原MD5不匹配，提示重新上传</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (strMd5 != requestFile.filedata)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  LogUtil.Debug(<span class=\"string\">$\"上传文件md5：<span class=\"subst\">&#123;requestFile.filedata&#125;</span>,服务器保存文件md5：<span class=\"subst\">&#123;strMd5&#125;</span>\"</span>);</span><br><span class=\"line\">                  message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                  message.Msg = <span class=\"string\">\"MD5值不匹配\"</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              CacheUtil.Remove(fileInfo[<span class=\"string\">\"name\"</span>].ToString());</span><br><span class=\"line\">              message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              LogUtil.Error(<span class=\"string\">$\"合并文件失败，文件名称：<span class=\"subst\">&#123;fileName&#125;</span>，错误信息：<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">              message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"合并文件失败,请重新上传\"</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里说明下，在Merge的时候，主要校验md5值，用到了一个方法，我这里没有放到Util（其实是因为懒），代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 文件流加密</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileStream\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCryptoString</span>(<span class=\"params\">Stream fileStream</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          MD5 md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] cryptBytes = md5.ComputeHash(fileStream);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> GetCryptoString(cryptBytes);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCryptoString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] cryptBytes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"comment\">//加密的二进制转为string类型返回</span></span><br><span class=\"line\">          StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cryptBytes.Length; i++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              sb.Append(cryptBytes[i].ToString(<span class=\"string\">\"x2\"</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sb.ToString();</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>方法写好了之后，我们需不需要测试呢，那不是废话么，自己的代码不过一遍等着让测试人员搞你呢。</p>\n<blockquote>\n<p>再说个编码习惯，就是自己的代码自己最起码常规的过一遍，也不说跟大厂一样什么KPI啊啥的影响，自己的东西最起码拿出手让人一看知道用心了就行，不说什么测试全覆盖，就是1+1=2这种基本的正常就OK。</p>\n</blockquote>\n<p>程序运行之后，我这里写了个简单的测试界面，运行之后发现提示OPTIONS，果断跨域错误，还记得我们之前提到的跨域问题，这里给出解决方法。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/1.png\" alt=\"测试\"></p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>跨域，就是我在这个区域，想跟另一个区域联系的时候，我们会碰到墙，这堵墙的目的就是，禁止不同区域的人私下交流沟通，但是现在我们就是不要这堵墙或者说要开几个门的话怎么做呢，net core有专门设置的地方，我们回到Startup这里。</p>\n<p>我们来看新增的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…之前的代码忽略</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    services.AddCors(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.AddPolicy(<span class=\"string\">\"AllowAll\"</span>, p =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p.AllowAnyOrigin()</span><br><span class=\"line\">            .AllowAnyMethod()</span><br><span class=\"line\">            .AllowAnyHeader()</span><br><span class=\"line\">            .AllowCredentials();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    services.AddAspectCoreContainer();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> services.BuildAspectInjectorProvider();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>AddCors</strong>来添加一个跨域处理方式，<strong>AddPolicy</strong>就是加个巡逻官，看看符合规则的放进来，不符合的直接赶出去。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AllowAnyOrigin</td>\n<td>允许所有的域名请求</td>\n</tr>\n<tr>\n<td>AllowAnyMethod</td>\n<td>允许所有的请求方式GET/POST/PUT/DELETE</td>\n</tr>\n<tr>\n<td>AllowAnyHeader</td>\n<td>允许所有的头部参数</td>\n</tr>\n<tr>\n<td>AllowCredentials</td>\n<td>允许携带Cookie</td>\n</tr>\n</tbody></table>\n<p>这里我使用的是允许所有，可以根据自身业务需要来调整，比如只允许部分域名访问，部分请求方式，部分Header：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只是示例，具体根据自身需要</span></span><br><span class=\"line\">         services.AddCors(options =&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             options.AddPolicy(<span class=\"string\">\"AllowSome\"</span>, p =&gt;</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  p.WithOrigins(<span class=\"string\">\"https://www.baidu.com\"</span>)</span><br><span class=\"line\">                  .WithMethods(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"POST\"</span>)</span><br><span class=\"line\">                  .WithHeaders(HeaderNames.ContentType, <span class=\"string\">\"x-custom-header\"</span>);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>写好之后我们在<strong>Configure</strong>中声明注册使用哪个巡逻官。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…之前的</span></span><br><span class=\"line\">    app.UseCors(<span class=\"string\">\"AllowAll\"</span>);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，设置好跨域之后我们再来执行下上传操作。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/2.png\" alt=\"测试\"><br>我们看到这个提示之后，是不是能想起来什么，我们之前做过中间层不知道还记得不，忘了的朋友可以再看下<a href=\"/2019/07/30/aop-and-test-part-1/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a>。<br>在appsettings.json添加上接口白名单。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"AllowUrl\": \"/api/Values,/api/File/RequestUpload,/api/File/Upload,/api/File/Merge\"</span><br></pre></td></tr></table></figure>\n\n<p>设置好之后，我们继续上传，这次总算是可以了（文件后缀这个忽略，测试使用，js就是做了个简单的substring）。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/3.png\" alt=\"测试\"><br>我们来查看上传文件记录的日志信息。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/4.png\" alt=\"测试\"><br>再来我们看下文件存储的位置，这个位置我们在appsettings里面已经设置过，可以根据自己业务需要调整。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/5.png\" alt=\"测试\"><br>打开文件看下是否有损坏，压缩包很容易看出来是否正常，只要能打开基本上（当然可能会有问题）没问题。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/6.png\" alt=\"测试\"><br>解压出来如果正常那肯定就是没问题了吧（压缩这个玩意儿真是牛逼，节省了多少的存储空间，虽说硬盘白菜价）。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/7.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在整理文件上传这篇刚好捎带着把跨域也简单了过了一遍，下来需要再折腾的东西就是<strong>大文件的分片下载</strong>，大致的思路与文件上传一致，毕竟都是一个大蛋糕，切成好几块，你一块，剩下的都是我的。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在之前整理完一套简单的后台基础工程后，因为业务需要鼓捣了文件上传跟下载，整理完后就迫不及待的想分享出来，希望有用到文件相关操作的朋友可以得到些帮助。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>我们依然用我们的基础工程，之前也提到过后续如果有测试功能之类的东西，会一直不断的更新这套代码（如果搞炸了之后那就…），首先我们需要理一下文件分片上传的思路：</p>\n<ul>\n<li><strong>后端</strong></li>\n</ul>\n<ol>\n<li>接收前端文件上传请求并处理回调</li>\n<li>根据前端传递的钥匙判断，允许后开始接收文件流并保存到临时文件夹</li>\n<li>前端最终上传完成后给予后端合并请求（也称作上传完成确认），后端合并文件后判断最终文件是否正确给予回调。</li>\n</ol>\n<ul>\n<li><strong>前端</strong></li>\n</ul>\n<ol>\n<li>读取文件相关信息（名称，扩展类型，大小等基本信息）</li>\n<li>根据需要做片段划分以及文件的md5值（md5主要用于最终确认文件是否缺损）</li>\n<li>请求后端获取钥匙</li>\n<li>拿到钥匙后，我们根据划分的片段去循环上传文件，并根据每次回调判断是否上传成功，如失败则重新上传</li>\n<li>最终循环完成后，给予后端合并请求（上传完成确认）</li>\n</ol>\n<p>ps：这里的钥匙就是个文件名，当然你可以来个token啊什么的根据自己业务需要。</p>\n<blockquote>\n<p>这里还是想分享下敲代码的经验，在我们动手之前，最好把能考虑到的东西全都想好，思路理清也就是打好提纲后，敲代码的效率会高并且错误率也会低，行云流水不是天马行空，而是你的大脑中已经有了山水鸟兽。</p>\n</blockquote>\n<p>OK，流程清楚之后，我们开始动手敲代码吧。</p>\n<p>首先，我们新建一个控制器<strong>FileController</strong>，当然名字可以随意取，根据我们上述后端的思路，新建三个接口<strong>RequestUploadFile</strong>，<strong>FileSave</strong>，<strong>FileMerge</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"meta-string\">\"api/[controller]\"</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FileController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 请求上传文件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"requestFile\"&gt;</span>请求上传参数实体<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"RequestUpload\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestUploadFile</span>(<span class=\"params\">[FromBody]RequestFileUploadEntity requestFile</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件上传</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Upload\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileSave</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件合并</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileInfo\"&gt;</span>文件参数信息[name]<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost, Route(<span class=\"meta-string\">\"Merge\"</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileMerge</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果直接复制的朋友，这里肯定是满眼红彤彤，这里主要用了两个类，一个请求实体<strong>RequestFileUploadEntity</strong>，一个回调实体<strong>MessageEntity</strong>，这两个我们到Util工程创建（当然也可以放到Entity工程，这里为什么放到Util呢，因为我觉得放到这里公用比较好，毕竟还是有复用的价值的）。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 文件请求上传实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RequestFileUploadEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> _size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _filedata = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _fileext = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _filename = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件大小</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> size &#123; <span class=\"keyword\">get</span> =&gt; _size; <span class=\"keyword\">set</span> =&gt; _size = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 片段数量</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count &#123; <span class=\"keyword\">get</span> =&gt; _count; <span class=\"keyword\">set</span> =&gt; _count = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件md5</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> filedata &#123; <span class=\"keyword\">get</span> =&gt; _filedata; <span class=\"keyword\">set</span> =&gt; _filedata = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件类型</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> fileext &#123; <span class=\"keyword\">get</span> =&gt; _fileext; <span class=\"keyword\">set</span> =&gt; _fileext = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 文件名</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> filename &#123; <span class=\"keyword\">get</span> =&gt; _filename; <span class=\"keyword\">set</span> =&gt; _filename = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 返回实体</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Msg = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">object</span> _Data = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 状态标识</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Code &#123; <span class=\"keyword\">get</span> =&gt; _Code; <span class=\"keyword\">set</span> =&gt; _Code = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 返回消息</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Msg &#123; <span class=\"keyword\">get</span> =&gt; _Msg; <span class=\"keyword\">set</span> =&gt; _Msg = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 返回数据</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> Data &#123; <span class=\"keyword\">get</span> =&gt; _Data; <span class=\"keyword\">set</span> =&gt; _Data = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建完成写好之后我们在红的地方Alt+Enter，哪里爆红点哪里（so easy），好了，不扯犊子了，每个接口的方法如下。</p>\n<p><strong>RequestUploadFile</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageEntity <span class=\"title\">RequestUploadFile</span>(<span class=\"params\">[FromBody]RequestFileUploadEntity requestFile</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    LogUtil.Debug(<span class=\"string\">$\"RequestUploadFile 接收参数：<span class=\"subst\">&#123;JsonConvert.SerializeObject(requestFile)&#125;</span>\"</span>);</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestFile.size &lt;= <span class=\"number\">0</span> || requestFile.count &lt;= <span class=\"number\">0</span> || <span class=\"keyword\">string</span>.IsNullOrEmpty(requestFile.filedata))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"参数有误\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里需要记录文件相关信息，并返回文件guid名，后续请求带上此参数</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span> guidName = Guid.NewGuid().ToString(<span class=\"string\">\"N\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//前期单台服务器可以记录Cache，多台后需考虑redis或数据库</span></span><br><span class=\"line\">        CacheUtil.Set(guidName, requestFile, <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        message.Data = <span class=\"keyword\">new</span> &#123; filename = guidName &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileSave</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileSave</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files = Request.Form.Files;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> size = files.Sum(f =&gt; f.Length);</span><br><span class=\"line\">    <span class=\"keyword\">string</span> fileName = Request.Form[<span class=\"string\">\"filename\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fileIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>.TryParse(Request.Form[<span class=\"string\">\"fileindex\"</span>], <span class=\"keyword\">out</span> fileIndex);</span><br><span class=\"line\">    LogUtil.Debug(<span class=\"string\">$\"FileSave开始执行获取数据：<span class=\"subst\">&#123;fileIndex&#125;</span>_<span class=\"subst\">&#123;size&#125;</span>\"</span>);</span><br><span class=\"line\">    MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt;= <span class=\"number\">0</span> || <span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"文件上传失败\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CacheUtil.Exists(fileName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        message.Msg = <span class=\"string\">\"请重新请求上传文件\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> fileSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> saveFileName = <span class=\"string\">$\"<span class=\"subst\">&#123;fileName&#125;</span>_<span class=\"subst\">&#123;fileIndex&#125;</span>\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> dirPath = Path.Combine(filePath, saveFileName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Directory.Exists(filePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Directory.CreateDirectory(filePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> file <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果有文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fileSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">            fileSize = file.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> stream = <span class=\"keyword\">new</span> FileStream(dirPath, FileMode.OpenOrCreate))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> file.CopyToAsync(stream);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">    message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>FileMerge</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;MessageEntity&gt; <span class=\"title\">FileMerge</span>(<span class=\"params\">[FromBody]Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; fileInfo</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          MessageEntity message = <span class=\"keyword\">new</span> MessageEntity();</span><br><span class=\"line\">          <span class=\"keyword\">string</span> fileName = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileInfo.ContainsKey(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              fileName = fileInfo[<span class=\"string\">\"name\"</span>].ToString();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(fileName))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"文件名不能为空\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">//最终上传完成后，请求合并返回合并消息</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              RequestFileUploadEntity requestFile = CacheUtil.Get&lt;RequestFileUploadEntity&gt;(fileName);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (requestFile == <span class=\"literal\">null</span>)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                  message.Msg = <span class=\"string\">\"合并失败\"</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> filePath = <span class=\"string\">$\".<span class=\"subst\">&#123;AprilConfig.FilePath&#125;</span><span class=\"subst\">&#123;DateTime.Now.ToString(<span class=\"string\">\"yyyy-MM-dd\"</span>)&#125;</span>/<span class=\"subst\">&#123;fileName&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileExt = requestFile.fileext;</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileMd5 = requestFile.filedata;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> fileCount = requestFile.count;</span><br><span class=\"line\">              <span class=\"keyword\">long</span> fileSize = requestFile.size;</span><br><span class=\"line\"></span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件路径：<span class=\"subst\">&#123;filePath&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件类型：<span class=\"subst\">&#123;fileExt&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">string</span> savePath = filePath.Replace(fileName, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> saveFileName = <span class=\"string\">$\"<span class=\"subst\">&#123;fileName&#125;</span><span class=\"subst\">&#123;fileExt&#125;</span>\"</span>;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> files = Directory.GetFiles(filePath);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> fileFinalName = Path.Combine(savePath, saveFileName);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"获取文件最终路径：<span class=\"subst\">&#123;fileFinalName&#125;</span>\"</span>);</span><br><span class=\"line\">              FileStream fs = <span class=\"keyword\">new</span> FileStream(fileFinalName, FileMode.Create);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件下文件总数：<span class=\"subst\">&#123;files.Length&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件排序前：<span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">\",\"</span>, files.ToArray())&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"目录文件排序后：<span class=\"subst\">&#123;<span class=\"keyword\">string</span>.Join(<span class=\"string\">\",\"</span>, files.OrderBy(x =&gt; x.Length).ThenBy(x =&gt; x))&#125;</span>\"</span>);</span><br><span class=\"line\">              <span class=\"keyword\">byte</span>[] finalBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[fileSize];</span><br><span class=\"line\">              <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> part <span class=\"keyword\">in</span> files.OrderBy(x =&gt; x.Length).ThenBy(x =&gt; x))</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">var</span> bytes = System.IO.File.ReadAllBytes(part);</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">await</span> fs.WriteAsync(bytes, <span class=\"number\">0</span>, bytes.Length);</span><br><span class=\"line\">                  bytes = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                  System.IO.File.Delete(part);<span class=\"comment\">//删除分块</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              fs.Close();</span><br><span class=\"line\">              <span class=\"comment\">//这个地方会引发文件被占用异常</span></span><br><span class=\"line\">              fs = <span class=\"keyword\">new</span> FileStream(fileFinalName, FileMode.Open);</span><br><span class=\"line\">              <span class=\"keyword\">string</span> strMd5 = GetCryptoString(fs);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"文件数据MD5：<span class=\"subst\">&#123;strMd5&#125;</span>\"</span>);</span><br><span class=\"line\">              LogUtil.Debug(<span class=\"string\">$\"文件上传数据：<span class=\"subst\">&#123;JsonConvert.SerializeObject(requestFile)&#125;</span>\"</span>);</span><br><span class=\"line\">              fs.Close();</span><br><span class=\"line\">              Directory.Delete(filePath);</span><br><span class=\"line\">              <span class=\"comment\">//如果MD5与原MD5不匹配，提示重新上传</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (strMd5 != requestFile.filedata)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  LogUtil.Debug(<span class=\"string\">$\"上传文件md5：<span class=\"subst\">&#123;requestFile.filedata&#125;</span>,服务器保存文件md5：<span class=\"subst\">&#123;strMd5&#125;</span>\"</span>);</span><br><span class=\"line\">                  message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">                  message.Msg = <span class=\"string\">\"MD5值不匹配\"</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              CacheUtil.Remove(fileInfo[<span class=\"string\">\"name\"</span>].ToString());</span><br><span class=\"line\">              message.Code = <span class=\"number\">0</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              LogUtil.Error(<span class=\"string\">$\"合并文件失败，文件名称：<span class=\"subst\">&#123;fileName&#125;</span>，错误信息：<span class=\"subst\">&#123;ex.Message&#125;</span>\"</span>);</span><br><span class=\"line\">              message.Code = <span class=\"number\">-1</span>;</span><br><span class=\"line\">              message.Msg = <span class=\"string\">\"合并文件失败,请重新上传\"</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里说明下，在Merge的时候，主要校验md5值，用到了一个方法，我这里没有放到Util（其实是因为懒），代码如下：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> 文件流加密</span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"fileStream\"&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">      <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCryptoString</span>(<span class=\"params\">Stream fileStream</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          MD5 md5 = <span class=\"keyword\">new</span> MD5CryptoServiceProvider();</span><br><span class=\"line\">          <span class=\"keyword\">byte</span>[] cryptBytes = md5.ComputeHash(fileStream);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> GetCryptoString(cryptBytes);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> <span class=\"title\">GetCryptoString</span>(<span class=\"params\"><span class=\"keyword\">byte</span>[] cryptBytes</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>      &#123;</span><br><span class=\"line\">          <span class=\"comment\">//加密的二进制转为string类型返回</span></span><br><span class=\"line\">          StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cryptBytes.Length; i++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              sb.Append(cryptBytes[i].ToString(<span class=\"string\">\"x2\"</span>));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> sb.ToString();</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>方法写好了之后，我们需不需要测试呢，那不是废话么，自己的代码不过一遍等着让测试人员搞你呢。</p>\n<blockquote>\n<p>再说个编码习惯，就是自己的代码自己最起码常规的过一遍，也不说跟大厂一样什么KPI啊啥的影响，自己的东西最起码拿出手让人一看知道用心了就行，不说什么测试全覆盖，就是1+1=2这种基本的正常就OK。</p>\n</blockquote>\n<p>程序运行之后，我这里写了个简单的测试界面，运行之后发现提示OPTIONS，果断跨域错误，还记得我们之前提到的跨域问题，这里给出解决方法。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/1.png\" alt=\"测试\"></p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>跨域，就是我在这个区域，想跟另一个区域联系的时候，我们会碰到墙，这堵墙的目的就是，禁止不同区域的人私下交流沟通，但是现在我们就是不要这堵墙或者说要开几个门的话怎么做呢，net core有专门设置的地方，我们回到Startup这里。</p>\n<p>我们来看新增的代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IServiceProvider <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…之前的代码忽略</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    services.AddCors(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.AddPolicy(<span class=\"string\">\"AllowAll\"</span>, p =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p.AllowAnyOrigin()</span><br><span class=\"line\">            .AllowAnyMethod()</span><br><span class=\"line\">            .AllowAnyHeader()</span><br><span class=\"line\">            .AllowCredentials();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    services.AddAspectCoreContainer();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> services.BuildAspectInjectorProvider();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>AddCors</strong>来添加一个跨域处理方式，<strong>AddPolicy</strong>就是加个巡逻官，看看符合规则的放进来，不符合的直接赶出去。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AllowAnyOrigin</td>\n<td>允许所有的域名请求</td>\n</tr>\n<tr>\n<td>AllowAnyMethod</td>\n<td>允许所有的请求方式GET/POST/PUT/DELETE</td>\n</tr>\n<tr>\n<td>AllowAnyHeader</td>\n<td>允许所有的头部参数</td>\n</tr>\n<tr>\n<td>AllowCredentials</td>\n<td>允许携带Cookie</td>\n</tr>\n</tbody></table>\n<p>这里我使用的是允许所有，可以根据自身业务需要来调整，比如只允许部分域名访问，部分请求方式，部分Header：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只是示例，具体根据自身需要</span></span><br><span class=\"line\">         services.AddCors(options =&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             options.AddPolicy(<span class=\"string\">\"AllowSome\"</span>, p =&gt;</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                  p.WithOrigins(<span class=\"string\">\"https://www.baidu.com\"</span>)</span><br><span class=\"line\">                  .WithMethods(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"POST\"</span>)</span><br><span class=\"line\">                  .WithHeaders(HeaderNames.ContentType, <span class=\"string\">\"x-custom-header\"</span>);</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">         &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>写好之后我们在<strong>Configure</strong>中声明注册使用哪个巡逻官。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//…之前的</span></span><br><span class=\"line\">    app.UseCors(<span class=\"string\">\"AllowAll\"</span>);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseMvc();      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，设置好跨域之后我们再来执行下上传操作。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/2.png\" alt=\"测试\"><br>我们看到这个提示之后，是不是能想起来什么，我们之前做过中间层不知道还记得不，忘了的朋友可以再看下<a href=\"/2019/07/30/aop-and-test-part-1/\">net core Webapi基础工程搭建（七）——小试AOP及常规测试_Part 1</a>。<br>在appsettings.json添加上接口白名单。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"AllowUrl\": \"/api/Values,/api/File/RequestUpload,/api/File/Upload,/api/File/Merge\"</span><br></pre></td></tr></table></figure>\n\n<p>设置好之后，我们继续上传，这次总算是可以了（文件后缀这个忽略，测试使用，js就是做了个简单的substring）。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/3.png\" alt=\"测试\"><br>我们来查看上传文件记录的日志信息。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/4.png\" alt=\"测试\"><br>再来我们看下文件存储的位置，这个位置我们在appsettings里面已经设置过，可以根据自己业务需要调整。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/5.png\" alt=\"测试\"><br>打开文件看下是否有损坏，压缩包很容易看出来是否正常，只要能打开基本上（当然可能会有问题）没问题。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/6.png\" alt=\"测试\"><br>解压出来如果正常那肯定就是没问题了吧（压缩这个玩意儿真是牛逼，节省了多少的存储空间，虽说硬盘白菜价）。<br><img src=\"/2019/08/23/net-core-fileuploader-and-cors/7.png\" alt=\"测试\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>在整理文件上传这篇刚好捎带着把跨域也简单了过了一遍，下来需要再折腾的东西就是<strong>大文件的分片下载</strong>，大致的思路与文件上传一致，毕竟都是一个大蛋糕，切成好几块，你一块，剩下的都是我的。</p>\n"},{"title":"net core Webapi基础工程搭建（六）——数据库操作_Part 1","date":"2019-07-18T11:31:41.000Z","_content":"\n### 前言\n后端开发最常打交道的就是数据库了（静态网站靠边），上一篇[net core Webapi基础工程搭建（五）——缓存机制](/2019/07/10/net-core-cache/)，缓存就是为了减少数据库的读操作，不过什么访问都是会耗时的，拿空间（内存）换时间对用户体验来说是惯用手段，后续介绍界面操作的时候再说用户体验。\n\n### SqlSugar\n当然你可以用EF（太重，扩展性相对差，但不可否认基本上涵盖范围够广），也可以用Dapper（这个我之前头一回鼓捣net core的时候用的是Dapper），或者自己基于原生去写数据库的操作，都Ok，但是如果有造好的轮子，对于我们来说用就行了，可以深入理解但对于常规开发来说，CV大法是最好的（新手向），**SqlSugar**的[文档地址](http://www.codeisbug.com/)。\n\n> 之前的工程在最初创建的时候，没有创建完整，因为当时不操作数据层，所以偷个懒，这次一并创建，具体过程不再赘述\n，同**April.Util**工程的创建一致，都是类库项目，新建**April.Service**，**April.Entity**。\n\n好了，我们在Service与Entity项目中通过NuGet包引入**sqlSugarCore**，至于原因前面也说过[net core Webapi基础工程搭建（四）——日志功能log4net](/2019/07/04/net-core-log4net/)。\n\n这里应该不需要再图文介绍引入了，如果不清楚，也可以去上面的链接查看NuGet的引入方法。\n\n引入完成后，我们在Entity项目创建一个类对象，命名为**StudentEntity**吧，只是做个示例。\n\n```csharp\n    public class StudentEntity\n    {\n        private int _ID = -1;\n        private string _Name = string.Empty;\n        private string _Number = string.Empty;\n        private int _Age = 0;\n        private int _Sex = 0;\n        private string _Address = string.Empty;\n    }\n```\n对象属性这块儿，看个人习惯，有些人偏向于直接get，set方法，我习惯于先初始化，选中所有的私有属性，使用宇宙第一IDE的快捷键Ctrl+R+E，点击确定，好了自己去加注释去吧。\n![神器的好处](net-core-sqlsugar-1/1.png)\n这里也说下为什么Entity这个实例对象层也要引入SqlSugar，是因为如果你的表名或者属性名与数据库不一致的时候，还是需要标识出来的，比如下面的代码，具体的用法还是去参考文档吧，我这只是轻描淡写下。\n\n```csharp\n\t[SugarTable(\"test_Student\")]\n    public class StudentEntity\n    {\n        private int _ID = -1;\n        private string _Name = string.Empty;\n        private string _Number = string.Empty;\n        private int _Age = 0;\n        private int _Sex = 0;\n        private string _Address = string.Empty;\n\n        /// <summary>\n        /// 主键\n        /// </summary>\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int ID { get => _ID; set => _ID = value; }\n        /// <summary>\n        /// 姓名\n        /// </summary>\n        public string Name { get => _Name; set => _Name = value; }\n        /// <summary>\n        /// 学号\n        /// </summary>\n        public string Number { get => _Number; set => _Number = value; }\n        /// <summary>\n        /// 年龄\n        /// </summary>\n        public int Age { get => _Age; set => _Age = value; }\n        /// <summary>\n        /// 性别\n        /// </summary>\n        public int Sex { get => _Sex; set => _Sex = value; }\n        /// <summary>\n        /// 家庭住址\n        /// </summary>\n        [SugarColumn(ColumnName = \"test_Address\")]\n        public string Address { get => _Address; set => _Address = value; }\n    }\n```\n\n实体对象我就不多写了，重复的工作是根据你自己的业务所处理的。\n\n### Service层\n这个地方我重点标注下，是因为数据库这块儿的操作还是需要重视的，我们先来新建个**BaseDbContext**用于执行数据库操作的实体。\n```csharp\n\tpublic class BaseDbContext\n    {\n        public SqlSugarClient Db;\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"connStr\">数据库连接串</param>\n        /// <param name=\"sqlType\">数据库类型</param>\n        public BaseDbContext(string connStr, int sqlType = 1)\n        {\n            InitDataBase(connStr, sqlType);\n        }\n\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"serverIp\">服务器IP</param>\n        /// <param name=\"user\">用户名</param>\n        /// <param name=\"pass\">密码</param>\n        /// <param name=\"dataBase\">数据库</param>\n        public BaseDbContext(string serverIp, string user, string pass, string dataBase)\n        {\n            string connStr = $\"server={serverIp};user id={user};password={pass};persistsecurityinfo=True;database={dataBase}\";\n            InitDataBase(connStr);\n        }\n\n        /// <summary>\n        /// 初始化数据库连接\n        /// </summary>\n        /// <param name=\"listConn\">连接字符串</param>\n        private void InitDataBase(string connStr, int sqlType = 1)\n        {\n            Db = new SqlSugarClient(new ConnectionConfig()\n            {\n                ConnectionString = connStr,\n                DbType = (DbType)sqlType,\n                IsAutoCloseConnection = true,\n                //SlaveConnectionConfigs = slaveConnectionConfigs\n            });\n            Db.Ado.CommandTimeOut = 30000;//设置超时时间\n            Db.Aop.OnLogExecuted = (sql, pars) => //SQL执行完事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnLogExecuting = (sql, pars) => //SQL执行前事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnError = (exp) =>//执行SQL 错误事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnExecutingChangeSql = (sql, pars) => //SQL执行前 可以修改SQL\n            {\n                return new KeyValuePair<string, SugarParameter[]>(sql, pars);\n            };\n        }\n        /// <summary>\n        /// 开启事务\n        /// </summary>\n        public void BeginTran()\n        {\n            Db.Ado.BeginTran();\n        }\n        /// <summary>\n        /// 提交事务\n        /// </summary>\n        public void CommitTran()\n        {\n            Db.Ado.CommitTran();\n        }\n        /// <summary>\n        /// 回滚事务\n        /// </summary>\n        public void RollbackTran()\n        {\n            Db.Ado.RollbackTran();\n        }\n    }\n```\n\n构造函数主要用于实例化你的数据库对象（连接串，数据库类型），日志的记录，事务这些也都标注上，后续可以替换直接使用。\n\n### BaseService（基类）\n> 在最初写net core的时候，我用Repository层来实现sql处理，Service用来做逻辑处理，传统的三层架构，但是对于简单的工程来说，个人感觉Bll层的存在不是那么理想，可能是我没彻底理解三层架构吧，这个地方如果有个人想法或好的见解也希望一块交流，互相进步。\n\n在写基类之前，我们在Util层新建一个**SqlSqlFilterEntity**，这步可能算是多此一举，但是为了减少团队其他人的学习成本，我还是写了这个对象，以致于后续的封装，会以此为参数做传递而不公开lambda的写法使用。\n\n```csharp\n    public class SqlFilterEntity\n    {\n        private string _Filter = string.Empty;\n        private Dictionary<string, object> _Value = null;\n        /// <summary>\n        /// 查询条件\n        /// </summary>\n        public string Filter { get => _Filter; set => _Filter = value; }\n        /// <summary>\n        /// 查询参数\n        /// </summary>\n        public Dictionary<string, object> Value { get => _Value; set => _Value = value; }\n    }\n```\n\n在Service层新建**IBaseService**接口。\n```csharp\n    public interface IBaseService<T> : IDisposable\n    {\n        /// <summary>\n        /// 分页查询集合\n        /// </summary>\n        /// <param name=\"pageIndex\">页码</param>\n        /// <param name=\"pageSize\">分页大小</param>\n        /// <param name=\"strField\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <param name=\"strOrder\">排序规则</param>\n        /// <param name=\"totalCount\">总数</param>\n        /// <returns>数据集合</returns>\n        List<T> GetPageList(int pageIndex, int pageSize, string strField, SqlFilterEntity filter, string strOrder, out int totalCount);\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>数据集合</returns>\n        ISugarQueryable<T> GetList(string field, SqlFilterEntity filter);\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <returns>数据集合</returns>\n        ISugarQueryable<T> GetList(int top = 0);\n\n        /// <summary>\n        /// 获取对象\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>对象</returns>\n        T GetEntity(SqlFilterEntity filter, string field = \"\");\n\n        /// <summary>\n        /// 判断数据是否存在\n        /// </summary>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>执行结果</returns>\n        bool IsExists(SqlFilterEntity filter);\n\n        /// <summary>\n        /// 新增\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>自增id</returns>\n        int Insert(T entity, List<string> ignoreColumns = null, bool isLock = false);\n\n        /// <summary>\n        /// 修改\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        bool Update(T entity, List<string> ignoreColumns = null, bool isLock = false);\n\n        /// <summary>\n        /// 根据主键删除\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        bool Delete(T entity, bool isLock = false);\n\n    }\n```\n可以看到，我通过SqlFilterEntity这一实例来传递我的Where条件。\n\n实现接口方法，新建**BaseService**。\n\n```csharp\n    public class BaseService<T> : IBaseService<T> where T : class, new()\n    {\n        private BaseDbContext baseDb;\n        protected SqlSugarClient db;\n\n        public BaseService()\n        {\n            baseDb = new BaseDbContext(\"你的数据库连接\");\n            db = baseDb.Db;\n        }\n\n        /// <summary>\n        /// 分页查询集合\n        /// </summary>\n        /// <param name=\"pageIndex\">页码</param>\n        /// <param name=\"pageSize\">分页大小</param>\n        /// <param name=\"strField\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <param name=\"strOrder\">排序规则</param>\n        /// <param name=\"totalCount\">总数</param>\n        /// <returns>数据集合</returns>\n        public List<T> GetPageList(int pageIndex, int pageSize, string strField, SqlFilterEntity filter, string strOrder, out int totalCount)\n        {\n            totalCount = 0;\n            if (pageIndex <= 0)\n            {\n                pageIndex = 1;\n            }\n            if (pageSize <= 0)\n            {\n                pageSize = 10;//暂定默认分页大小为10\n            }\n            if (string.IsNullOrEmpty(strField))\n            {\n                strField = \"\";\n            }\n            if (string.IsNullOrEmpty(strOrder))\n            {\n                strOrder = string.Format(\"ID asc\");//这个地方我当时是在Config设置默认的排序\n            }\n            if (filter == null)\n            {\n                filter = new SqlFilterEntity();\n            }\n            return db.Queryable<T>().With(SqlWith.NoLock).Select(strField).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).OrderByIF(!string.IsNullOrEmpty(strOrder), strOrder).ToPageList(pageIndex, pageSize, ref totalCount);\n        }\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>数据集合</returns>\n        public ISugarQueryable<T> GetList(string field, SqlFilterEntity filter)\n        {\n            if (string.IsNullOrEmpty(field))\n            {\n                field = \"\";\n            }\n            if (filter == null)\n            {\n                filter = new SqlFilterEntity();\n            }\n            return db.Queryable<T>().With(SqlWith.NoLock).Select(field).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value);\n        }\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <returns>数据集合</returns>\n        public ISugarQueryable<T> GetList(int top = 0)\n        {\n            if (top > 0)\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock).Take(top);\n            }\n            else\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock);\n            }\n        }\n\n        /// <summary>\n        /// 获取对象\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>对象</returns>\n        public T GetEntity(SqlFilterEntity filter, string field = \"\")\n        {\n            if (string.IsNullOrEmpty(field))\n            {\n                field = \"\";\n            }\n            if (filter != null)\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock).Select(field).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).First();\n            }\n            return default(T);\n        }\n\n        /// <summary>\n        /// 判断数据是否存在\n        /// </summary>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>执行结果</returns>\n        public bool IsExists(SqlFilterEntity filter)\n        {\n            var result = db.Queryable<T>().With(SqlWith.NoLock).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).Count();\n            return result > 0;\n        }\n\n        /// <summary>\n        /// 新增\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>自增id</returns>\n        public int Insert(T entity, List<string> ignoreColumns = null, bool isLock = false)\n        {\n            if (ignoreColumns == null)\n            {\n                ignoreColumns = new List<string>();\n            }\n            var result = isLock ?\n                db.Insertable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity()\n                : db.Insertable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity();\n            return result;\n        }\n\n\n        /// <summary>\n        /// 修改\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        public bool Update(T entity, List<string> ignoreColumns = null, bool isLock = false)\n        {\n            if (ignoreColumns == null)\n            {\n                ignoreColumns = new List<string>();\n            }\n            var result = isLock ?\n                db.Updateable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand()\n                : db.Updateable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand();\n            return result > 0;\n        }\n\n        /// <summary>\n        /// 根据主键删除\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        public bool Delete(T entity, bool isLock = false)\n        {\n            var result = isLock ?\n                db.Deleteable<T>(entity).With(SqlWith.RowLock).ExecuteCommand().ObjToBool()\n                : db.Deleteable<T>(entity).ExecuteCommand().ObjToBool();\n            return result;\n        }\n\n        public void Dispose()\n        {\n\n        }\n    }\n```\n\n### 小结\n这一篇感觉写的不多，但是代码放的有点儿多，习惯性的把东西尽可能介绍详细点儿，万一有人真的从小白开始一点点儿想折腾个啥东西呢（比如说我），下一篇**Part 2**介绍具体的用法和测试吧。","source":"_posts/net-core-sqlsugar-1.md","raw":"---\ntitle: net core Webapi基础工程搭建（六）——数据库操作_Part 1\ndate: 2019-07-18 19:31:41\ntags: net core\ncategories: AprilBlank\n---\n\n### 前言\n后端开发最常打交道的就是数据库了（静态网站靠边），上一篇[net core Webapi基础工程搭建（五）——缓存机制](/2019/07/10/net-core-cache/)，缓存就是为了减少数据库的读操作，不过什么访问都是会耗时的，拿空间（内存）换时间对用户体验来说是惯用手段，后续介绍界面操作的时候再说用户体验。\n\n### SqlSugar\n当然你可以用EF（太重，扩展性相对差，但不可否认基本上涵盖范围够广），也可以用Dapper（这个我之前头一回鼓捣net core的时候用的是Dapper），或者自己基于原生去写数据库的操作，都Ok，但是如果有造好的轮子，对于我们来说用就行了，可以深入理解但对于常规开发来说，CV大法是最好的（新手向），**SqlSugar**的[文档地址](http://www.codeisbug.com/)。\n\n> 之前的工程在最初创建的时候，没有创建完整，因为当时不操作数据层，所以偷个懒，这次一并创建，具体过程不再赘述\n，同**April.Util**工程的创建一致，都是类库项目，新建**April.Service**，**April.Entity**。\n\n好了，我们在Service与Entity项目中通过NuGet包引入**sqlSugarCore**，至于原因前面也说过[net core Webapi基础工程搭建（四）——日志功能log4net](/2019/07/04/net-core-log4net/)。\n\n这里应该不需要再图文介绍引入了，如果不清楚，也可以去上面的链接查看NuGet的引入方法。\n\n引入完成后，我们在Entity项目创建一个类对象，命名为**StudentEntity**吧，只是做个示例。\n\n```csharp\n    public class StudentEntity\n    {\n        private int _ID = -1;\n        private string _Name = string.Empty;\n        private string _Number = string.Empty;\n        private int _Age = 0;\n        private int _Sex = 0;\n        private string _Address = string.Empty;\n    }\n```\n对象属性这块儿，看个人习惯，有些人偏向于直接get，set方法，我习惯于先初始化，选中所有的私有属性，使用宇宙第一IDE的快捷键Ctrl+R+E，点击确定，好了自己去加注释去吧。\n![神器的好处](net-core-sqlsugar-1/1.png)\n这里也说下为什么Entity这个实例对象层也要引入SqlSugar，是因为如果你的表名或者属性名与数据库不一致的时候，还是需要标识出来的，比如下面的代码，具体的用法还是去参考文档吧，我这只是轻描淡写下。\n\n```csharp\n\t[SugarTable(\"test_Student\")]\n    public class StudentEntity\n    {\n        private int _ID = -1;\n        private string _Name = string.Empty;\n        private string _Number = string.Empty;\n        private int _Age = 0;\n        private int _Sex = 0;\n        private string _Address = string.Empty;\n\n        /// <summary>\n        /// 主键\n        /// </summary>\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int ID { get => _ID; set => _ID = value; }\n        /// <summary>\n        /// 姓名\n        /// </summary>\n        public string Name { get => _Name; set => _Name = value; }\n        /// <summary>\n        /// 学号\n        /// </summary>\n        public string Number { get => _Number; set => _Number = value; }\n        /// <summary>\n        /// 年龄\n        /// </summary>\n        public int Age { get => _Age; set => _Age = value; }\n        /// <summary>\n        /// 性别\n        /// </summary>\n        public int Sex { get => _Sex; set => _Sex = value; }\n        /// <summary>\n        /// 家庭住址\n        /// </summary>\n        [SugarColumn(ColumnName = \"test_Address\")]\n        public string Address { get => _Address; set => _Address = value; }\n    }\n```\n\n实体对象我就不多写了，重复的工作是根据你自己的业务所处理的。\n\n### Service层\n这个地方我重点标注下，是因为数据库这块儿的操作还是需要重视的，我们先来新建个**BaseDbContext**用于执行数据库操作的实体。\n```csharp\n\tpublic class BaseDbContext\n    {\n        public SqlSugarClient Db;\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"connStr\">数据库连接串</param>\n        /// <param name=\"sqlType\">数据库类型</param>\n        public BaseDbContext(string connStr, int sqlType = 1)\n        {\n            InitDataBase(connStr, sqlType);\n        }\n\n        /// <summary>\n        /// 构造函数\n        /// </summary>\n        /// <param name=\"serverIp\">服务器IP</param>\n        /// <param name=\"user\">用户名</param>\n        /// <param name=\"pass\">密码</param>\n        /// <param name=\"dataBase\">数据库</param>\n        public BaseDbContext(string serverIp, string user, string pass, string dataBase)\n        {\n            string connStr = $\"server={serverIp};user id={user};password={pass};persistsecurityinfo=True;database={dataBase}\";\n            InitDataBase(connStr);\n        }\n\n        /// <summary>\n        /// 初始化数据库连接\n        /// </summary>\n        /// <param name=\"listConn\">连接字符串</param>\n        private void InitDataBase(string connStr, int sqlType = 1)\n        {\n            Db = new SqlSugarClient(new ConnectionConfig()\n            {\n                ConnectionString = connStr,\n                DbType = (DbType)sqlType,\n                IsAutoCloseConnection = true,\n                //SlaveConnectionConfigs = slaveConnectionConfigs\n            });\n            Db.Ado.CommandTimeOut = 30000;//设置超时时间\n            Db.Aop.OnLogExecuted = (sql, pars) => //SQL执行完事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnLogExecuting = (sql, pars) => //SQL执行前事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnError = (exp) =>//执行SQL 错误事件\n            {\n                //这里可以查看执行的sql语句跟参数\n            };\n            Db.Aop.OnExecutingChangeSql = (sql, pars) => //SQL执行前 可以修改SQL\n            {\n                return new KeyValuePair<string, SugarParameter[]>(sql, pars);\n            };\n        }\n        /// <summary>\n        /// 开启事务\n        /// </summary>\n        public void BeginTran()\n        {\n            Db.Ado.BeginTran();\n        }\n        /// <summary>\n        /// 提交事务\n        /// </summary>\n        public void CommitTran()\n        {\n            Db.Ado.CommitTran();\n        }\n        /// <summary>\n        /// 回滚事务\n        /// </summary>\n        public void RollbackTran()\n        {\n            Db.Ado.RollbackTran();\n        }\n    }\n```\n\n构造函数主要用于实例化你的数据库对象（连接串，数据库类型），日志的记录，事务这些也都标注上，后续可以替换直接使用。\n\n### BaseService（基类）\n> 在最初写net core的时候，我用Repository层来实现sql处理，Service用来做逻辑处理，传统的三层架构，但是对于简单的工程来说，个人感觉Bll层的存在不是那么理想，可能是我没彻底理解三层架构吧，这个地方如果有个人想法或好的见解也希望一块交流，互相进步。\n\n在写基类之前，我们在Util层新建一个**SqlSqlFilterEntity**，这步可能算是多此一举，但是为了减少团队其他人的学习成本，我还是写了这个对象，以致于后续的封装，会以此为参数做传递而不公开lambda的写法使用。\n\n```csharp\n    public class SqlFilterEntity\n    {\n        private string _Filter = string.Empty;\n        private Dictionary<string, object> _Value = null;\n        /// <summary>\n        /// 查询条件\n        /// </summary>\n        public string Filter { get => _Filter; set => _Filter = value; }\n        /// <summary>\n        /// 查询参数\n        /// </summary>\n        public Dictionary<string, object> Value { get => _Value; set => _Value = value; }\n    }\n```\n\n在Service层新建**IBaseService**接口。\n```csharp\n    public interface IBaseService<T> : IDisposable\n    {\n        /// <summary>\n        /// 分页查询集合\n        /// </summary>\n        /// <param name=\"pageIndex\">页码</param>\n        /// <param name=\"pageSize\">分页大小</param>\n        /// <param name=\"strField\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <param name=\"strOrder\">排序规则</param>\n        /// <param name=\"totalCount\">总数</param>\n        /// <returns>数据集合</returns>\n        List<T> GetPageList(int pageIndex, int pageSize, string strField, SqlFilterEntity filter, string strOrder, out int totalCount);\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>数据集合</returns>\n        ISugarQueryable<T> GetList(string field, SqlFilterEntity filter);\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <returns>数据集合</returns>\n        ISugarQueryable<T> GetList(int top = 0);\n\n        /// <summary>\n        /// 获取对象\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>对象</returns>\n        T GetEntity(SqlFilterEntity filter, string field = \"\");\n\n        /// <summary>\n        /// 判断数据是否存在\n        /// </summary>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>执行结果</returns>\n        bool IsExists(SqlFilterEntity filter);\n\n        /// <summary>\n        /// 新增\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>自增id</returns>\n        int Insert(T entity, List<string> ignoreColumns = null, bool isLock = false);\n\n        /// <summary>\n        /// 修改\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        bool Update(T entity, List<string> ignoreColumns = null, bool isLock = false);\n\n        /// <summary>\n        /// 根据主键删除\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        bool Delete(T entity, bool isLock = false);\n\n    }\n```\n可以看到，我通过SqlFilterEntity这一实例来传递我的Where条件。\n\n实现接口方法，新建**BaseService**。\n\n```csharp\n    public class BaseService<T> : IBaseService<T> where T : class, new()\n    {\n        private BaseDbContext baseDb;\n        protected SqlSugarClient db;\n\n        public BaseService()\n        {\n            baseDb = new BaseDbContext(\"你的数据库连接\");\n            db = baseDb.Db;\n        }\n\n        /// <summary>\n        /// 分页查询集合\n        /// </summary>\n        /// <param name=\"pageIndex\">页码</param>\n        /// <param name=\"pageSize\">分页大小</param>\n        /// <param name=\"strField\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <param name=\"strOrder\">排序规则</param>\n        /// <param name=\"totalCount\">总数</param>\n        /// <returns>数据集合</returns>\n        public List<T> GetPageList(int pageIndex, int pageSize, string strField, SqlFilterEntity filter, string strOrder, out int totalCount)\n        {\n            totalCount = 0;\n            if (pageIndex <= 0)\n            {\n                pageIndex = 1;\n            }\n            if (pageSize <= 0)\n            {\n                pageSize = 10;//暂定默认分页大小为10\n            }\n            if (string.IsNullOrEmpty(strField))\n            {\n                strField = \"\";\n            }\n            if (string.IsNullOrEmpty(strOrder))\n            {\n                strOrder = string.Format(\"ID asc\");//这个地方我当时是在Config设置默认的排序\n            }\n            if (filter == null)\n            {\n                filter = new SqlFilterEntity();\n            }\n            return db.Queryable<T>().With(SqlWith.NoLock).Select(strField).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).OrderByIF(!string.IsNullOrEmpty(strOrder), strOrder).ToPageList(pageIndex, pageSize, ref totalCount);\n        }\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>数据集合</returns>\n        public ISugarQueryable<T> GetList(string field, SqlFilterEntity filter)\n        {\n            if (string.IsNullOrEmpty(field))\n            {\n                field = \"\";\n            }\n            if (filter == null)\n            {\n                filter = new SqlFilterEntity();\n            }\n            return db.Queryable<T>().With(SqlWith.NoLock).Select(field).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value);\n        }\n\n        /// <summary>\n        /// 获取列表集合\n        /// </summary>\n        /// <returns>数据集合</returns>\n        public ISugarQueryable<T> GetList(int top = 0)\n        {\n            if (top > 0)\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock).Take(top);\n            }\n            else\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock);\n            }\n        }\n\n        /// <summary>\n        /// 获取对象\n        /// </summary>\n        /// <param name=\"field\">查询字段</param>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>对象</returns>\n        public T GetEntity(SqlFilterEntity filter, string field = \"\")\n        {\n            if (string.IsNullOrEmpty(field))\n            {\n                field = \"\";\n            }\n            if (filter != null)\n            {\n                return db.Queryable<T>().With(SqlWith.NoLock).Select(field).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).First();\n            }\n            return default(T);\n        }\n\n        /// <summary>\n        /// 判断数据是否存在\n        /// </summary>\n        /// <param name=\"filter\">查询条件</param>\n        /// <returns>执行结果</returns>\n        public bool IsExists(SqlFilterEntity filter)\n        {\n            var result = db.Queryable<T>().With(SqlWith.NoLock).WhereIF(!string.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).Count();\n            return result > 0;\n        }\n\n        /// <summary>\n        /// 新增\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>自增id</returns>\n        public int Insert(T entity, List<string> ignoreColumns = null, bool isLock = false)\n        {\n            if (ignoreColumns == null)\n            {\n                ignoreColumns = new List<string>();\n            }\n            var result = isLock ?\n                db.Insertable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity()\n                : db.Insertable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity();\n            return result;\n        }\n\n\n        /// <summary>\n        /// 修改\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"ignoreColumns\">排除列</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        public bool Update(T entity, List<string> ignoreColumns = null, bool isLock = false)\n        {\n            if (ignoreColumns == null)\n            {\n                ignoreColumns = new List<string>();\n            }\n            var result = isLock ?\n                db.Updateable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand()\n                : db.Updateable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand();\n            return result > 0;\n        }\n\n        /// <summary>\n        /// 根据主键删除\n        /// </summary>\n        /// <param name=\"entity\">实例对象</param>\n        /// <param name=\"isLock\">是否加锁</param>\n        /// <returns>执行结果</returns>\n        public bool Delete(T entity, bool isLock = false)\n        {\n            var result = isLock ?\n                db.Deleteable<T>(entity).With(SqlWith.RowLock).ExecuteCommand().ObjToBool()\n                : db.Deleteable<T>(entity).ExecuteCommand().ObjToBool();\n            return result;\n        }\n\n        public void Dispose()\n        {\n\n        }\n    }\n```\n\n### 小结\n这一篇感觉写的不多，但是代码放的有点儿多，习惯性的把东西尽可能介绍详细点儿，万一有人真的从小白开始一点点儿想折腾个啥东西呢（比如说我），下一篇**Part 2**介绍具体的用法和测试吧。","slug":"net-core-sqlsugar-1","published":1,"updated":"2019-09-30T05:47:11.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck39k3m4p004d9sv7nsv20ec2","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>后端开发最常打交道的就是数据库了（静态网站靠边），上一篇<a href=\"/2019/07/10/net-core-cache/\">net core Webapi基础工程搭建（五）——缓存机制</a>，缓存就是为了减少数据库的读操作，不过什么访问都是会耗时的，拿空间（内存）换时间对用户体验来说是惯用手段，后续介绍界面操作的时候再说用户体验。</p>\n<h3 id=\"SqlSugar\"><a href=\"#SqlSugar\" class=\"headerlink\" title=\"SqlSugar\"></a>SqlSugar</h3><p>当然你可以用EF（太重，扩展性相对差，但不可否认基本上涵盖范围够广），也可以用Dapper（这个我之前头一回鼓捣net core的时候用的是Dapper），或者自己基于原生去写数据库的操作，都Ok，但是如果有造好的轮子，对于我们来说用就行了，可以深入理解但对于常规开发来说，CV大法是最好的（新手向），<strong>SqlSugar</strong>的<a href=\"http://www.codeisbug.com/\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</p>\n<blockquote>\n<p>之前的工程在最初创建的时候，没有创建完整，因为当时不操作数据层，所以偷个懒，这次一并创建，具体过程不再赘述<br>，同<strong>April.Util</strong>工程的创建一致，都是类库项目，新建<strong>April.Service</strong>，<strong>April.Entity</strong>。</p>\n</blockquote>\n<p>好了，我们在Service与Entity项目中通过NuGet包引入<strong>sqlSugarCore</strong>，至于原因前面也说过<a href=\"/2019/07/04/net-core-log4net/\">net core Webapi基础工程搭建（四）——日志功能log4net</a>。</p>\n<p>这里应该不需要再图文介绍引入了，如果不清楚，也可以去上面的链接查看NuGet的引入方法。</p>\n<p>引入完成后，我们在Entity项目创建一个类对象，命名为<strong>StudentEntity</strong>吧，只是做个示例。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StudentEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Name = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Number = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Address = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对象属性这块儿，看个人习惯，有些人偏向于直接get，set方法，我习惯于先初始化，选中所有的私有属性，使用宇宙第一IDE的快捷键Ctrl+R+E，点击确定，好了自己去加注释去吧。<br><img src=\"/2019/07/18/net-core-sqlsugar-1/1.png\" alt=\"神器的好处\"><br>这里也说下为什么Entity这个实例对象层也要引入SqlSugar，是因为如果你的表名或者属性名与数据库不一致的时候，还是需要标识出来的，比如下面的代码，具体的用法还是去参考文档吧，我这只是轻描淡写下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SugarTable(<span class=\"meta-string\">\"test_Student\"</span>)</span>]</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StudentEntity</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Name = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Number = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Age = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Address = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 主键</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       [<span class=\"meta\">SugarColumn(IsPrimaryKey = true, IsIdentity = true)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ID &#123; <span class=\"keyword\">get</span> =&gt; _ID; <span class=\"keyword\">set</span> =&gt; _ID = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 姓名</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span> =&gt; _Name; <span class=\"keyword\">set</span> =&gt; _Name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 学号</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Number &#123; <span class=\"keyword\">get</span> =&gt; _Number; <span class=\"keyword\">set</span> =&gt; _Number = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 年龄</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span> =&gt; _Age; <span class=\"keyword\">set</span> =&gt; _Age = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 性别</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Sex &#123; <span class=\"keyword\">get</span> =&gt; _Sex; <span class=\"keyword\">set</span> =&gt; _Sex = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 家庭住址</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       [<span class=\"meta\">SugarColumn(ColumnName = <span class=\"meta-string\">\"test_Address\"</span>)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Address &#123; <span class=\"keyword\">get</span> =&gt; _Address; <span class=\"keyword\">set</span> =&gt; _Address = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体对象我就不多写了，重复的工作是根据你自己的业务所处理的。</p>\n<h3 id=\"Service层\"><a href=\"#Service层\" class=\"headerlink\" title=\"Service层\"></a>Service层</h3><p>这个地方我重点标注下，是因为数据库这块儿的操作还是需要重视的，我们先来新建个<strong>BaseDbContext</strong>用于执行数据库操作的实体。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseDbContext</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> SqlSugarClient Db;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connStr\"&gt;</span>数据库连接串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sqlType\"&gt;</span>数据库类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDbContext</span>(<span class=\"params\"><span class=\"keyword\">string</span> connStr, <span class=\"keyword\">int</span> sqlType = <span class=\"number\">1</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           InitDataBase(connStr, sqlType);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"serverIp\"&gt;</span>服务器IP<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"user\"&gt;</span>用户名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pass\"&gt;</span>密码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dataBase\"&gt;</span>数据库<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDbContext</span>(<span class=\"params\"><span class=\"keyword\">string</span> serverIp, <span class=\"keyword\">string</span> user, <span class=\"keyword\">string</span> pass, <span class=\"keyword\">string</span> dataBase</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">string</span> connStr = <span class=\"string\">$\"server=<span class=\"subst\">&#123;serverIp&#125;</span>;user id=<span class=\"subst\">&#123;user&#125;</span>;password=<span class=\"subst\">&#123;pass&#125;</span>;persistsecurityinfo=True;database=<span class=\"subst\">&#123;dataBase&#125;</span>\"</span>;</span><br><span class=\"line\">           InitDataBase(connStr);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 初始化数据库连接</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"listConn\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitDataBase</span>(<span class=\"params\"><span class=\"keyword\">string</span> connStr, <span class=\"keyword\">int</span> sqlType = <span class=\"number\">1</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db = <span class=\"keyword\">new</span> SqlSugarClient(<span class=\"keyword\">new</span> ConnectionConfig()</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               ConnectionString = connStr,</span><br><span class=\"line\">               DbType = (DbType)sqlType,</span><br><span class=\"line\">               IsAutoCloseConnection = <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"comment\">//SlaveConnectionConfigs = slaveConnectionConfigs</span></span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           Db.Ado.CommandTimeOut = <span class=\"number\">30000</span>;<span class=\"comment\">//设置超时时间</span></span><br><span class=\"line\">           Db.Aop.OnLogExecuted = (sql, pars) =&gt; <span class=\"comment\">//SQL执行完事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnLogExecuting = (sql, pars) =&gt; <span class=\"comment\">//SQL执行前事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnError = (exp) =&gt;<span class=\"comment\">//执行SQL 错误事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnExecutingChangeSql = (sql, pars) =&gt; <span class=\"comment\">//SQL执行前 可以修改SQL</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyValuePair&lt;<span class=\"keyword\">string</span>, SugarParameter[]&gt;(sql, pars);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 开启事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BeginTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.BeginTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 提交事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CommitTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.CommitTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 回滚事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RollbackTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.RollbackTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造函数主要用于实例化你的数据库对象（连接串，数据库类型），日志的记录，事务这些也都标注上，后续可以替换直接使用。</p>\n<h3 id=\"BaseService（基类）\"><a href=\"#BaseService（基类）\" class=\"headerlink\" title=\"BaseService（基类）\"></a>BaseService（基类）</h3><blockquote>\n<p>在最初写net core的时候，我用Repository层来实现sql处理，Service用来做逻辑处理，传统的三层架构，但是对于简单的工程来说，个人感觉Bll层的存在不是那么理想，可能是我没彻底理解三层架构吧，这个地方如果有个人想法或好的见解也希望一块交流，互相进步。</p>\n</blockquote>\n<p>在写基类之前，我们在Util层新建一个<strong>SqlSqlFilterEntity</strong>，这步可能算是多此一举，但是为了减少团队其他人的学习成本，我还是写了这个对象，以致于后续的封装，会以此为参数做传递而不公开lambda的写法使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlFilterEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Filter = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; _Value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询条件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Filter &#123; <span class=\"keyword\">get</span> =&gt; _Filter; <span class=\"keyword\">set</span> =&gt; _Filter = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询参数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; Value &#123; <span class=\"keyword\">get</span> =&gt; _Value; <span class=\"keyword\">set</span> =&gt; _Value = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Service层新建<strong>IBaseService</strong>接口。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseService&lt;T&gt; : IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>分页大小<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strField\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strOrder\"&gt;</span>排序规则<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>总数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetPageList</span>(<span class=\"params\"><span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">string</span> strField, SqlFilterEntity filter, <span class=\"keyword\">string</span> strOrder, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">string</span> field, SqlFilterEntity filter</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>对象<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">GetEntity</span>(<span class=\"params\">SqlFilterEntity filter, <span class=\"keyword\">string</span> field = <span class=\"string\">\"\"</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断数据是否存在</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsExists</span>(<span class=\"params\">SqlFilterEntity filter</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 新增</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自增id<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Insert</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 修改</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Update</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\">T entity, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我通过SqlFilterEntity这一实例来传递我的Where条件。</p>\n<p>实现接口方法，新建<strong>BaseService</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseService&lt;T&gt; : IBaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BaseDbContext baseDb;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SqlSugarClient db;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        baseDb = <span class=\"keyword\">new</span> BaseDbContext(<span class=\"string\">\"你的数据库连接\"</span>);</span><br><span class=\"line\">        db = baseDb.Db;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>分页大小<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strField\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strOrder\"&gt;</span>排序规则<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>总数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetPageList</span>(<span class=\"params\"><span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">string</span> strField, SqlFilterEntity filter, <span class=\"keyword\">string</span> strOrder, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        totalCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pageIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageSize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pageSize = <span class=\"number\">10</span>;<span class=\"comment\">//暂定默认分页大小为10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strField))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            strField = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strOrder))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            strOrder = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"ID asc\"</span>);<span class=\"comment\">//这个地方我当时是在Config设置默认的排序</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(strField).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).OrderByIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(strOrder), strOrder).ToPageList(pageIndex, pageSize, <span class=\"keyword\">ref</span> totalCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">string</span> field, SqlFilterEntity filter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(field))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            field = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(field).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Take(top);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>对象<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">GetEntity</span>(<span class=\"params\">SqlFilterEntity filter, <span class=\"keyword\">string</span> field = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(field))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            field = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(field).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).First();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断数据是否存在</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExists</span>(<span class=\"params\">SqlFilterEntity filter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = db.Queryable&lt;T&gt;().With(SqlWith.NoLock).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).Count();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 新增</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自增id<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Insert</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ignoreColumns == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ignoreColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Insertable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity()</span><br><span class=\"line\">            : db.Insertable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 修改</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Update</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ignoreColumns == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ignoreColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Updateable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand()</span><br><span class=\"line\">            : db.Updateable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\">T entity, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Deleteable&lt;T&gt;(entity).With(SqlWith.RowLock).ExecuteCommand().ObjToBool()</span><br><span class=\"line\">            : db.Deleteable&lt;T&gt;(entity).ExecuteCommand().ObjToBool();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这一篇感觉写的不多，但是代码放的有点儿多，习惯性的把东西尽可能介绍详细点儿，万一有人真的从小白开始一点点儿想折腾个啥东西呢（比如说我），下一篇<strong>Part 2</strong>介绍具体的用法和测试吧。</p>\n","site":{"data":{"temp":{"language":"zh-CN","description":"3wly 项目开发组自留地","keywords":"d-107,m-finder,3wly,blank,技术博客,技术分享","menu":{"首页":"/","归档":"/archives","关于":"/about"},"subnav":{"github":"https://github.com/d-107","qq":"//shang.qq.com/wpa/qunwpa?idkey=7221c889336da3d56c33380b59c0883ea67d0c15f6883fa50d4478ff136a1e0d","mail":"mailto:m@m-finder.com"},"favicon":"/images/favicon.ico","logo":"/images/d-107.png","friends":{"M-finder":"https://www.m-finder.com","AprilBlank":"https://www.cnblogs.com/AprilBlank/","大白":"http://blog.csdn.net/qq_27948659","Sgclzqq":"http://www.sgclzqq.com/","Wait":"https://93xiaosi.github.io/","WangWeiQiang":"https://thekingstyle.github.io/"},"gitment":{"enable":false,"lazy":false,"admins":["'m-finder'","'AprilBlank'"],"github_user":"d-107","github_repo":"d-107-gitment","client_id":"be9a4c4f23fb136eb563","client_secret":"4d073881c7c960d6eb85082ebd1d33ceed88eab9"},"valine":{"enable":true,"appId":"oxinNxVcEtTnMxQAIoeWWIB8-MdYXbMMI","appKey":"egs7BlX8kO6FuIdaXxDvhe07","notify":false,"verify":false,"placeholder":"来啊，快活啊 (๑•ᴗ•๑)"},"stylesheets":["/css/sense.css"],"scripts":["/js/jquery-3.4.1.min.js","/js/sense.js","/js/image-view.js"],"sakura":false,"snow":false,"firework":true,"traffic":false}}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>后端开发最常打交道的就是数据库了（静态网站靠边），上一篇<a href=\"/2019/07/10/net-core-cache/\">net core Webapi基础工程搭建（五）——缓存机制</a>，缓存就是为了减少数据库的读操作，不过什么访问都是会耗时的，拿空间（内存）换时间对用户体验来说是惯用手段，后续介绍界面操作的时候再说用户体验。</p>\n<h3 id=\"SqlSugar\"><a href=\"#SqlSugar\" class=\"headerlink\" title=\"SqlSugar\"></a>SqlSugar</h3><p>当然你可以用EF（太重，扩展性相对差，但不可否认基本上涵盖范围够广），也可以用Dapper（这个我之前头一回鼓捣net core的时候用的是Dapper），或者自己基于原生去写数据库的操作，都Ok，但是如果有造好的轮子，对于我们来说用就行了，可以深入理解但对于常规开发来说，CV大法是最好的（新手向），<strong>SqlSugar</strong>的<a href=\"http://www.codeisbug.com/\" target=\"_blank\" rel=\"noopener\">文档地址</a>。</p>\n<blockquote>\n<p>之前的工程在最初创建的时候，没有创建完整，因为当时不操作数据层，所以偷个懒，这次一并创建，具体过程不再赘述<br>，同<strong>April.Util</strong>工程的创建一致，都是类库项目，新建<strong>April.Service</strong>，<strong>April.Entity</strong>。</p>\n</blockquote>\n<p>好了，我们在Service与Entity项目中通过NuGet包引入<strong>sqlSugarCore</strong>，至于原因前面也说过<a href=\"/2019/07/04/net-core-log4net/\">net core Webapi基础工程搭建（四）——日志功能log4net</a>。</p>\n<p>这里应该不需要再图文介绍引入了，如果不清楚，也可以去上面的链接查看NuGet的引入方法。</p>\n<p>引入完成后，我们在Entity项目创建一个类对象，命名为<strong>StudentEntity</strong>吧，只是做个示例。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StudentEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Name = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Number = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Address = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对象属性这块儿，看个人习惯，有些人偏向于直接get，set方法，我习惯于先初始化，选中所有的私有属性，使用宇宙第一IDE的快捷键Ctrl+R+E，点击确定，好了自己去加注释去吧。<br><img src=\"/2019/07/18/net-core-sqlsugar-1/1.png\" alt=\"神器的好处\"><br>这里也说下为什么Entity这个实例对象层也要引入SqlSugar，是因为如果你的表名或者属性名与数据库不一致的时候，还是需要标识出来的，比如下面的代码，具体的用法还是去参考文档吧，我这只是轻描淡写下。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SugarTable(<span class=\"meta-string\">\"test_Student\"</span>)</span>]</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StudentEntity</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _ID = <span class=\"number\">-1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Name = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Number = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Age = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> _Sex = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Address = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 主键</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       [<span class=\"meta\">SugarColumn(IsPrimaryKey = true, IsIdentity = true)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ID &#123; <span class=\"keyword\">get</span> =&gt; _ID; <span class=\"keyword\">set</span> =&gt; _ID = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 姓名</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span> =&gt; _Name; <span class=\"keyword\">set</span> =&gt; _Name = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 学号</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Number &#123; <span class=\"keyword\">get</span> =&gt; _Number; <span class=\"keyword\">set</span> =&gt; _Number = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 年龄</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span> =&gt; _Age; <span class=\"keyword\">set</span> =&gt; _Age = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 性别</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Sex &#123; <span class=\"keyword\">get</span> =&gt; _Sex; <span class=\"keyword\">set</span> =&gt; _Sex = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 家庭住址</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       [<span class=\"meta\">SugarColumn(ColumnName = <span class=\"meta-string\">\"test_Address\"</span>)</span>]</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Address &#123; <span class=\"keyword\">get</span> =&gt; _Address; <span class=\"keyword\">set</span> =&gt; _Address = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体对象我就不多写了，重复的工作是根据你自己的业务所处理的。</p>\n<h3 id=\"Service层\"><a href=\"#Service层\" class=\"headerlink\" title=\"Service层\"></a>Service层</h3><p>这个地方我重点标注下，是因为数据库这块儿的操作还是需要重视的，我们先来新建个<strong>BaseDbContext</strong>用于执行数据库操作的实体。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseDbContext</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> SqlSugarClient Db;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"connStr\"&gt;</span>数据库连接串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"sqlType\"&gt;</span>数据库类型<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDbContext</span>(<span class=\"params\"><span class=\"keyword\">string</span> connStr, <span class=\"keyword\">int</span> sqlType = <span class=\"number\">1</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           InitDataBase(connStr, sqlType);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"serverIp\"&gt;</span>服务器IP<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"user\"&gt;</span>用户名<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pass\"&gt;</span>密码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"dataBase\"&gt;</span>数据库<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDbContext</span>(<span class=\"params\"><span class=\"keyword\">string</span> serverIp, <span class=\"keyword\">string</span> user, <span class=\"keyword\">string</span> pass, <span class=\"keyword\">string</span> dataBase</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           <span class=\"keyword\">string</span> connStr = <span class=\"string\">$\"server=<span class=\"subst\">&#123;serverIp&#125;</span>;user id=<span class=\"subst\">&#123;user&#125;</span>;password=<span class=\"subst\">&#123;pass&#125;</span>;persistsecurityinfo=True;database=<span class=\"subst\">&#123;dataBase&#125;</span>\"</span>;</span><br><span class=\"line\">           InitDataBase(connStr);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 初始化数据库连接</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"listConn\"&gt;</span>连接字符串<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitDataBase</span>(<span class=\"params\"><span class=\"keyword\">string</span> connStr, <span class=\"keyword\">int</span> sqlType = <span class=\"number\">1</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db = <span class=\"keyword\">new</span> SqlSugarClient(<span class=\"keyword\">new</span> ConnectionConfig()</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               ConnectionString = connStr,</span><br><span class=\"line\">               DbType = (DbType)sqlType,</span><br><span class=\"line\">               IsAutoCloseConnection = <span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"comment\">//SlaveConnectionConfigs = slaveConnectionConfigs</span></span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           Db.Ado.CommandTimeOut = <span class=\"number\">30000</span>;<span class=\"comment\">//设置超时时间</span></span><br><span class=\"line\">           Db.Aop.OnLogExecuted = (sql, pars) =&gt; <span class=\"comment\">//SQL执行完事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnLogExecuting = (sql, pars) =&gt; <span class=\"comment\">//SQL执行前事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnError = (exp) =&gt;<span class=\"comment\">//执行SQL 错误事件</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">//这里可以查看执行的sql语句跟参数</span></span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           Db.Aop.OnExecutingChangeSql = (sql, pars) =&gt; <span class=\"comment\">//SQL执行前 可以修改SQL</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyValuePair&lt;<span class=\"keyword\">string</span>, SugarParameter[]&gt;(sql, pars);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 开启事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BeginTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.BeginTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 提交事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CommitTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.CommitTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 回滚事务</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RollbackTran</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>       &#123;</span><br><span class=\"line\">           Db.Ado.RollbackTran();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造函数主要用于实例化你的数据库对象（连接串，数据库类型），日志的记录，事务这些也都标注上，后续可以替换直接使用。</p>\n<h3 id=\"BaseService（基类）\"><a href=\"#BaseService（基类）\" class=\"headerlink\" title=\"BaseService（基类）\"></a>BaseService（基类）</h3><blockquote>\n<p>在最初写net core的时候，我用Repository层来实现sql处理，Service用来做逻辑处理，传统的三层架构，但是对于简单的工程来说，个人感觉Bll层的存在不是那么理想，可能是我没彻底理解三层架构吧，这个地方如果有个人想法或好的见解也希望一块交流，互相进步。</p>\n</blockquote>\n<p>在写基类之前，我们在Util层新建一个<strong>SqlSqlFilterEntity</strong>，这步可能算是多此一举，但是为了减少团队其他人的学习成本，我还是写了这个对象，以致于后续的封装，会以此为参数做传递而不公开lambda的写法使用。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlFilterEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> _Filter = <span class=\"keyword\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; _Value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询条件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Filter &#123; <span class=\"keyword\">get</span> =&gt; _Filter; <span class=\"keyword\">set</span> =&gt; _Filter = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 查询参数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Dictionary&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">object</span>&gt; Value &#123; <span class=\"keyword\">get</span> =&gt; _Value; <span class=\"keyword\">set</span> =&gt; _Value = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Service层新建<strong>IBaseService</strong>接口。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IBaseService&lt;T&gt; : IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>分页大小<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strField\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strOrder\"&gt;</span>排序规则<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>总数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">List&lt;T&gt; <span class=\"title\">GetPageList</span>(<span class=\"params\"><span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">string</span> strField, SqlFilterEntity filter, <span class=\"keyword\">string</span> strOrder, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">string</span> field, SqlFilterEntity filter</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>对象<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">GetEntity</span>(<span class=\"params\">SqlFilterEntity filter, <span class=\"keyword\">string</span> field = <span class=\"string\">\"\"</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断数据是否存在</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsExists</span>(<span class=\"params\">SqlFilterEntity filter</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 新增</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自增id<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Insert</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 修改</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Update</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\">T entity, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我通过SqlFilterEntity这一实例来传递我的Where条件。</p>\n<p>实现接口方法，新建<strong>BaseService</strong>。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BaseService&lt;T&gt; : IBaseService&lt;T&gt; where T : class, new()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BaseDbContext baseDb;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SqlSugarClient db;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseService</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        baseDb = <span class=\"keyword\">new</span> BaseDbContext(<span class=\"string\">\"你的数据库连接\"</span>);</span><br><span class=\"line\">        db = baseDb.Db;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 分页查询集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageIndex\"&gt;</span>页码<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"pageSize\"&gt;</span>分页大小<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strField\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"strOrder\"&gt;</span>排序规则<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"totalCount\"&gt;</span>总数<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">GetPageList</span>(<span class=\"params\"><span class=\"keyword\">int</span> pageIndex, <span class=\"keyword\">int</span> pageSize, <span class=\"keyword\">string</span> strField, SqlFilterEntity filter, <span class=\"keyword\">string</span> strOrder, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> totalCount</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        totalCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageIndex &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pageIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageSize &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pageSize = <span class=\"number\">10</span>;<span class=\"comment\">//暂定默认分页大小为10</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strField))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            strField = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(strOrder))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            strOrder = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"ID asc\"</span>);<span class=\"comment\">//这个地方我当时是在Config设置默认的排序</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(strField).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).OrderByIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(strOrder), strOrder).ToPageList(pageIndex, pageSize, <span class=\"keyword\">ref</span> totalCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">string</span> field, SqlFilterEntity filter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(field))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            field = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            filter = <span class=\"keyword\">new</span> SqlFilterEntity();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(field).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取列表集合</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>数据集合<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ISugarQueryable&lt;T&gt; <span class=\"title\">GetList</span>(<span class=\"params\"><span class=\"keyword\">int</span> top = <span class=\"number\">0</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Take(top);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 获取对象</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"field\"&gt;</span>查询字段<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>对象<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">GetEntity</span>(<span class=\"params\">SqlFilterEntity filter, <span class=\"keyword\">string</span> field = <span class=\"string\">\"\"</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrEmpty(field))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            field = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> db.Queryable&lt;T&gt;().With(SqlWith.NoLock).Select(field).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).First();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">default</span>(T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 判断数据是否存在</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"filter\"&gt;</span>查询条件<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsExists</span>(<span class=\"params\">SqlFilterEntity filter</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = db.Queryable&lt;T&gt;().With(SqlWith.NoLock).WhereIF(!<span class=\"keyword\">string</span>.IsNullOrEmpty(filter.Filter), filter.Filter, filter.Value).Count();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 新增</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>自增id<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Insert</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ignoreColumns == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ignoreColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Insertable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity()</span><br><span class=\"line\">            : db.Insertable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteReturnIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 修改</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"ignoreColumns\"&gt;</span>排除列<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Update</span>(<span class=\"params\">T entity, List&lt;<span class=\"keyword\">string</span>&gt; ignoreColumns = <span class=\"literal\">null</span>, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ignoreColumns == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ignoreColumns = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Updateable(entity).With(SqlWith.UpdLock).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand()</span><br><span class=\"line\">            : db.Updateable(entity).IgnoreColumns(ignoreColumns.ToArray()).ExecuteCommand();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 根据主键删除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"entity\"&gt;</span>实例对象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"isLock\"&gt;</span>是否加锁<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>执行结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Delete</span>(<span class=\"params\">T entity, <span class=\"keyword\">bool</span> isLock = <span class=\"literal\">false</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = isLock ?</span><br><span class=\"line\">            db.Deleteable&lt;T&gt;(entity).With(SqlWith.RowLock).ExecuteCommand().ObjToBool()</span><br><span class=\"line\">            : db.Deleteable&lt;T&gt;(entity).ExecuteCommand().ObjToBool();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>这一篇感觉写的不多，但是代码放的有点儿多，习惯性的把东西尽可能介绍详细点儿，万一有人真的从小白开始一点点儿想折腾个啥东西呢（比如说我），下一篇<strong>Part 2</strong>介绍具体的用法和测试吧。</p>\n"}],"PostAsset":[{"_id":"source/_posts/laravel-broadcasting/laravel.jpg","slug":"laravel.jpg","post":"ck39k3m1n000b9sv7zuidy2sl","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/1.png","slug":"1.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/1.png","slug":"1.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/1.png","slug":"1.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/13.png","slug":"13.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/24.png","slug":"24.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/25.png","slug":"25.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/31.png","slug":"31.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/laravel-events/laravel.jpg","slug":"laravel.jpg","post":"ck39k3m1r000d9sv78xzcivyf","modified":0,"renderable":0},{"_id":"source/_posts/hello-php/cover.png","slug":"cover.png","post":"ck39k3m0d00019sv7lk362q5o","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/5.png","slug":"5.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/9.png","slug":"9.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/23.png","slug":"23.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/laravel-queues/laravel.jpg","slug":"laravel.jpg","post":"ck39k3m2k00159sv7y039seov","modified":0,"renderable":0},{"_id":"source/_posts/laravel-swoole-in-laradock/laradock.png","slug":"laradock.png","post":"ck39k3m1w000g9sv7gp6wsup7","modified":0,"renderable":0},{"_id":"source/_posts/laravel-mix/laravel-mix.png","slug":"laravel-mix.png","post":"ck39k3m22000i9sv7hiueiqcs","modified":0,"renderable":0},{"_id":"source/_posts/tp5-fileupload-requestfile-is-null/1.png","slug":"1.png","post":"ck39k3m2w00229sv7y31462vg","modified":0,"renderable":0},{"_id":"source/_posts/laravel-swoole-socket-in-laradock/demo.png","slug":"demo.png","post":"ck39k3m27000o9sv701f9th0x","modified":0,"renderable":0},{"_id":"source/_posts/laravel-swoole-socket-in-laradock/laradock.png","slug":"laradock.png","post":"ck39k3m27000o9sv701f9th0x","modified":0,"renderable":0},{"_id":"source/_posts/laravel-queues/email.png","slug":"email.png","post":"ck39k3m2k00159sv7y039seov","modified":0,"renderable":0},{"_id":"source/_posts/net-core-unittest/1.png","slug":"1.png","post":"ck39k3m2n001e9sv7sbbbydqs","modified":0,"renderable":0},{"_id":"source/_posts/net-core-unittest/2.png","slug":"2.png","post":"ck39k3m2n001e9sv7sbbbydqs","modified":0,"renderable":0},{"_id":"source/_posts/vmware-nginx/1.png","slug":"1.png","post":"ck39k3m30002c9sv70dphy82o","modified":0,"renderable":0},{"_id":"source/_posts/vmware-nginx/2.png","slug":"2.png","post":"ck39k3m30002c9sv70dphy82o","modified":0,"renderable":0},{"_id":"source/_posts/laravel-broadcasting/mes.png","slug":"mes.png","post":"ck39k3m1n000b9sv7zuidy2sl","modified":0,"renderable":0},{"_id":"source/_posts/laravel-broadcasting/new.png","slug":"new.png","post":"ck39k3m1n000b9sv7zuidy2sl","modified":0,"renderable":0},{"_id":"source/_posts/laravel-events/new-event.png","slug":"new-event.png","post":"ck39k3m1r000d9sv78xzcivyf","modified":0,"renderable":0},{"_id":"source/_posts/laravel-events/out.png","slug":"out.png","post":"ck39k3m1r000d9sv78xzcivyf","modified":0,"renderable":0},{"_id":"source/_posts/vmware-redis/1.png","slug":"1.png","post":"ck39k3m2x00259sv7wlxfvh6c","modified":0,"renderable":0},{"_id":"source/_posts/vmware-redis/2.png","slug":"2.png","post":"ck39k3m2x00259sv7wlxfvh6c","modified":0,"renderable":0},{"_id":"source/_posts/vmware-redis/3.png","slug":"3.png","post":"ck39k3m2x00259sv7wlxfvh6c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-2/1.png","slug":"1.png","post":"ck39k3m2e000w9sv70srinq8d","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-2/2.png","slug":"2.png","post":"ck39k3m2e000w9sv70srinq8d","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-2/3.png","slug":"3.png","post":"ck39k3m2e000w9sv70srinq8d","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-2/4.png","slug":"4.png","post":"ck39k3m2e000w9sv70srinq8d","modified":0,"renderable":0},{"_id":"source/_posts/net-core-createprogram/1.png","slug":"1.png","post":"ck39k3m2j00129sv71s68td3s","modified":0,"renderable":0},{"_id":"source/_posts/net-core-createprogram/2.png","slug":"2.png","post":"ck39k3m2j00129sv71s68td3s","modified":0,"renderable":0},{"_id":"source/_posts/net-core-createprogram/3.png","slug":"3.png","post":"ck39k3m2j00129sv71s68td3s","modified":0,"renderable":0},{"_id":"source/_posts/net-core-createprogram/4.png","slug":"4.png","post":"ck39k3m2j00129sv71s68td3s","modified":0,"renderable":0},{"_id":"source/_posts/net-core-createprogram/5.png","slug":"5.png","post":"ck39k3m2j00129sv71s68td3s","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/2.png","slug":"2.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/3.png","slug":"3.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/4.png","slug":"4.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/5.png","slug":"5.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-swagger/6.png","slug":"6.png","post":"ck39k3m2l00179sv7u7ejlici","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/1.png","slug":"1.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/2.png","slug":"2.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/3.png","slug":"3.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/4.png","slug":"4.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/5.png","slug":"5.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/6.png","slug":"6.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/7.png","slug":"7.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-aop-1/8.png","slug":"8.png","post":"ck39k3m2g00109sv7q0kk6866","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/1.png","slug":"1.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/2.png","slug":"2.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/3.png","slug":"3.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/4.png","slug":"4.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/5.png","slug":"5.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/6.png","slug":"6.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/7.png","slug":"7.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-swagger/8.png","slug":"8.png","post":"ck39k3m2r001o9sv71jn8c2ec","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/1.png","slug":"1.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/2.png","slug":"2.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/3.png","slug":"3.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/4.png","slug":"4.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/5.png","slug":"5.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/6.png","slug":"6.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/7.png","slug":"7.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/8.png","slug":"8.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util/9.png","slug":"9.png","post":"ck39k3m2a000t9sv7ehyhy460","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/2.png","slug":"2.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/3.png","slug":"3.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/4.png","slug":"4.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/6.png","slug":"6.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/7.png","slug":"7.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/8.png","slug":"8.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-log4net/9.png","slug":"9.png","post":"ck39k3m2m001b9sv7ee53sshk","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/1.png","slug":"1.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/10.png","slug":"10.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/11.png","slug":"11.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/12.png","slug":"12.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/14.png","slug":"14.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/15.png","slug":"15.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/2.png","slug":"2.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/3.png","slug":"3.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/4.png","slug":"4.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/5.png","slug":"5.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/6.png","slug":"6.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/7.png","slug":"7.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-april-webapi/8.png","slug":"8.png","post":"ck39k3m2q001l9sv7zay4q50c","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/1.png","slug":"1.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/10.png","slug":"10.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/11.png","slug":"11.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/12.png","slug":"12.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/13.png","slug":"13.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/14.png","slug":"14.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/15.png","slug":"15.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/16.png","slug":"16.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/17.png","slug":"17.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/18.png","slug":"18.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/19.png","slug":"19.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/2.png","slug":"2.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/20.png","slug":"20.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/21.png","slug":"21.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/22.png","slug":"22.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/26.png","slug":"26.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/27.png","slug":"27.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/28.png","slug":"28.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/29.png","slug":"29.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/3.png","slug":"3.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/30.png","slug":"30.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/32.png","slug":"32.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/33.png","slug":"33.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/34.png","slug":"34.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/35.png","slug":"35.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/36.png","slug":"36.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/4.png","slug":"4.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/5.png","slug":"5.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/6.png","slug":"6.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/7.png","slug":"7.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/8.png","slug":"8.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-use-centos/9.png","slug":"9.png","post":"ck39k3m2y00299sv7tnxl5jj6","modified":0,"renderable":0},{"_id":"source/_posts/vmware-mysql/1.png","slug":"1.png","post":"ck39k3m3d003i9sv7d5oz970h","modified":0,"renderable":0},{"_id":"source/_posts/net-core-filedownload/1.png","slug":"1.png","post":"ck39k3m3e003j9sv7y27n8gpx","modified":0,"renderable":0},{"_id":"source/_posts/net-core-quartz/1.png","slug":"1.png","post":"ck39k3m3l003n9sv7ljahxjfa","modified":0,"renderable":0},{"_id":"source/_posts/net-core-quartz/2.png","slug":"2.png","post":"ck39k3m3l003n9sv7ljahxjfa","modified":0,"renderable":0},{"_id":"source/_posts/net-core-quartz/3.png","slug":"3.png","post":"ck39k3m3l003n9sv7ljahxjfa","modified":0,"renderable":0},{"_id":"source/_posts/net-core-qywx-application/1.png","slug":"1.png","post":"ck39k3m3p003q9sv7ojwxduwe","modified":0,"renderable":0},{"_id":"source/_posts/net-core-qywx-application/2.png","slug":"2.png","post":"ck39k3m3p003q9sv7ojwxduwe","modified":0,"renderable":0},{"_id":"source/_posts/net-core-qywx-application/3.png","slug":"3.png","post":"ck39k3m3p003q9sv7ojwxduwe","modified":0,"renderable":0},{"_id":"source/_posts/net-core-qywx-application/4.png","slug":"4.png","post":"ck39k3m3p003q9sv7ojwxduwe","modified":0,"renderable":0},{"_id":"source/_posts/net-core-qywx-application/5.png","slug":"5.png","post":"ck39k3m3p003q9sv7ojwxduwe","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/1.png","slug":"1.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/2.png","slug":"2.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/3.png","slug":"3.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/4.png","slug":"4.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/5.png","slug":"5.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-npoi/6.png","slug":"6.png","post":"ck39k3m45003z9sv705kdpamw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/1.png","slug":"1.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/2.png","slug":"2.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/3.png","slug":"3.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/4.png","slug":"4.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/5.png","slug":"5.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/6.png","slug":"6.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/7.png","slug":"7.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/8.png","slug":"8.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-2/9.png","slug":"9.png","post":"ck39k3m41003w9sv79xftjxlw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/10.png","slug":"10.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/11.png","slug":"11.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/2.png","slug":"2.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/3.png","slug":"3.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/4.png","slug":"4.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/5.png","slug":"5.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/6.png","slug":"6.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/7.png","slug":"7.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/8.png","slug":"8.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-cache/9.png","slug":"9.png","post":"ck39k3m3g003l9sv7x7kea258","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/1.png","slug":"1.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/10.png","slug":"10.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/11.png","slug":"11.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/2.png","slug":"2.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/3.png","slug":"3.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/4.png","slug":"4.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/5.png","slug":"5.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/6.png","slug":"6.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/7.png","slug":"7.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/8.png","slug":"8.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-redis/9.png","slug":"9.png","post":"ck39k3m3u003t9sv7275oj29e","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/1.png","slug":"1.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/10.png","slug":"10.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/11.png","slug":"11.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/12.png","slug":"12.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/13.png","slug":"13.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/14.png","slug":"14.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/15.png","slug":"15.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/16.png","slug":"16.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/2.png","slug":"2.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/3.png","slug":"3.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/4.png","slug":"4.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/5.png","slug":"5.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/6.png","slug":"6.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/7.png","slug":"7.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/8.png","slug":"8.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-v3-publish/9.png","slug":"9.png","post":"ck39k3m4a00429sv7sm6pkc9j","modified":0,"renderable":0},{"_id":"source/_posts/net-core-sqlsugar-1/1.png","slug":"1.png","post":"ck39k3m4p004d9sv7nsv20ec2","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/1.png","slug":"1.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/2.png","slug":"2.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/3.png","slug":"3.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/4.png","slug":"4.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/5.png","slug":"5.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/6.png","slug":"6.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-fileuploader-and-cors/7.png","slug":"7.png","post":"ck39k3m4o004b9sv7sq99wq80","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/1.png","slug":"1.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/2.png","slug":"2.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/3.png","slug":"3.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/4.png","slug":"4.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/5.png","slug":"5.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/6.png","slug":"6.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/7.png","slug":"7.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0},{"_id":"source/_posts/net-core-april-util-update-1/8.png","slug":"8.png","post":"ck39k3m4n004a9sv7afj5tedw","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck39k3m0k00039sv778kskwgm","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m0s00099sv7pxuqak8v"},{"post_id":"ck39k3m1n000b9sv7zuidy2sl","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m28000q9sv7715z5hk5"},{"post_id":"ck39k3m22000i9sv7hiueiqcs","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2b000u9sv773fksldo"},{"post_id":"ck39k3m25000m9sv7hl15y81v","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2e000x9sv7b39x29l9"},{"post_id":"ck39k3m1r000d9sv78xzcivyf","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2h00119sv78sg3grqq"},{"post_id":"ck39k3m27000o9sv701f9th0x","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2k00139sv7x6zznzht"},{"post_id":"ck39k3m2a000t9sv7ehyhy460","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2l00169sv75gpsh94h"},{"post_id":"ck39k3m1w000g9sv7gp6wsup7","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2l00189sv7edcdeg0w"},{"post_id":"ck39k3m2e000w9sv70srinq8d","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2n001c9sv7a6swv2t4"},{"post_id":"ck39k3m2g00109sv7q0kk6866","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2o001f9sv7zyb77qrk"},{"post_id":"ck39k3m2j00129sv71s68td3s","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2p001j9sv7seutscsv"},{"post_id":"ck39k3m2k00159sv7y039seov","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m2q001m9sv7hzgr9xap"},{"post_id":"ck39k3m2l00179sv7u7ejlici","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2r001p9sv7mfgxz87s"},{"post_id":"ck39k3m2m001b9sv7ee53sshk","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2s001s9sv7vvc8126n"},{"post_id":"ck39k3m2n001e9sv7sbbbydqs","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2u001w9sv7h7bv41v7"},{"post_id":"ck39k3m2p001i9sv7058nq4z7","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2v001z9sv7jg52we5g"},{"post_id":"ck39k3m2q001l9sv7zay4q50c","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2w00239sv7b7cvvd5x"},{"post_id":"ck39k3m2r001o9sv71jn8c2ec","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2x00269sv728rnpqpl"},{"post_id":"ck39k3m2s001r9sv7y9kxn9pu","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m2z002a9sv7sbpssr29"},{"post_id":"ck39k3m2t001v9sv7th7em5nn","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m30002d9sv78legvorg"},{"post_id":"ck39k3m2u001y9sv77vdj2oc2","category_id":"ck39k3m1v000e9sv7iwv05w3a","_id":"ck39k3m31002g9sv7paclrbte"},{"post_id":"ck39k3m2w00229sv7y31462vg","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m31002i9sv7a02kzl9w"},{"post_id":"ck39k3m2x00259sv7wlxfvh6c","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m32002k9sv7fvgcj9ty"},{"post_id":"ck39k3m2y00299sv7tnxl5jj6","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m32002m9sv7o8qvfosl"},{"post_id":"ck39k3m30002c9sv70dphy82o","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m33002o9sv7byghqzba"},{"post_id":"ck39k3m3d003i9sv7d5oz970h","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m3l003o9sv7rfdazqo0"},{"post_id":"ck39k3m3e003j9sv7y27n8gpx","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m3q003r9sv7uhnshohx"},{"post_id":"ck39k3m3g003l9sv7x7kea258","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m3v003u9sv7iduy5x9n"},{"post_id":"ck39k3m3l003n9sv7ljahxjfa","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m42003x9sv7o3r5s9w3"},{"post_id":"ck39k3m3p003q9sv7ojwxduwe","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4600409sv7m5gk0khc"},{"post_id":"ck39k3m3u003t9sv7275oj29e","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4a00439sv7ndudv6ck"},{"post_id":"ck39k3m41003w9sv79xftjxlw","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4e00459sv75hze64es"},{"post_id":"ck39k3m45003z9sv705kdpamw","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4h00479sv7h49j79i4"},{"post_id":"ck39k3m4a00429sv7sm6pkc9j","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4i00499sv7u6gkrsz2"},{"post_id":"ck39k3m4n004a9sv7afj5tedw","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4t004f9sv7jbn2fqwc"},{"post_id":"ck39k3m4o004b9sv7sq99wq80","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m4w004h9sv7pe6p9m4e"},{"post_id":"ck39k3m4p004d9sv7nsv20ec2","category_id":"ck39k3m0m00049sv78byu6ib2","_id":"ck39k3m50004i9sv7flvubb2r"}],"PostTag":[{"post_id":"ck39k3m0400009sv76adr5fdc","tag_id":"ck39k3m0g00029sv70gu3m554","_id":"ck39k3m0q00069sv77hnavv7m"},{"post_id":"ck39k3m0d00019sv7lk362q5o","tag_id":"ck39k3m0g00029sv70gu3m554","_id":"ck39k3m0r00089sv7chz4kvzq"},{"post_id":"ck39k3m0k00039sv778kskwgm","tag_id":"ck39k3m0r00079sv7azvzhalm","_id":"ck39k3m0t000a9sv70ekz9tkm"},{"post_id":"ck39k3m20000h9sv7axlp8zjo","tag_id":"ck39k3m0g00029sv70gu3m554","_id":"ck39k3m24000l9sv7y6aud9vb"},{"post_id":"ck39k3m1n000b9sv7zuidy2sl","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m27000n9sv7576nv55e"},{"post_id":"ck39k3m22000i9sv7hiueiqcs","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2a000s9sv7snr8k27p"},{"post_id":"ck39k3m25000m9sv7hl15y81v","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2d000v9sv78ygeu7kq"},{"post_id":"ck39k3m1r000d9sv78xzcivyf","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2g000z9sv78v6q5e8s"},{"post_id":"ck39k3m2k00159sv7y039seov","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2m001a9sv7ysa1pfht"},{"post_id":"ck39k3m1w000g9sv7gp6wsup7","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2n001d9sv7rpcdh7bz"},{"post_id":"ck39k3m1w000g9sv7gp6wsup7","tag_id":"ck39k3m2e000y9sv7sd7phleb","_id":"ck39k3m2o001h9sv7ltbrn0ba"},{"post_id":"ck39k3m1w000g9sv7gp6wsup7","tag_id":"ck39k3m2k00149sv7ujt7l74e","_id":"ck39k3m2q001k9sv7nsf3ersq"},{"post_id":"ck39k3m27000o9sv701f9th0x","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m2s001q9sv7l77o09gs"},{"post_id":"ck39k3m27000o9sv701f9th0x","tag_id":"ck39k3m2e000y9sv7sd7phleb","_id":"ck39k3m2t001t9sv7nxncv5r0"},{"post_id":"ck39k3m27000o9sv701f9th0x","tag_id":"ck39k3m2k00149sv7ujt7l74e","_id":"ck39k3m2u001x9sv7v4cci8q3"},{"post_id":"ck39k3m2r001o9sv71jn8c2ec","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m2v00209sv70itpw480"},{"post_id":"ck39k3m2a000t9sv7ehyhy460","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m2x00249sv7xffduj9n"},{"post_id":"ck39k3m2s001r9sv7y9kxn9pu","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m2y00279sv7ynrvhm02"},{"post_id":"ck39k3m2e000w9sv70srinq8d","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m2z002b9sv7f1ryhgk9"},{"post_id":"ck39k3m2g00109sv7q0kk6866","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m30002e9sv752uszpcu"},{"post_id":"ck39k3m2j00129sv71s68td3s","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m31002h9sv7yk2txss9"},{"post_id":"ck39k3m2l00179sv7u7ejlici","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m32002l9sv7ocle8idl"},{"post_id":"ck39k3m2m001b9sv7ee53sshk","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m33002p9sv7jf497t0n"},{"post_id":"ck39k3m2n001e9sv7sbbbydqs","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m34002r9sv777oyf6uh"},{"post_id":"ck39k3m2p001i9sv7058nq4z7","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m34002t9sv7alv8oz0m"},{"post_id":"ck39k3m2q001l9sv7zay4q50c","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m35002v9sv7msqy03na"},{"post_id":"ck39k3m2t001v9sv7th7em5nn","tag_id":"ck39k3m34002u9sv74zg4hx4o","_id":"ck39k3m35002y9sv7nu5nme22"},{"post_id":"ck39k3m2t001v9sv7th7em5nn","tag_id":"ck39k3m35002w9sv7a4jvh4tl","_id":"ck39k3m35002z9sv75qawpgj7"},{"post_id":"ck39k3m2u001y9sv77vdj2oc2","tag_id":"ck39k3m35002x9sv7uwp6qc0v","_id":"ck39k3m3600319sv7u5oc0an0"},{"post_id":"ck39k3m2u001y9sv77vdj2oc2","tag_id":"ck39k3m1v000f9sv7tjmv69ca","_id":"ck39k3m3600329sv76xrjzxa6"},{"post_id":"ck39k3m2w00229sv7y31462vg","tag_id":"ck39k3m3600309sv7bs05dvds","_id":"ck39k3m3700359sv7ez4c099q"},{"post_id":"ck39k3m2w00229sv7y31462vg","tag_id":"ck39k3m3600339sv7d2fb6ngn","_id":"ck39k3m3700369sv7jfwc667y"},{"post_id":"ck39k3m2x00259sv7wlxfvh6c","tag_id":"ck39k3m34002u9sv74zg4hx4o","_id":"ck39k3m3800399sv7fl63ewg6"},{"post_id":"ck39k3m2x00259sv7wlxfvh6c","tag_id":"ck39k3m35002w9sv7a4jvh4tl","_id":"ck39k3m38003a9sv7jwesu6ds"},{"post_id":"ck39k3m2y00299sv7tnxl5jj6","tag_id":"ck39k3m34002u9sv74zg4hx4o","_id":"ck39k3m39003d9sv7nbaqfm4b"},{"post_id":"ck39k3m2y00299sv7tnxl5jj6","tag_id":"ck39k3m35002w9sv7a4jvh4tl","_id":"ck39k3m39003e9sv7xpiqxm4j"},{"post_id":"ck39k3m30002c9sv70dphy82o","tag_id":"ck39k3m34002u9sv74zg4hx4o","_id":"ck39k3m3a003g9sv79keukjgt"},{"post_id":"ck39k3m30002c9sv70dphy82o","tag_id":"ck39k3m35002w9sv7a4jvh4tl","_id":"ck39k3m3a003h9sv7gj9t1v35"},{"post_id":"ck39k3m3d003i9sv7d5oz970h","tag_id":"ck39k3m34002u9sv74zg4hx4o","_id":"ck39k3m3f003k9sv7t790mkgw"},{"post_id":"ck39k3m3d003i9sv7d5oz970h","tag_id":"ck39k3m35002w9sv7a4jvh4tl","_id":"ck39k3m3k003m9sv7chswdslr"},{"post_id":"ck39k3m3e003j9sv7y27n8gpx","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m3p003p9sv7tumlybec"},{"post_id":"ck39k3m3g003l9sv7x7kea258","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m3u003s9sv7xyz367lr"},{"post_id":"ck39k3m3l003n9sv7ljahxjfa","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m41003v9sv7u52h6uuc"},{"post_id":"ck39k3m3p003q9sv7ojwxduwe","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m45003y9sv7zznh0t86"},{"post_id":"ck39k3m3u003t9sv7275oj29e","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4900419sv7jr8mpvm9"},{"post_id":"ck39k3m41003w9sv79xftjxlw","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4d00449sv7rgdk9f89"},{"post_id":"ck39k3m45003z9sv705kdpamw","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4h00469sv7fyvh2grp"},{"post_id":"ck39k3m4a00429sv7sm6pkc9j","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4i00489sv72lsdicu7"},{"post_id":"ck39k3m4n004a9sv7afj5tedw","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4p004c9sv7v9lxqj04"},{"post_id":"ck39k3m4o004b9sv7sq99wq80","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4s004e9sv7td88cv60"},{"post_id":"ck39k3m4p004d9sv7nsv20ec2","tag_id":"ck39k3m2r001n9sv7h9so3icl","_id":"ck39k3m4w004g9sv7hghg8ykd"}],"Tag":[{"name":"test","_id":"ck39k3m0g00029sv70gu3m554"},{"name":"闲言碎语","_id":"ck39k3m0r00079sv7azvzhalm"},{"name":"laravel","_id":"ck39k3m1v000f9sv7tjmv69ca"},{"name":"swoole","_id":"ck39k3m2e000y9sv7sd7phleb"},{"name":"docker","_id":"ck39k3m2k00149sv7ujt7l74e"},{"name":"net core","_id":"ck39k3m2r001n9sv7h9so3icl"},{"name":"vmware","_id":"ck39k3m34002u9sv74zg4hx4o"},{"name":"新手向","_id":"ck39k3m35002w9sv7a4jvh4tl"},{"name":"vue","_id":"ck39k3m35002x9sv7uwp6qc0v"},{"name":"php","_id":"ck39k3m3600309sv7bs05dvds"},{"name":"问题记录","_id":"ck39k3m3600339sv7d2fb6ngn"}]}}